로그인, 회원 가입, 게시글 작성 이 세 화면들의 공통점은?
바로 웹 서비스에서 정보를 입력하고 서버와 통신한다는것이다 이렇게 웹 서비스에서 사용자로부터 입력을 받은 데이터를 서버로 전송하기 위한 방식을 form 이라고 한다
이번 챕터에서는 폼의 개념에 대해 알아보고 장고에서 폼 처리하는 법을 배워보자 폼을 다룰 수 있게되면 포스트 작성 수정 삭제 기능을 모두 구현할 수 있다
지금까지 같이 구현헤본 read 조회 기능은 데이터베이스에서 데이터를 가져와 템플릿으로 전송한 뒤 렌더해서 사용자에게 보여주면 되었다 Create은 그 반대로
웹에서 사용자의 입력을 받아서 서버로 전송해주어야한다 이때 사용하는것이 바로 폼이다 먼저 폼이 어떻게 생겼나 보자 이 폼 코드들을 지금 다 이해할 필요는 없다
장고를 이용하면 이러한 폼의 대부분의 요소가 자동으로 만들어지기 때문이다

<form action="next/" method="post">
  <label for ="name">이름</label>
  <input type="text" id="name" name="name"/>
  <label for="email">이메일</label>
  <input type="email" id="email" name="email"/>
  <label for="birth">생일</label>
  <input type="date" id="birth" name="birth"/>
  <input type="submit" value="전송">
</form>

이 코드르 렌더하면

이름
[                   ]
이메일
[                   ]
생일
[연도. 월. 일.    달력]
[전송버튼]

이런식으로 우리에게 익숙한 모습이 된다

HTML 폼은 이렇게 폼 태그 안에 여러 컴포넌트들로 구성되어있다
보면 label과 input이 짝 지어져있는데
  <label for ="name">이름</label>
  <input type="text" id="name" name="name"/>
이 label 부분은 앞에 어떤것을 입력해야되는지 나타내고 input 부분은 실재로 입력하는 곳이 된다

이름   (label)
[                   ]   (input)

그리고 우리가 입력을 하려고 하다 보면 전송하려는 데이터에 따라서 생일처럼 달력 형식으로 입력을 받기도 하고 이름처럼 한줄로 입력을 받기도 한다
이렇게 데이터에 따라 다라지는 입력 형식을 위젯(widget)이라고 한다 그리고 이런 위젝은 input 태그 안의 type에서 결정된다 예를 들어 text라고 하면 한줄로 입력받는 형태가 되고
date 이라고 쓰면 달력 형식으로 나오게된다 이 밖에도 우리가 자주 보았던 체크박스, 라디오버튼 등 기본으로 제공하는 타입이 있고 각각의 위젯을 커스텀해서 JavaScript나 CSS를 함께 사용하기도 한다
다시 폼으로 돌아와서 마지막으로 데이터를 입력했으면 서버로 전송할 수 있는 버튼이 있어야한다 폼에서 전송을 위한 타입이 submit이라고 한다 마찬가지로 Input을 써러 만들어주면 된다
버튼 위에 적은 글씨는 vlaue 속성으로 표현할 수 있다
------------------------------------------------------------------------------------------------------------------------------------------------
폼 처리

form이 처리되는 과정
폼 처리 과정을 이해하려면 일단 GET과 POST 요청에 대해 알아야한다 
클라이언트는 서버에게 요청을 하고 서버는 요청을 받아 처리한 후 응답으로 클라이언트에게 돌려준다 이 때 클라이언트가 보내는 모든 리퀘스트는 서버에게 요청하는 종류에 따라 몇가지 방식으로
나뉘는데 가장 많이 쓰이는 것이 GET과 POST이다

GET은 서버로부터 데이터를 조회할 때 사용한다 GET 방식으로 요청을 보낼 때 요청에 포함하고 싶은 데이터가 있을 수 있는데 GET 방식으로 요청을 보낼 때는 필요한 데이터를 URL에 담아서 보낸다
ex> "지웅"의 프로필 화면을 보여줘 -> 데이터를 url에 담아서 보냄 -> http://example.com/user/profile?name=지웅&email=chojw@codeit.kr&birth=1122

example에 보면 ?가 나오고 여러가지 데이터가 함께 나와있다 이렇게 url 뒤에 붙는 데이터 문자열을 쿼리 스트링이라고 하는데 데이터를 전달하는 가장 단순한 방법이다

query string : 서버에 요청할 때 원하는 것을 상세하게 표현할 때 사용

보면 물음표를 사용해서 url의 끝을 알려주고 그 다음부터는 사전형처럼 키와 밸류의 쌍으로 데이터를 표시하고 각각의 데이터는 &로 구분해준다 
GET 방식으로 요청할 때는 쿼리 스트링을 이용해 클라이언트의 데이터가 서버에 전송된다 자 지금처럼 이름과 이메일 생일 뿐만 아니라 비밀번호나 카드번호 같이 민감한 데이터를 서버에 보내야
할 때도 있는데 이럴 때 url에 데이터를 담아서 전송하는 방식을 적합하지 않다 그래서 데이터를 전송할 때는 POST 방식을 가장 많이 사용한다

Post 
Post는 게시하다는 의미처럼 클라이언트가 서버에 데이터를 변경하는 요청을 할 때 사용한다 그리고 POST 방식의 요청은 쿼리 스트링을 이용하지 않고 클라이언트와 서버가 통신하는 메시지의 안쪽에
데이터를 담기 때문에 url에 노출되지 않는다

CRUD로 생각하면 데이터를 생성하는 것은 서버에게 데이터를 추가 즉 변경하도록 요청하는 것이므로 POST 방식을 사용하고 조회는 서버의 데이터를 변경하는 것이 아니므로 GET 방식을 사용한다
수정과 삭제는 역시 데이터를 변경하는 것이니 POST 방식을 사용한다

우리가 직접 사용하는 예로는 구글에서 검색을 하거나 유투브의 동영상을 볼 때는 모두 GET 방식을 사용한다 서버의 데이터를 변경하는 것이 아니라 서버로부터 데이터를가져오는 것이기 때문
반면에 회원가입 블로그 글쓰기 유투브 동영상 올리기 트위터에 글 수정 삭제하기 등은 서버의 데이터를 변경하는 것이므로 모두 POST 방식을 사용한다 

자 이 차이점을 알았다면 아까 전의 코드를 다시 한번 보자

<form action="next/" method="post">
  <label for ="name">이름</label>
  <input type="text" id="name" name="name"/>
  <label for="email">이메일</label>
  <input type="email" id="email" name="email"/>
  <label for="birth">생일</label>
  <input type="date" id="birth" name="birth"/>
  <input type="submit" value="전송">
</form>

여기 보면 form 태그의 속성으로 action과 method 가 있다 이 부분은 지금 폼에 입력된 데이터를 method 방식 즉 POST 요청을 통해서 action에 해당하는 URL 보내겠다는 뜻이다
그러니까 전송 버튼을 누르면 폼의 데이터를 이 url로 post 요청으로 보낸다는 의미이다 아직 이해가 잘 되지 않을 수 있으니 폼이 처리되는 전체 과정을 한번 보자

첫째 맨 먼저 사용자가 폼을 작성하기 위해 서버에 폼 양식을 요청한다 (회원 가입 페이지 같은거) 그런데 처음 요청할 때는 서버로부터 폼 양식을 조회하는 것이므로 GET 방식을 사용한다
이 부분을 이해하는 것이 중요하다 다시 설명하자면 폼이 있는 페이지를 처음 요청할 때는 서버로부터 해당 페이지를 단순히 조회하는 것이므로 GET 방식을 사용한다 그리고 이렇게 처음 서버가 제공하는
폼을 언 바운드 폼이라고 한다 (unbound form) Bound는 결합된 묶여진 이런 뜻인데 아직 데이터가 묶여있지 안기 때문에 이 상태를 언바운드 폼이라고 한다 

자 두번째로 사용자가 데이터를 입력하고 서버로 전송한다 (회원가입할 때 정보 입력하고 회원가입 버튼을 누른다) 이 때 폼의 method에 명시되어있는 Post 방식으로 action에 해당하는 url로 데이터를 전달한다
데이터를 전달한다는 표현은 다시 말하면 폼의 데이터와 함께 post 방식으로 서버에 요청하는 것이다

세번째, 서버에서 입력된 데이터와 폼을 합쳐서 하나의 형태로 만든다 (데이터 + 폼) 이 과정을 바인딩이라고 한다 이렇게 데이터와 합쳐진 폼을 bound form 이라고 한다

네번째, 만약 바운드 폼에서 가져온 데이터 즉 입력된 데이터가 올바르지 않다면 유효하지 않은 잘못된 데이터이므로 사용자에게 다시 폼을 입력하도록 한다

예를 들어 이름을 입력하는 곳에 숫자를 입력했다면 다시 입력하도록 하는것이다 폼 데이터가 유효할 떄 까지 두번째에게 네번째 단계가 반복된다

다섯번째, 입력된 데이터가 유효하다면 다음으로 서버에 지정한 로직을 수행한다 입력된 데이터를 가지고 가공하거나 수정하거나 뭐 저장하거나 등의 작업을 한다

여섯번째, 작업이 모두 끝났다면 새로운 페이지를 안내한다 다시 말하면 새로운 페이지를 사용자에게 응답으로 돌려준다
-----------------------------------------------------------------------------------------------------------------------------------------------

form이 처리되는 과정 중 맨마지막에 바인딩을 한 후 올바른 값을 입력했을 경우 새로운 페이지를 안내한다고 설명하셨는데,

최근에는 데이터를 입력하고나서 새로운 페이지 안내 없이

 작성데이터가 그 자리에서 업데이트 되는 사이트가 많은 것으로 알고있습니다. 

혹시 이러한 기술은 어떤 원리나 어떤 방법을 사용하여 구현하는 것인가요?? 

제가 이해한 질문이 맞다면 서버단에서 이루어지던 일들이 클라이언트 단에서도 이루어지면서 변화된 내용으로 생각합니다. 

  
Ajax 와 같은 서버와 비동기로 주고받을 수 있는게 등장하면서 기존에는 서버에서 다시 모든 데이터를 가져와서 화면에 렌더링 하는 방식으로 구현하였다면,

Ajax 는 필요한 데이터만 가져올 수 있기 때문에 화면 전환없이 필요한 부분만 클라이언트 단에서 처리를 할 수 있게 된거죵.
--------------------------------------------------------------------------------------------------------------------------

HTML Form

폼은 웹 페이지에서 사용자의 데이터를 입력받을 수 있는 입력 양식을 말합니다.  아래에서 배우는 여러 Form 요소들은 Django에서 제공하는 폼을 사용하면 저절로 생성되지만 기본적인 HTML 폼을 알고 있으면 Django의 폼을 이해하는데 많은 도움이 됩니다.
label과 input

폼은 form태그 안에 사용자의 입력을 받는 input태그와 설명을 위한 label태그의 쌍으로 구성됩니다.

<form>
    <lable>이름</lable>
    <input type="text">
</form>

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=4134&directory=Untitled.png&name=Untitled.png
for & id

각각의 input태그와 label태그를 묶어주기 위해서 label태그에는 for 속성, input태그에는 id가 사용됩니다.

<form>
    <label for="title">제목</label>
    <input type="text" id="title">
</form>

만약 여기에서 for와 id 속성을 적어주고 싶지 않다면 label 태그로 input태그를 감싼 형태를 사용하면 됩니다.

<form>
    <label>제목
        <input type="text">
    </label>
</form>

name

name은 입력된 데이터를 서버로 전송할 때, 서버에서 각각의 데이터를 구분하기 위한 속성으로 name 속성이 있는 양식 요소만 값이 서버로 전달됩니다.

<form>
    <label for="title">제목</label>
    <input type="text" id="title" name="title">
</form>

type

type은 입력할 값에 따른 유형을 나타내는 속성입니다. 이 type에 따라 사용자가 브라우저에서 값을 입력하는 형식인 위젯(widget)이 달라집니다. 자주 사용되는 type은 아래와 같습니다.

    email

<label for="email">이메일</label>
<input type="email" id="email" name="email">

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=4134&directory=Untitled%201.png&name=Untitled+1.png

    password

<label for="pwd">비밀번호</label>
<input type="password" id="pwd" name="pwd">

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=4134&directory=Untitled%202.png&name=Untitled+2.png

    button

<input type="button" value="버튼입니다">

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=4134&directory=Untitled%203.png&name=Untitled+3.png

    radio

<input type="radio" id="male" name="gender" value="male">
<label for="male">남자</label><br>
<input type="radio" id="female" name="gender" value="female">
<label for="female">여자</label><br>
<input type="radio" id="other" name="gender" value="other">
<label for="other">기타</label>

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=4134&directory=Untitled%204.png&name=Untitled+4.png

    checkbox

<input type="checkbox" id="lang1" name="lang1" value="Python">
<label for="lang1">파이썬(Python)</label><br>
<input type="checkbox" id="lang2" name="lang2" value="JAVA">
<label for="lang2">자바(JAVA)</label><br>
<input type="checkbox" id="lang3" name="lang3" value="Go">
<label for="lang3">고(Go)</label><br>

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=4134&directory=Untitled%205.png&name=Untitled+5.png

    date

<label for="birthday">생년월일</label>
<input type="date" id="birthday" name="birthday">

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=4134&directory=Untitled%206.png&name=Untitled+6.png

    file

<label for="userfiles">파일선택</label>
<input type="file" id="userfiles" name="userfiles" multiple>

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=4134&directory=Untitled%207.png&name=Untitled+7.png

    submit

<input type="submit" value="전송하기"> 

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=4134&directory=Untitled%208.png&name=Untitled+8.png
form 속성

form에는 입력된 데이터를 전송할 서버의 URL을 지정하는 action과 http 전달 방식을 지정해 주는 method 속성이 있습니다.

<form action="register" method="post">
    <label for="name">이름</label>
    <input type="text" id="name" name="name">
    <input type="submit" value="제출하기">
</form>

GET과 POST

GET 방식으로 지정하면 유저가 데이터를 입력하고 전송했을 때 URL 뒤에 쿼리 스트링(Query String) 형태로 데이터가 전달됩니다.

<form action="/register" method="get">
    <label for="name">이름</label>
    <input type="text" id="name" name="name">
    <label for="email">이메일</label>
    <input type="email" id="email" name="email">
    <input type="submit" value="제출하기">
</form>

http://www.codeit-django.com/register?name=우재&email=woojae@codeit.kr

POST 방식은 전송되는 URL에는 표시되지 않고 서버로 전송하는 메세지 안쪽에 데이터를 넣어서 전달합니다. 이 부분에 대해서는 조금 더 나중에 자세하게 다루겠습니다.

<form action="/register" method="post">
    <label for="name">이름</label>
    <input type="text" id="name" name="name">
    <label for="email">이메일</label>
    <input type="email" id="email" name="email">
    <input type="submit" value="제출하기">
</form>

http://www.codeit-django.com/register

그러면 언제 GET을 사용하고 언제 POST를 사용해야 할까요? 그것을 결정하는 것은 이 요청이 무엇을 하는지에 달려 있습니다. GET은 가져오다는 의미처럼 서버에서 데이터를 가져오는 요청을 보낼 때 사용하고 그 외에 서버의 데이터를 변경하거나 다른 로직을 수행할 때는 POST를 사용합니다. 간단히 정리하면 form을 사용할 때는 사용자로부터 데이터를 입력받아서 저장, 수정 등의 데이터베이스와 관련된 로직을 많이 수행하죠? 그렇기 때문에 form에서는 대부분의 경우 POST를 사용한다고 생각하면 됩니다.

----------------------------------------------------------------------------------------------------------------------------------------

CRUD 중 Create 에 해당하는 블로그 글 쓰기 페이지의 폼을 만들어보자 사용자로부터 입력을 받을 수 있는 형태가 되겠죠? 관리자 페이지의 포스트 작성 페이지를 보자
그런식으로 문자열 형식의 제목과 내용을 입력하는 곳이 있고 SAVE 즉 작성한 데이터를 서버로 전송하는 버튼도 있다 이렇게 세가지 기능을 폼으로 구현해보자

먼저 posts 디렉토리 안에 new file 을 해서 forms.py를 만든다 이곳에서 우리가 사용할 폼을 구현하고 템플릿과 뷰에서는 이 폼을 가져다가 사용만 하면 된다
장고 폼은 Form 클래스는 작성하는것 부터 시작한다 하나의 Form 클래스가 하나의 폼이 되는거다 그대로 따라 적어봐라
->
from django import forms 

class PostForm(forms.Form):

자 모든 Form 클래스는 이런식으로 django forms의 Form 클래스를 상속해서 구현한다 자 그 다음에 이제 클래스 안의 input 항목들을 하나씩 만들어주면 된다
작성하는 방식이 모델을 작성할 때와 매우 비슷하다
->
class PostForm(forms.Form):
    title = forms.CharField(max_length=50, label='제목')
    content = forms.CharField(label='내용', widget=forms.Textarea)

먼저 제목은 title로 그리고 forms 안에 있는 CharField를 이용해서 작성한다 최대길이와 레이블 해준다
그리고 내용은 content라는 변수에 역시 forms의 CharField를 이용해서 작성한다 레이블 해주고 widget 설정도 해준다
자 앞서 보았던 HTML 폼을 떠올려보면 우리가 input 태그를 적을 때 타입 속성에 따라 위젝이 구분된다고 했었다 기본적으로 모든 폼 필드는 해당 필드에 맞는 디폴트 위젝 즉 
기본 위젝을 가지고 있다 날짜를 입력하는 DateField라면 달력모양으로 입력을 받는 위젯 CharField라면 한 줄 입력을 위한 위젝이 기본적으로 설정되어있다
그리고 필요하다면 폼 필드를 정의할 때 위젯을 따로 명시할 수 있다 이 CharField는 기본적으로 TextInput 위젯 즉 한 줄 입력을 위한 위젯을 가지고 있는데
여기 내용의 경우 문자열이긴 하지만 여러 줄 입력을 해야한다 여러줄 입력을 위한 위젯은 Textarea가 있다 그래서 이런식으로 위젯을 설정한다
자 폼에 대한 정의는 이것으로 끝인데 우리가 모델을 정의할 때와 굉장희 비슷하다

이제 뷰에서 이 폼을 가져와서 템플릿으로 보내보자 그 전에 먼저 urls.py로 가서  path('posts/new', views.post_create), 이 부분 주석 해제한다
그 다음에 url name을 정해준다 -> path('posts/new', views.post_create, name="post-create"),

자 그 다음에 views.py 로 가서 post_create 뷰를 작성해주자 그리고 PostForm을 import 해주고 post_form 이라는 변수에다가 PostForm을 사용해보자
->
from .forms import PostForm 추가 

그리고 post_create 뷰

def post_create(request):
    post_form = PostForm()

자 이제 폼을 넘겨주기만 하면 된다 바로 return 해주고 render 해주고 request 해주고 이번에는 posts/post_form.html로 보내주자
대신 이번에는 context 변수를 따로 만들지 않고 form 해준 다음에 post_form 이렇게 해서 넣어주도록 하자 ( 뭐 context 만들어서 넣어줘도 상관은 없자나)
->
def post_create(request):
    post_form = PostForm()

    return render(request, "posts/post_form.html", {'form' : post_form})
    
자 이제 뷰를 만들었으니 템플릿을 만들자 templates/posts 디렉토리에다가 post_form.html을 만들자 자 일단 디자인 요소는 배제하고 간단하게 기능 구현에 집중한다
자 원래라면 앞에서처럼 form 태그를 쓰고 각각의 입력될 컴포넌트를 모두 적어줘야하지만 django의 form 클래스가 대부분 작성해주기 때문에 우리는 form 태그와 서버로
전송을 하기위한 버튼만 만들어주겠다 자 한번 따라 써보라
먼저 <form></form> 이렇게 form 태그를 만들어준 다음에 imnput type="submit" 이렇게 하고 value="전송" 이렇게 적어주자
->
<form>
    <input type="submit" value="전송">
</form>

자 이렇게 하면 이제 폼에서 직접 적어야 하는 부분은 다 됬다 나머지는 뷰에서 넘어온 Form 클래스를 사용한다
->
<form>
    {{form}}
    <input type="submit" value="전송">
</form>

매우 간단하지 않은가? 이렇게만 적으면 폼의 자세한 부분은 Form 클래스를 참고해서 django가 자동적으로 생성한다 한번 확인하자
개발서버를 열고 들어가보자 잘 나온다 그러면 검사(마우스 우클릭 inspect)를 눌러서 이 부분 (내용 입력부분)을 확인해보면 우리가 작성한 django 폼이 label과 input쌍으로
잘 변환되었다는것을 확인할 수 있다 (form 코드로 변환되었다)
->
<html><head></head><body><form>
    <label for="id_title">제목:</label><input type="text" name="title" maxlength="50" required="" id="id_title">
<label for="id_content">내용:</label><textarea name="content" cols="40" rows="10" required="" id="id_content"></textarea>
    <input type="submit" value="전송">
</form></body></html>

다 그럼 다시 템플릿으로 돌아가보자 자 지금은 단순히 폼이라고 써서 label과 input 쌍으로 렌더했는데 장고는 이런 폼을 다른 HTML 컴포넌트와 함께 구조적으로 렌더할 수 있는 옵션을 
제공한다 한번 해보자 form 태그 안에 .as_ul을 붙이자 여기 있는 ul은 unordered list의 약자로 순서가 없는 리스트를 말한다
이렇게 적으면 폼의 각 요소들을 리스트 형식으로 바꿔서 렌더하게 된다 다시 페이지로 가서 새로고침을 하면 이번에는 폼이 이런식으로 li 태그 안에 들어가 있는 것을 알 수 있다 
->
<html><head></head><body><form>
    <li><label for="id_title">제목:</label> <input type="text" name="title" maxlength="50" required="" id="id_title"></li>
<li><label for="id_content">내용:</label> <textarea name="content" cols="40" rows="10" required="" id="id_content"></textarea></li>
    <input type="submit" value="전송">
</form></body></html>

자 이렇게 리스트 형태로 렌더해주는 forms.as_ul 말고도 표 형식으로 렌더해주는 as_table이나 p 태그로 렌더해주는 as_p가 있다
이 점 참고로 알아두도록 하자 

자 그런데 지금 이 페이지에서 우리가 아무 제목 아무 내용을 넣어서 전송을 눌러도 아무런 변화가 없다 이건 폼만 작성했을 뿐 아직 다른 로직은 구현하지 않아서 그렇다
이 부분은 다음 시간에 하자
-----------------------------------------------------------------------------------------------------------------------------------------
실습과제
일기장 페이지 만들기

이번에는 일기를 입력할 수 있는 폼을 만들어 보겠습니다. 아래를 참고해서 작성해 주세요.

    models.py를 보면 우리가 작성해야 하는 필드는 총 5개 입니다.

    title = models.CharField(max_length=100)
    content = models.TextField()
    feeling = models.CharField(max_length=80)
    score = models.IntegerField()
    dt_created = models.DateField()

    diary 디렉토리에 forms.py를 생성하고 아래를 참고해서 PageForm을 작성해 주세요.

    from django import forms

    class PageForm(forms.Form):
        ...

    # 폼 필드 목록

    # 아래를 참고해서 작성해 주세요.
    title -> CharField, 최대 길이 100자, label='제목'
    content -> CharField, widget=forms.Textarea, label='내용'
    feeling -> CharField, 최대 길이 80자, label='감정 상태'
    score -> IntegerField, label='감정 점수'
    dt_created -> DateField, label='날짜'

    urls.py로 가서 일기 작성에 해당하는 URL 패턴의 주석을 해제해 주세요.

    views.py에 아래를 참고하여 page_create 뷰를 작성해 주세요.

    from .forms import PageForm # 사용할 form을 가져와야 합니다.
    form = PageForm() # 작성한 폼을 이용해서 form을 생성합니다.

        page_create 뷰는 page_form.html을 랜더 해서 결과로 돌려주는데, 이때 'form'이라는 키워드로 생성한 PageForm을 context로 넘겨주도록 작성해 주세요.

    page_form.html로 가서 p 태그 형식으로 form을 랜더 하도록 작성해 주세요.

    base.html로 가서 일기 쓰기로 이동하는 링크에 page-create를 연결해 주세요.

    개발 서버를 켜고 /diary/로 이동한 후 '일기 쓰기'를 눌러서 아래와 같이 폼이 나오는지 확인합니다. 지금은 아무런 동작을 하지 않아요 ! 입력할 수 있는 폼이 잘 나온다면 ok !

    https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=4136&directory=Untitled%201.png&name=Untitled+1.png

    https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=4136&directory=Untitled%202.png&name=Untitled+2.png

과제 해설close solution tab

    diary/forms.py 안에 PageForm 클래스를 작성합니다. Form 클래스는 Django의 forms.Form을 상속하고 각각의 폼 필드를 작성하면 됩니다. 이때 content 같은 경우 여러줄 입력이 가능한 Textarea 위젯을 파라미터로 넘겨주어 위젯을 명시해 줍니다. 명시하지 않은 다른 폼 필드들은 각 필드 타입에 따른 기본 위젯으로 설정 됩니다.

    from django import forms

    class PageForm(forms.Form):
        title = forms.CharField(max_length=100, label='제목')
        content = forms.CharField(widget=forms.Textarea, label='내용')
        feeling = forms.CharField(max_length=80, label='감정 상태')
        score = forms.IntegerField(label='감정 점수')
        dt_created = forms.DateField(label='작성일')

    urls.py로 가서 일기 작성에 해당 하는 URL의 주석을 해제 합니다.

    from django.urls import path
    from . import views

    urlpatterns = [
        path('diary/', views.page_list, name='page-list'),
        path('diary/info/', views.info, name='info'),
        path('diary/write/', views.page_create, name='page-create'), # 주석 해제
        path('diary/page/<int:page_id>/', views.page_detail, name='page-detail'),
        # path('diary/page/<int:page_id>/edit/', views.page_update, name='page-update'),
        # path('diary/page/<int:page_id>/delete/', views.page_delete, name='page-delete'),
    ]

    이제 views.py로 가서 page_create 뷰를 작성하면 됩니다. page_create 뷰는 page_form 템플릿을 랜더해서 결과로 돌려주는데 이때 작성했던 PageForm을 page_form 템플릿으로 함께 넘겨주도록 작성하면 됩니다.

    from django.shortcuts import render
    from .models import Page
    from .forms import PageForm

    ... 

    def page_create(request):
        form = PageForm()
        return render(request, 'diary/page_form.html', {'form': form})

    ...

    그리고 아직 page_form 템플릿을 작성한 적이 없죠? page_form 템플릿을 작성합니다. 보면 미리 form 태그와 작성하기 버튼이 작성되어 있는데 여기에 page_create 뷰에서 넘겨준 form을 이용해서 작성합니다. 각각의 입력 요소들을 p 태그로 랜더해주는 as_p를 사용하겠습니다.

    <form method="post">
        {{form.as_p}}
        <input type="submit" value="작성하기">
    </form>

    이렇게 작성하면 forms.py에서 작성한 대로 각각의 폼 필드에 알맞은 형태로 html 태그가 생성됩니다.

    마지막으로 base.html로 가서 '일기 쓰기'로 이동하는 링크에 지금 작성한 page-create를 연결해 주면 됩니다. url 템플릿 태그를 이용하면 되겠죠?

    {% load static %}
    <!DOCTYPE html>
    <html lang="en">
    ...
    <body>
        <div class="menu">
            <h1><a href="{% url 'page-list' %}"><img src="{% static 'diary/image/logo02.svg' %}"></a></h1>
            <ul>
                <li><a href="{% url 'page-list' %}">모아보기</a></li>
                <li><a href="{% url 'info' %}">감정일기란</a></li>
                <li><a href="{% url 'page-create' %}">일기쓰기</a></li>
            </ul>
        </div>
        {% block content %}
        {% endblock content %}
    </body>

    다 되었습니다. 개발 서버를 켜고 /diary/로 이동해서 '일기 쓰기'를 눌러 일기 작성 폼이 잘 나오는지 확인합니다. 아직 폼이 입력은 되지만 동작은 하지 않습니다. 이 부분은 다음 실습에서 작성해 보도록 할게요.

----------------------------------------------------------------------------------------------------------------------------------------------------------

포스트 작성 페이지

이번에는 장고 폼을 처리하는 로직을 넣어서 포스트 작성 페이지를 완성해보자
폼 처리과정의 첫번째는 유저가 폼을 작성하는 페이지를 서버에 요청하는것이다 우리가 이렇게 domain/posts/new로 들어오면 그건 곧 서버에 요청을 하는 것이니까 폼 처리과정의 첫번째 단계다 그리고 이 때의 요청은
우리 서버에게 GET 방식으로 요청을 하게된다 잠깐 복습을 하자면 모든 요청은 서버에 요구하는 것에 따라 몇가지 방식으로 나뉘는데 대표적으로 GET과 POST가 있다 서버에 데이터 변경을 요청하는 POST 그 외에 일반적인 
조회 요청은 GET 방식을 이용하는데 그러면 지금 우리의 post_form을 보자
->
<form>
    {{form.as_ul}}
    <input type="submit" value="전송">
</form>

앞에서 폼에 대해 배울 때 폼에다가 action="" 또 이런식으로 method=""를 적어줄 수도 있었다 
<form action="" method="">
    {{form.as_ul}}
    <input type="submit" value="전송">
</form>

자 여기에 action 같은 경우에는 우리의 폼을 정달할 서버의 url을 적어주는곳이고 여기 이 method의 경우에는 이 폼 데이터를 담아서 서버에 요청할 때 즉 서버에 전송할 때 어떤 방식으로 전송할지를 적어주는 곳이다
<form>
    {{form.as_ul}}
    <input type="submit" value="전송">
</form>
그리고 바로 위처럼 아무것도 안적게되면 기본적으로 action에는 현재 있는 url이 들어가게 되고 method는 GET을 사용하게된다 
자 action이 현재 url이라는 것은 여기 이 부분이죠? (<input type="submit" value="전송">) 전송 버튼을 누르면 현재 페이지의 url로 다시 요청을 하게되는데
이 때는 폼 데이터인 이 부분을({{form.as_ul}}) 담아서 보낸다는 의미다 같은 url로 다시 전송한다는 것이 조금 헷갈릴 수도 있는데 지금은 완벽하게 이해안가도 된다
뒤에서 로직을 구현하다보면 아마 자연스럽게 이해가 될것이다 그러면 코드를 작성해보자 따라해보자 
method는 post라고 적어준다 이렇게 하면 데이터를 입력하고 전송을 누르게되면 post 방식으로 서버에 전송된다 그리고 action을 따로 적어주지 않았으니 현재 url 즉 여기 적힌 url로(domain/posts/new) 데이터를 전송하게 된다
이 부분은 뷰에서 처리하는 로직을 배우면 좀 더 명확해질테니 기다려라 그리고 form 태그 뒷부분에다가 crst_token 템플릿 태그를 적어준다
여기서 crsf는 cross site request forgery의 약자로 교차 사이트 위조 검증 이렇게 말하는데 쉽게 말하면 내가 하지 않은 요청을 내가 한 것처럼 위조하는 것을 방지하기 위한 보안 기술이다
뭐 이 기술이 어떻게 작동하는지는 잘 알 필요 없고 폼 처리할 때는 장고가 제공하는 crsf 템플릿 태그를 사용한다 이렇게만 알아두자
->
<form method="post">{% csrf_token %}
    {{form.as_ul}}
    <input type="submit" value="전송">
</form>

자 이제 템플릿 작성은 다 끝났다 작성한 코드가 얼마 안되는데 이렇게 작성한 폼에 유저가 데이터를 입력하고 전송을 눌러 데이터를 서버에 보내는 것이 폼 처리의 두번째 단계이다 
이 다음부터는 이제 서버에서 데이터를 받아서 처리해주는 단계인데 로직을 작성하는 views.py로 가보자 자 이제는 데이터를 서버에서 처리하는 과정을 작성해보자     

def post_create(request):
    post_form = PostForm()

    return render(request, "posts/post_form.html", {'form' : post_form})

일단 로직에 대해 간단히 말하면 위에서 request 요청이 POST 방식으로 들어오면 그러니까 urls.py에서 post/news로 POST 방식으로 요청이 온다면 이 때는 유저가 폼의 데이터를 작성하고 전송을 눌렀을 때다 그렇기 때문에
if request.method == "POST" 그러니까 유저가 폼에 데이터를 입력하고 전송 버튼을 눌렀을 때라면 우리는 유저가 입력한 데이터를 가져와서 모델을 이용해 데이터베이스에 저장하면 된다 그러면 POST 요청에서 데이터를 가져와보자
title = request.POST['title']
content = request.POST['content']
이렇게 해주면 요청에서 데이터를 가져올 수 있다
new_post = Post(
  title = title,
  content = content
)
new_post.save()
그다음에 new_post 란 변수에다가 Post 해주시고 안에 위에처럼 작성한다 그러면 Post 모델을 이용해서 데이터를 생성하고 이 생성한 데이터를 new_post.save()로 저장해준다
이런 과정은 앞에서 쉘을 이용해서 데이터베이스를 조작할 때 한번 해봤다

자 다음엔 이렇게 데이터를 저장하고 난 다음 방금 저장했던 글을 보는 상세 글 보기 페이지 즉 디테일 페이지로 이동하게 해보자
->  return redirect('post-detail', post_id=new_post.id)

지금처럼 다른 url로 이동할 때는 이 redirect 이라는걸 쓰는데 말 그대로 다른 페이지로 연결해주는 함수다 일단 이걸 쓰려면 from django.shortcuts import redirect 이렇게 해주자 
from django.shortcuts import render 그냥 이 옆에 from django.shortcuts import render, redirect 이렇게 해줘도 된다          
다시 return redirect('post-detail', post_id=new_post.id) 이 부분을 설명하자면 'post-detail' 이 부분은 어디로 이동할지를 적어주는 부분인데 지금은 url의 네임을 적어줬다 url을 문자열로 하드코딩
하는것보단 url name을 적어주는게 더 좋기 때문에 이런식으로 적어주고 그 다음에 urls.py를 보면 detail 페이지로 가려면 post_id가 필요했다 ('posts/<int:post_id>/') 그렇기 때문에 post_id=new_post.id
여기서 post_id를 데이터베이스에 저장될 데이터의 id값을 이용해서 상세보기 페이지로 이동시키는 것이다 즉 새로 생성한 Post 모델의 id 값이 post_id가 되는거다
즉 이 코드를 한번 정리해보자면 요청에서 유저가 입력한 데이터를 가져온 다음 데이터를 만들어주고 그 데이터를 데이터베이스에 저장한다 그리고난다음 상세보기 페이지로 이동을 시켜준다 
자 마지막으로 요청 method가 POST 가 아닐 경우도 써보자 else를 해주고 그 안에 코드를 작성하는데 그 전에 위에는 POST 방식이고 밑에는 POST 방식이 아닐 때니까 GET 방식으로 생각해주면 된다
보통 이 GET 방식은 유저가 데이터를 입력하기 전 그러니까 처음으로 여기 posts/new 이 url로 접속을 하면 유저는 서버로 요청을 하게 되는데 그 요청이란 우리가 데이터를 입력할 수 있는 폼을 달라는 의미이다 그러니까 서버에서는
유저들이 데이터를 입력할 수 있는 폼을 돌려줘야겠지? 그러니까 원래 맨 밑에 있던 두줄을 else 안으로 이동시켜 이렇게 작성해주자
->
def post_create(request):
    if request.method == 'POST':
        title = request.POST['title']
        content = request.POST['content']
        new_post = Post(
            title = title,
            content = content
        )
        new_post.save()
        return redirect('post-detail', post_id=new_post.id)
    else:
        post_form = PostForm()
        return render(request, "posts/post_form.html", {'form' : post_form})

개발서버 열고 코드 잘 동작하는지 확인해보자 글하나 새로 써보자 잘 작동되나 확인해보자~

아 그리고 지금 post_list 템플릿에 글쓰기 버튼이 없는데 이것도 하나 만들어주자





