로그인, 회원 가입, 게시글 작성 이 세 화면들의 공통점은?
바로 웹 서비스에서 정보를 입력하고 서버와 통신한다는것이다 이렇게 웹 서비스에서 사용자로부터 입력을 받은 데이터를 서버로 전송하기 위한 방식을 form 이라고 한다
이번 챕터에서는 폼의 개념에 대해 알아보고 장고에서 폼 처리하는 법을 배워보자 폼을 다룰 수 있게되면 포스트 작성 수정 삭제 기능을 모두 구현할 수 있다
지금까지 같이 구현헤본 read 조회 기능은 데이터베이스에서 데이터를 가져와 템플릿으로 전송한 뒤 렌더해서 사용자에게 보여주면 되었다 Create은 그 반대로
웹에서 사용자의 입력을 받아서 서버로 전송해주어야한다 이때 사용하는것이 바로 폼이다 먼저 폼이 어떻게 생겼나 보자 이 폼 코드들을 지금 다 이해할 필요는 없다
장고를 이용하면 이러한 폼의 대부분의 요소가 자동으로 만들어지기 때문이다

<form action="next/" method="post">
  <label for ="name">이름</label>
  <input type="text" id="name" name="name"/>
  <label for="email">이메일</label>
  <input type="email" id="email" name="email"/>
  <label for="birth">생일</label>
  <input type="date" id="birth" name="birth"/>
  <input type="submit" value="전송">
</form>

이 코드르 렌더하면

이름
[                   ]
이메일
[                   ]
생일
[연도. 월. 일.    달력]
[전송버튼]

이런식으로 우리에게 익숙한 모습이 된다

HTML 폼은 이렇게 폼 태그 안에 여러 컴포넌트들로 구성되어있다
보면 label과 input이 짝 지어져있는데
  <label for ="name">이름</label>
  <input type="text" id="name" name="name"/>
이 label 부분은 앞에 어떤것을 입력해야되는지 나타내고 input 부분은 실재로 입력하는 곳이 된다

이름   (label)
[                   ]   (input)

그리고 우리가 입력을 하려고 하다 보면 전송하려는 데이터에 따라서 생일처럼 달력 형식으로 입력을 받기도 하고 이름처럼 한줄로 입력을 받기도 한다
이렇게 데이터에 따라 다라지는 입력 형식을 위젯(widget)이라고 한다 그리고 이런 위젝은 input 태그 안의 type에서 결정된다 예를 들어 text라고 하면 한줄로 입력받는 형태가 되고
date 이라고 쓰면 달력 형식으로 나오게된다 이 밖에도 우리가 자주 보았던 체크박스, 라디오버튼 등 기본으로 제공하는 타입이 있고 각각의 위젯을 커스텀해서 JavaScript나 CSS를 함께 사용하기도 한다
다시 폼으로 돌아와서 마지막으로 데이터를 입력했으면 서버로 전송할 수 있는 버튼이 있어야한다 폼에서 전송을 위한 타입이 submit이라고 한다 마찬가지로 Input을 써러 만들어주면 된다
버튼 위에 적은 글씨는 vlaue 속성으로 표현할 수 있





