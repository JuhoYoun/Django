아직 저장된 데이터가 없다면?

만약 우리 포스트 리스트에서 현재 저장되 있는 데이터가 하나도 없다면 어떻게 해야될까? 우선 있는 데이터들을 다 지워보자 데이터를 지우는데는 두가지 방법이 있는데 첫번째는 관리자 페이지로 가서 모든 글을 
삭제하는 방법이다 관리자 페이지로 가서 Posts 로 가서 모든 글들을 선택하고 delete 을 누르면 된다 그리고 또 다른 방법은 장고 ORM을 이용해서 한방에 지우는 방법이다
터미널로 가서 python manage.py shell 을 처서 장고 쉘로 가자 그리고 from posts.models import Post 해서 모델을 임포트한다 그리고 Post.objects.all() 하면 현재 게시글이 모두 나온다
게시글을 모두 지우려면 ?  Post.objects.all().delete() 이 명령어를 치면 모든 글이 지워진다 Post.objects.all() 치면 빈 쿼리스트링이 나온다 exit() 해주고 개발서버를 통해 포스트 리스트 페이지로 가보자
메인 페이지를 가면 아무 글도 표시되지 않은것을 볼 수 있다 이 페이지가 에러가 난것은 아닌데 유저가 보았을 때 이상하다고 느낄 수 있다 이럴 땐 첫 글을 작성해보세요 같은 문구가 나오는데 유저경험 측면에서 좋다
post_list 템플릿으로 가자 자 여기다 if else 문을 넣어 게시글이 있을 때와 없을 때의 동작을 나눠서 구현할것이다
{% extends './base.html' %}
{% load static %}

{% block css %}
    <link rel="stylesheet" href="{% static 'posts/css/post_list.css' %}">
{% endblock css %}

{% block logo_text %}
    <div id="header">
        <div class="container">
            <h1><img src="{% static 'posts/images/headertxt.png' %}"></h1>
        </div>
    </div>
{% endblock logo_text %}


{% block content %}
    <div class='btn_post'>
        <a href="{% url 'post-create' %}">글쓰기</a>
    </div>
    {% if posts %}
        <div class="post_container">
            {% for post in posts %}
                <div class="post"><a href="{% url 'post-detail' post.id %}">         
                    <h2 class="title">{{post.title}}</h2>
                    <p class="date">{{post.dt_created}}</p>
                    <p class="text">{{post.content|slice:"0:100"}}</p>
                </a></div>
            {% endfor %}
        </div>
    {% else %}
        <div class='blank'>
            <p>글이 없넹<br>하나 작성해보는건 어때?</p>
        </div>
    {% endif %}
{% endblock content %}


짜잔 이렇게 하면 된다~~
----------------------------------------------------------------------------------------------------------------------------------
가져올 데이터가 존재하지 않는다면?

우리 뷰를 보면 많은 뷰 함수에서 post = Post.objects.get(id=post_id) 이런식으로 id를 이용해서 포스트를 가져온다 그런데 만약 데이터베이스에서 없는 아이디를 이용해서 조회하려고 하면 어떻게 될까?
한번 없는 id를 이용해서 url을 처보자 -> 에러페이지가 나온다 웹서비스를 할 때는 이런식으로 의도치 않은 접근 등으로 인한 다양한 에러 상황을 처리해줘야한다 지금과 같은 상황에서는 사용자에게 404에러 즉
이러한 접근에 대해서는 제공할 페이지가 없다 뭐 잘못된 접근이라는 에러 메세지를 보여주는것이 좋습니다 한번 해보자 다시 뷰로 가서 post_detail 뷰에 에러를 처리해주는 코드를 작성하자

이전 뷰
def post_detail(request, post_id):
    post = Post.objects.get(id=post_id)
    context = {'post' : post}
    return render(request, 'posts/post_detail.html', context)

새로운 뷰
def post_detail(request, post_id):
    try:
        post = Post.objects.get(id=post_id)
    except Post.DoesNotExist:
        raise Http404()

    context = {'post' : post}
    return render(request, 'posts/post_detail.html', context)

try 문은 에러가 날만한 구문을 적고 try 즉 시도하라는 뜻이다 그리고 만약 이떄 우리가 원하는 데이터를 가지고 오지 못한다면 그러니까 우리가 요청한 post_id에 해당하는 데이터가 데이터베이스에 없으면 
Post.DoesNotExist라는 오류가 나게되는데 그럴 때는 except Post.DoesNotExist: 해주시고 raise Http404() 해서 404 에러를 띄워주면 된다 이 Http404 에러를 띄우려면 에러도 따로 임포트 해줘야한다
-> from django.http import Http404

그리고 이 Http404는 에러가 발생했을 떄 장고가 내부적으로 가지고 있는 404 에러에 대한 뷰를 호출해서 기본 에러 페이지를 렌더한다음 유저에게 보여주게 된다
개발 서버 열고 테스트해봐라

그런데 뷰 안에 이렇게 데이터베이스로부터 어떤 특정한 조건의 데이터를 가져오는 일은 매우 흔한일이다 그래서 장고는 이렇게 데이터를 조회했는데 해당 데이터가 없는 경우에 404 에러 까지 발생시키는 일련의
과정을 하나의 함수로 제공한다 이부분을 함께 해보자 일단 다음과 같이 임포트해주자 -> from django.shortcuts import get_object_or_404 그리고 아래와 같이 뷰를 작성해주자
->
def post_detail(request, post_id):

    post = get_object_or_404(Post, id=post_id)

    context = {'post' : post}
    return render(request, 'posts/post_detail.html', context)
    
자 개발서버 켜고 확인해보자 404 에러 메세지가 잘 출력된다 자 만약에 이런식으로 에러에대한 처리를 해주지 않으면 404 에러말고 500 에러 즉 서버 에러를 발생시키는데 서버 에러란 한마디로 말하면 
서버 어딘가에서 로직을 수행하다고 발생한 에러라는 뜻이다 굉장히 범위가 넓지? 그래서 500 에러는 어디서 발생한 에러인지 알 수 없지만 404 에러는 요청에 대한 표시를 할 때 페이지가 없다는 말로
서버에 문제가 있는 것이 아니고 내가 요청한 페이지가 없는 페이지구나 라는 인식을 할 수 있게 된다 자 앞으로 뷰에서 get으로 데이터를 조회할 때는 get_object_or_404 를 사용하자 자 그리고 update 와 delete
뷰도 바꿔주자 

더 알아보기

파이썬 try-except 구문에 대해 더 알고싶다면 아래의 공식문서를 참고해보세요.
try-except 공식문서 바로가기
https://docs.python.org/ko/3/tutorial/errors.html#handling-exceptions
-----------------------------------------------------------------------------------------------------------------------------------------------

실습과제
100XP
새로 산 일기장

데이터가 없을 때 다음과 같이 안내 페이지가 나오도록 작성해 봅시다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=4157&directory=Untitled.png&name=Untitled.png

    page_list 템플릿 아래쪽에 글이 없을 때 보여줄 HTML이 있습니다.

    뷰에서 넘겨준 object_list에 데이터가 있다면 현재 content 블럭 안에 있는 내용이 나오도록 하고, 만약 object_list에 데이터가 없다면 페이지 아래 있는 HTML이 나오도록 작성해 주세요.

    {% if <조건> %}
    {% else %}
    {% endif %} 를 사용해서 작성하세요.

    일기 쓰기 페이지로 이동하는 url을 url 템플릿 태그를 이용해서 작성해 주세요.

    개발 서버를 켜고 데이터를 모두 지운 후 아래와 같이 잘 표시 되는지 확인해 주세요.

    https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=4157&directory=Untitled%201.png&name=Untitled+1.png

과제 해설close solution tab

    page_list 템플릿을 보면 아래에 object_list에 데이터가 없을 때 보여줄 HTML이 있습니다.

    <div class="wrap-default">
        <div class="default">
            <div class="default-box">
                <p>"오늘 하루는 어땠나요? 당신의 하루를 들려주세요"</p>
                <a href="일기 작성 페이지로 이동하는 링크">일기쓰기</a>
            </div>
        </div>
    </div>

    object_list가 있으면 현재의 content 블럭 안의 내용을 보여 주도록 작성합니다.

    {% extends './base.html' %}

    {% block content %}
    {% if object_list %} <!-- 데이터가 있다면, 아래의 HTML이 나옵니다.-->
        <div class="wrap-note">
            <div class="note">         
                <div class="note-list">
                    <ul>
                        {% for obj in object_list %}
                        <li>
                            <a href="{% url 'page-detail' obj.id %}">
                                <div class="date">
                                    <span>{{obj.dt_created|date:"d"}}</span>
                                    <p>{{obj.dt_created|date:"M"}}</p>
                                </div>
                                <h2>{{obj.title}}</h2>
                                <div class="score">
                                    <p>감정점수</p>
                                    <span>{{obj.score}}점</span>
                                </div>
                            </a>
                        </li>
                        {% endfor %}
                    </ul>
                </div>
            </div>
        </div>
    {% endif %} <!-- if 템플릿태그는 닫는 endif와 짝을 이룹니다. -->
    {% endblock content %}

        다음으로 object_list에 데이터가 없다면 페이지 아래의 HTML 코드가 나오도록 작성합니다.
        일기 작성 페이지로 이동하는 링크도 작성합니다.

    {% extends './base.html' %}

    {% block content %}
    {% if object_list %}
        <div class="wrap-note">
            <div class="note">         
                <div class="note-list">
                    ...
                </div>
            </div>
        </div>
    {% else %} <!-- else 즉, object_list에 데이터가 없을 때 -->
        <div class="wrap-default">
            <div class="default">
                <div class="default-box">
                    <p>"오늘 하루는 어땠나요? 당신의 하루를 들려주세요"</p>
                    <a href="{% url 'page-create' %}">일기쓰기</a> <!-- 일기 작성 페이지로 가는 링크 -->
                </div>
            </div>
        </div>
    {% endif %}
    {% endblock content %}

    개발 서버를 켜고 모든 데이터가 없을 때 아래와 같이 잘 표시 되는지 확인합니다.

    https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=4157&directory=Untitled%201.png&name=Untitled+1.png

------------------------------------------------------------------------------------------------------------------------------

초기에 필요한 데이터가 있다면?

이번 시간에는 여러가지 테스트 데이터를 추가하는 방법을 배우자 일단 과거에 작성했던 글들을 모두 삭제하자 지금 이 상태에서 포스트 목록 페이지가 잘 나오는지 테스트하려면? 아무글이나 써보고 확인하면 된다
그런데 만약 글 50개를 써도 잘 나오는지 확인하고 싶다면? 지금처럼 하나하나씩 글 써서 확인하기는 힘들것이다 자 이렇게 우리 서비스에서 사용할 데이터를 데이터베이스에 추가하는 것을 시딩 (seeding) 이라고한다
간단히 말하면 데이터베이스에 데이터를 심어주는것이다 지금처럼 테스트에 필요한 데이터를 준비하거나 서비스에 필요한 초기 데이터를 입력해야 되는 경우에 유용한 방법이다 자 장고에서 시딩은 하나의 파일에
데이터를 두고 manage.py에서 loaddata 명령어를 이용해서 실행할 수 있다  ( python manage.py loaddata <seed_file> )이 때 시딩을 위한 데이터가 들어있는 파일이 필요한데 이러한 seed_file 파일은 
JSON, XML 등의 파일 형식을 사용할 수 있다 여기서 우리는 JSON 형식을 사용해보자 자 그러면 먼저 시딩에 사용할 JSON 형식의 데이터파일을 만들어야한다 JSON에 대해 간단히 알아보면 JSON은 데이터를 
표현하기 위해 사용하는 대표적인 포맷중 하나로 파이썬의 사전형과 비슷하게 네임과 밸류로 데이터를 표현한다 예를 들어 우리가 사용했던 글들을 JSON 형식으로 간단히 표현해보면 
{
"title" : "title_data_01",
"content" : "content_data_0a"
}
이렇게 "title" 또는 "content" 라는 네임으로 데이터에 접근할 수 있다 자 이런 포맷이 JSON인데 그런데 이런 데이터를 중첩을 이용해서 다른식을 표현할 수 도 있다
{
    "data_01" : {
                    "title" : "title_data_01"
                    "content" : "content_data_01"
                }
}
"data_01" 이라는 네임에 또 다시 사전형 데이터로 "title"과 "content"를 넣을 수 있다

ex) 
json_object["data_01"]["title"] = "title_data_01"

이런식으로 같은 데이터라고 해도 다양한 형태와 계층으로 JSON을 표현할 수 있다 즉 내용물은 같지만 구조가 다른것이다 자 그러면 생각해보자 작성하는 사람마다 다른 형식으로 JSON을 작성하면 
장고가 어떤 형식으로 작성된 JSON인지 모르기 때문에 데이터를 파악하기 힘들다 그래서 장고가 읽을 수 있는 구조로 JSON을 작성해야한다 구조를 알아보는 가장 좋은 방법은 장고로 부터 데이터 하나를
JSON형식으로 추출해보는 것이다 한번 해보자 일단 글을 다 삭제한 상태에서 글을 하나 써보자 제목은 title_data_01 그리고 내용은 content_data_01 이렇게 쓴다 그리고 터미널로 가서 다음과 같이 입력하라
-> python manage.py dumpdata posts > posts_data.json
이 명령어는 장고의 프로젝트의 데이터를 파일로 추출하는 며령어인 dumpdata를 이용해서 데이터를 JSON 파일로 추출한것이다 실행하면 프로젝트 루트 디렉토리에 posts_data.json JSON 파일이 생긴다
파일을 열어보면 데이터가 들어있기는 한데 조금 불편하게 생겼다 자 그러면 보기 쉽게 여기다 indentation 을 넣어주게 다음과 같이 명령어를 처라
-> python manage.py dumpdata posts --indent=2 > posts_data.json
그러면 이쁘게 들여쓰기가 두칸씩 되서 출력된다 데이터를 좀 살펴보면 큰 리스트 안에 
[
{
  "model": "posts.post",
  "pk": 8,
  "fields": {
    "title": "title_data_01",
    "content": "content_data_01",
    "dt_created": "2022-03-22T17:16:03.795Z",
    "dt_modified": "2022-03-22T17:16:03.796Z"
  }
}
]
이런식으로 데이터가 들어가 있다 이 형식을 지켜서 우리가 데이터베이스에 넣을 데이터를 적어주면 된다 이 큰 리스트 안에 데이터를 두개만 더 넣어주자 일단 큰 리스트 안에 있는 것을 복사해서 두번 복붙하자 
그 다음에 하나씩 수정을 해줄건데 pk 같은 경우에는 게시글이 가지고 있는 고유의 번호니까 1씩 늘려주고 그 다음에 제목 내용에서 번호를 02, 03 으로 바꿔주고 생성일도 임의로 좀 바꿔주자 자 이렇게 파일이 
준비가 되면 이 데이터 파일을 데이터베이스에 넣어주면 된다 한번 해보자 터미널로 가서 
-> python manage.py loaddata posts_data.json
-> Installed 3 object(s) from 1 fixture(s) 출력 

개발 서버 켜고 가봐라 추가한 데이터 잘 나온다

이렇게 데이터를  파일로 관리하면 좋은점은? 가장 큰 장점은 개발자들이 테스트 데이터나 초기 데이터들을 서로 나눠 갖고 똑같은 데이터를 공유한 상태에서 개발과 테스트를 할 수 있다는 것이다 서로 같은 환경을
구성할 수 있다

한 걸음 더

JSON에 대해 조금더 자세히 알고싶은 분들은 아래의 문서를 참고해보세요.
JSON wiki 바로가기
https://ko.wikipedia.org/wiki/JSON
--------------------------------------------------------------------------------------------------------------------------------------------------------

dt_created 컬럼의 경우 , model에서 auto_now_add로 자동으로 값이 들어가게 해줬는데,

실습처럼 값을 꼭 넣어줘야하나요?

laoddata 는 save() 메소드가 실행되는게 아니라고 합니당.

save() 메소드가 실행되어야 auto_now_add 같은 속성들이 동작을 할텐데,

그렇질 못하니 모든 값을 넣어주게 되는거라고 생각해요.

  

https://twpower.github.io/19-about-python-test-fixture

https://docs.djangoproject.com/ko/3.1/ref/django-admin/#what-s-a-fixture

위 내용을 순서대로 참고해보시면 도움이 되실거라 생각합니당
---------------------------------------------------------------------------------------------------------------------------------------

더 많은 seed 가 필요하다면?

데이터 파일을 만들 때 생각해야되는것이 있다 기본적으로 pk 같은 경우는 각 데이터마다 중복되지 않아야하고 필드마다 필드타입에 맞춰서 데이터를 넣어줘야한다 앞서 했던 대로 한두개의 데이터라면 직접 입력할 수 있지만
숫자가 많아지만 직접 입력하기 힘들어진다 이렇게 다양한 데이터 필드를 포함한 대량의 데이터를 유용하게 사용할 수 있는 패키지가 바로 django-seed 이다 django-seed 는 모델에 정의된 각각의 필드를 보고 임의의
데이터를 자동으로 생성해주는 패키지이다 매우 직관적으로 쉽게 사용할수 있는 패키지므로 같이 설치하고 사용해보자 그러면 터미널로 가자! 
costory 프로젝트 루트 디렉토리에서 다음과 같이 설치해준다 -> pip install django-seed

주의사항

강의 환경과 맞추기 위해 django-seed 는 0.2.2 버전을 설치해주세요.

pip install django-seed==0.2.2

다 설치가 되었다면 costory 폴더의 settings에 들어가서 INSTALLED_APPS 에 django_seed를 추가해준다 이러면 설치와 설정이 모두 끝난다 자 그러면 터미널로 가서 프로젝트 루트 디렉토리에다가 다음과 같이 
명령어를 친다 -> python manage.py seed posts --number=50
실행하면 데이터 50개가 생성됬다고 주르륵 나온다 개발 서버 켜고 확인하자 50개 추가된게 보인다
django-seed 를 사용할 때 주의할 점이 있다 모델 필드에 데이터 타입에 맞는 데이터를 생성해주지만 유효성 검증은 거치지 않게 된다 따라서 문자열 같은 일반적인 데이터는 django-seed를 이용해도 되지만 까다로운
유효성을 요구하는 테스트 데이터는 별도로 관리를 해주어야한다
-----------------------------------------------------------------------------------------------------------------------------------------
유효성 검증을 뒤늦게 취가했다면?

뒤늦게 유효성을 추가해야한다면 앞에서 배운대로 하면 된다 문제는 기존의 데이터를 다시 유효성 작업에 맞추는 일이다 이 때 중요한것은 기존 데이터의 유실을 최소화하면서 유효성을 맞추는 것이다
간단한 예시를 가지고 이런 문제점을 해결하도록 하자 방금 json 파일을 로드해서 만든 데이터들을 보면 본문안에 & 기호를 가지고 있는것들이 있다 (직접만들어서했음) 지금 본문의 유효성 검증은 #와@를
포함하면 안된다고 되어있는데 뒤늦게 본문에  추가로 &도 포함되면 안된다는 유효성이 추가되었다고 해보자 그리고 지금 어떤 이 포스트를 보면 이상한것이 수정일이 작성일보다 더 뒤에 있다 수정일은 반드시
작성일보다 나중이 되어야되는데 말이다 이건 우리가 django-seed로 아무 데이터나 생성하면서 발생한 오류이다 이 부분도 같이 해결해보자 그럼 일단 유효성 검증을 하는 부분에 &에 대한 검증을 추가해보자 먼저
validators.py로 간 다음

def validate_symbol(value):
    if "@" in value or "#" in value:
        raise ValidationError('"@"와 "#"는 포함될 수 없습니다.', code="symbol_err")

이것을

def validate_symbol(value):
    if "@" in value or "#" in value or "&" in value:
        raise ValidationError('"@"와 "#"와 "&"는 포함될 수 없습니다.', code="symbol_err")

이렇게 바꿔주고 개발서버 들어가서 들쓰기 해보면 &는 입력할 수 없다고 잘 나온다 하지만 이미 기존의 데이터에는 &가 포함된 상태고 이 새로운 유효성 검증을 수행하지 않았다
기존 데이터도 새로 수정된 유효성에 맞게 수정해보자 posts 앱에다가 validate_data.py 파일을 만들어 주자 자 이제 여기에 기존의 데이터를 새로 추가된 로직에 맞춰주는 로직을 작성해보자
우리가 할 작업들을 먼저 말해보면 첫째, 모든 포스트 데이터 가져오기 둘째, 각각의 포스트 데이터를 보면서 내용에 &가 있는지 체크하기 셋째, 만약 &가 있다면 이 &를 삭제처리하기 그리고 마지막으로 데이터를
저장한다 자 이제 하나씩 해보자
->
from .models import Post

def validate_post():
    posts = Post.objects.all()
    for post in posts:
        if '&' in post.content:
            print(post.id, "에 '&'이 포함되어있습니다")
            post.content = post.content.replace("&", "")
            post.save()

이러면 된다! 자 그러면 시간관련된 문제도 여기다 해결해보자 

from .models import Post

def validate_post():
    posts = Post.objects.all()
    for post in posts:
        if '&' in post.content:
            print(post.id, "번 글에 '&'이 포함되어있습니다")
            post.content = post.content.replace("&", "")
            post.save()
        if post.dt_modified < post.dt_created:
            print(post.id, "번 글에 수정일이 생성일보다 과거입니다.")
            post.save() #수정일을 현재로 바꾸기 위해 
 
이제 이 함수를 실행하면 되는데 지금 코드를 보면 모델이나 ORM등 장고의 기능을 이용해서 코드를 구현했다 그렇기 때문에 이 함수를 직접 실행하려면 장고의 기능을 사용할 수 있는 환경이 갖혀진 곳에서
실행해야한다 가장 간단하게 사용하는 방법은 django shell을 사용하는것이다 한번 해보자 python manage.py shell -> from posts.validate_data import validate_post -> validate_post()
이러면 validate_post 함수고 동작하면서 콘솔에 메세지들이 출력된다 -> 개발 서버 켜고 들어가면 &는 모드 삭제되고 수정일이 작성일 이전인 글들은 수정일이 현재로 바뀐것을 볼 수 있다
----------------------------------------------------------------------------------------------------------------------------------------------------

실습과제
100XP
감정이 뒤죽박죽

우리가 만든 감정 일기가 잘 동작 하는지 테스트 해보고 싶습니다. 'django-seed'를 사용하여 50개의 무작위 데이터를 생성하고 각 데이터 중 유효성 검증에 맞지 않는 데이터를 수정해 주세요.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=4162&directory=Untitled.png&name=Untitled.png

    pip를 이용해서 'django-seed' 0.2.2 버전을 설치해 주세요.

    pip install django-seed==0.2.2

    settings.py의 app 목록에 'django_seed'를 추가해 주세요.

    터미널을 열고 30개의 무작위 데이터를 생성해 주세요.

    개발 서버를 켜고 데이터를 확인해 주세요.

    https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=4162&directory=Untitled%201.png&name=Untitled+1.png

    이 중에서 '감정 점수'를 보면 정수형 이긴 하지만 값의 범위가 매우 넓습니다. 이 부분을 아래를 참고해서 0 부터 10 사이의 무작위 정수로 수정해 주세요.

        diary 앱의 validate_data.py에 page 데이터를 수정하는 'validate_pages' 함수를 작성해 주세요.

        validate_pages 함수는 파라미터가 없는 형태 입니다.

        pages라는 변수에 데이터 베이스에서 모든 Page 데이터를 가져와 주세요.

        모든 pages 데이터를 돌면서 page의 score가 0 미만 이거나 10을 초과 한다면 아래를 참고해서 0부터 10사이의 무작위 정수로 값을 바꾼 후 데이터 베이스에 저장하는 로직을 작성해 주세요.

        import random
        value = random.randint(a,b)

        randint 함수는 매개변수로 넘어온 a와 b사이의 무작위 정수를 반환합니다.
        이때 반환하는 범위는 a와 b를 모두 포함한 폐구간(closed interval)입니다. (a<=X<=b)

    터미널을 열고 django shell을 실행 한 뒤 아래를 참고해서 방금 작성한 validate_pages 함수를 실행해 주세요.

     ```python
     from diary.validate_data import validate_pages
     ```

    개발 서버를 켜고 정상 적으로 감정 점수가 수정 되었는지 확인해 주세요.
    변경 전

    https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=4162&directory=Untitled%202.png&name=Untitled+2.png
    변경 후

    https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=4162&directory=Untitled%203.png&name=Untitled+3.png

과제 해설close solution tab

    django-seed를 사용하기 위해서는 settings.py의 INSTALLED_APPS 항목에 'django_seed'를 추가해 주어야합니다.

    # settings.py
    ...
    # Application definition

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'diary',
        'django_seed', # 추가합니다.
    ]
    ...

    터미널을 열고 django-seed를 이용해서 무작위의 30개 Page 데이터를 생성합니다. manage.py 다음 seed를 적고 데이터를 생성할 앱 이름과 생성할 숫자를 적어 주면 됩니다.

    python manage.py seed diary --number=30

    개발 서버를 켜고 일기 목록 보기 페이지로 가면 생성된 데이터를 확인할 수 있습니다. 그런데 보면 감정 점수가 정수형 이긴 하지만 범위가 너무 넓습니다. 이를 해결 하기 위한 validate_pages 함수를 구현해 볼게요.

    diary 앱의 validate_data.py에 validate_pages 함수를 정의합니다.
        데이터를 조회하기 위해 먼저 Page 모델을 import 합니다.
        모든 데이터를 가져와서 pages라는 변수에 넣습니다.

    from .models import Page

    def validate_pages():
        pages = Page.objects.all()

        pages를 하나씩 반복하면서 안쪽의 score가 0미만 이거나 10을 초과하는지 확인합니다.
        만약 0미만 이거나 10을 초과한다면 random 모듈을 이용해 0에서 10사이의 무작위 정수를 생성한 뒤 수정하고 저장합니다.

    from .models import Page
    import random # random 모듈 import

    def validate_pages():
        pages = Page.objects.all()
        for page in pages:
            if page.score < 0 or page.score > 10: # 만약 범위를 벗어난다면
                page.score = random.randint(0, 10) # 0~10 사이의 무작위 정수로 수정하고
                page.save() # 저장합니다.

    이제 작성한 validate_pages 함수를 한 번만 실행하면 모든 데이터의 score가 알맞게 변경됩니다.
        django shell을 실행하고 validate_pages 함수를 import 합니다.
        가져온 함수를 실행해서 데이터를 변경합니다.

    python manage.py shell

    from diary.validate_data import validate_pages

    validate_pages()

    개발 서버를 켜고 일기 목록 페이지로 가서 정상적으로 감정 점수 값이 수정 되었는지 확인합니다.

------------------------------------------------------------------------------------------------------------------------------------------------

한 페이지에 글이 너무 많다면? 계속 글이 쭉 내려가면 페이지가 너무 길어지고 UI 측면에서 별로다 -> Pagination 
장고에서는 Pagination 을 간편하게 구현할 수 있다 이번 시간에는 장고의 Pagination 기능을 shell에서 실습해볼것이다 
python manage.py shell -> from django.core.paginator import Paiginator
이제 페이지를 나눌 데이터가 있어야한다 -> from posts.models import Post -> posts = post.objects.all() -> 그리고 posts.count() 해서 포스트가 몇개인지 확인해보자 
자 이제 이 posts 를 가지고 페이지네이터를 생성해보자 자 페이지를 만들건데 Paginator 를 이용해서 posts 에 있는것들을 여섯개씩 잘라서 페이지를만들어보자 
-> pages = Paginator(posts, 6)
그 다음에 pages.page_range 해보면 range(1,10) 이렇게 뜨는데 페이지 9개가 생성됬다는 뜻이다 그리고 페이지도 하나씩 가져올 수 있는데 
page = pages.page(1)  그리고 page.object_list 이렇게하면 페이지 글들이 보인다 몇가지 함수를 더 배워보자
만약 지금 페이지 다음에 또 다른 페이지가 있는지 알고싶다면 -> page.has_next() 그리고 이전 페이지가 있는지 알고싶다면 -> page.has_previous()
그리고 지금 페이지의 다음 페이지 번호가 무엇인지 알고싶다면 -> page.next_page_number()   그럼 전 페이지 번호가 뭔지 알고싶다면 page.previous_page_number() 하면될까?
이런 함수들이 있는 이유는 만약 다음 페이지 번호를 알고 싶을 때 바로 .next_page_number 를 하면 만약 없는 경우 에러가 난다 그래서 .has_next 를 먼저 체크하고 하는것이다
자 다음에는 정말로 페이지네이션을 구현해보자
--------------------------------------------------------------------------------------------------------------------------------------------------

페이지네이션을 할 때 내가 지금 몇번 째 페이지에 있느냐에 따라 처음으로 마지막으로 이전 다음과 같은 버튼들이 달라진다 즉 클라이언트가 서버에게 포스트 목록 페이지를 조회할 때 나 지금 몇번 페이지에 있어라는
정보를 함께 제공해야된다는 것이다 자 앞에서 데이터 변경 없이 조회만 할 때는 GET 방식을 이용한다는 것을 배웠다 그리고 이 때 조회에 필요한 데이터를 전달 할 때는 URL애 데이터를 담아서 전달하는 방식인
쿼리스트링을 이용해서 페이지네이션을 구현할 현재 페이지 번호를 전달할 것이다 이런식으로 페이지 번호를 넘겨주고 서버는 페이지 번호를 받아 페이지에 맞는 데이터 화면을 응답으로 돌려주는것이다 

뷰로 가서 post_list 뷰를 수정해보자 일단 Paginator 을 import 하자 -> from django.core.paginator import Paginator
그리고 다음의 뷰를
def post_list(request):
    posts = Post.objects.all()
    context = dict()
    context['posts'] = posts
    return render(request, 'posts/post_list.html', context)

이렇게 고쳐주자 
def post_list(request):
    posts = Post.objects.all()
    paginator = Paginator(posts, 6)
    curr_page_number = request.GET.get('page') #쿼리 스트링은 name 과 value 로 이루어져있다 쿼리 스트링에서 page 값을 가져오는것이다 
    if curr_page_number is None:
        curr_page_number = 1
    page = paginator.page(curr_page_number)
    return render(request, 'posts/post_list.html', {'page' : page})

다 했으면 이제 post_list.html 템플릿으로 가자 

{% extends './base.html' %}
{% load static %}

{% block css %}
    <link rel="stylesheet" href="{% static 'posts/css/post_list.css' %}">
{% endblock css %}

{% block logo_text %}
    <div id="header">
        <div class="container">
            <h1><img src="{% static 'posts/images/headertxt.png' %}"></h1>
        </div>
    </div>
{% endblock logo_text %}


{% block content %}
    <div class='btn_post'>
        <a href="{% url 'post-create' %}">글쓰기</a>
    </div>
    {% if posts %}
        <div class="post_container">
            {% for post in posts %}
                <div class="post"><a href="{% url 'post-detail' post.id %}">         
                    <h2 class="title">{{post.title}}</h2>
                    <p class="date">{{post.dt_created}}</p>
                    <p class="text">{{post.content|slice:"0:100"}}</p>
                </a></div>
            {% endfor %}
        </div>
    {% else %}
        <div class='blank'>
            <p>글이 없넹<br>하나 작성해보는건 어때?</p>
        </div>
    {% endif %}
{% endblock content %}

이 코드를 다음과 같이 고치자 
{% extends './base.html' %}
{% load static %}

{% block css %}
    <link rel="stylesheet" href="{% static 'posts/css/post_list.css' %}">
{% endblock css %}

{% block logo_text %}
    <div id="header">
        <div class="container">
            <h1><img src="{% static 'posts/images/headertxt.png' %}"></h1>
        </div>
    </div>
{% endblock logo_text %}


{% block content %}
    <div class='btn_post'>
        <a href="{% url 'post-create' %}">글쓰기</a>
    </div>
    {% if page.object_list %} 
        <div class="post_container">
            {% for post in page.object_list %}
                <div class="post"><a href="{% url 'post-detail' post.id %}">         
                    <h2 class="title">{{post.title}}</h2>
                    <p class="date">{{post.dt_created}}</p>
                    <p class="text">{{post.content|slice:"0:100"}}</p>
                </a></div>
            {% endfor %}
        </div>
        <div class="paginator">
        {% if page.has_previous %}
            <a href="?page=1" class="first">first</a>
            <a href="?page={{page.previous_page_number}}" class="prev">prev</a>
        {% endif %}

        <span>
            <p>{{page.number}} of {{page.paginator.num_pages}} </p>
        </span>

        {% if page.has_next %}
            <a href="?page={{page.next_page_number}}" class="next">next</a>
            <a href="?page={{page.paginator.num_pages}}" class="last">last</a>
        {% endif %}
        </div>
    {% else %}
        <div class='blank'>
            <p>글이 없넹<br>하나 작성해보는건 어때?</p>
        </div>
    {% endif %}
{% endblock content %}

posts 를 page.object_list 로 바꿨다 object_list은 해당 페이지의 모든 포스트를 쿼리셋 형태로 접근할 수 있게 해준다 url 형태는 쿼리셋은 네임과 밸류의 쌍으로 되어있는데 ? 옆에 나열된다 
나머지는 쉽다 그냥 쭉 읽어보자
-----------------------------------------------------------------------------------------------------------------------------------------------------

