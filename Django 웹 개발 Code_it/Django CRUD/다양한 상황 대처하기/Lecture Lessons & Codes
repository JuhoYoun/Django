아직 저장된 데이터가 없다면?

만약 우리 포스트 리스트에서 현재 저장되 있는 데이터가 하나도 없다면 어떻게 해야될까? 우선 있는 데이터들을 다 지워보자 데이터를 지우는데는 두가지 방법이 있는데 첫번째는 관리자 페이지로 가서 모든 글을 
삭제하는 방법이다 관리자 페이지로 가서 Posts 로 가서 모든 글들을 선택하고 delete 을 누르면 된다 그리고 또 다른 방법은 장고 ORM을 이용해서 한방에 지우는 방법이다
터미널로 가서 python manage.py shell 을 처서 장고 쉘로 가자 그리고 from posts.models import Post 해서 모델을 임포트한다 그리고 Post.objects.all() 하면 현재 게시글이 모두 나온다
게시글을 모두 지우려면 ?  Post.objects.all().delete() 이 명령어를 치면 모든 글이 지워진다 Post.objects.all() 치면 빈 쿼리스트링이 나온다 exit() 해주고 개발서버를 통해 포스트 리스트 페이지로 가보자
메인 페이지를 가면 아무 글도 표시되지 않은것을 볼 수 있다 이 페이지가 에러가 난것은 아닌데 유저가 보았을 때 이상하다고 느낄 수 있다 이럴 땐 첫 글을 작성해보세요 같은 문구가 나오는데 유저경험 측면에서 좋다
post_list 템플릿으로 가자 자 여기다 if else 문을 넣어 게시글이 있을 때와 없을 때의 동작을 나눠서 구현할것이다

{% extends './base.html' %}
{% load static %}

{% block css %}
    <link rel="stylesheet" href="{% static 'posts/css/post_list.css' %}">
{% endblock css %}

{% block logo_text %}
    <div id="header">
        <div class="container">
            <h1><img src="{% static 'posts/images/headertxt.png' %}"></h1>
        </div>
    </div>
{% endblock logo_text %}


{% block content %}
    <div class='btn_post'>
        <a href="{% url 'post-create' %}">글쓰기</a>
    </div>
    <div class="post_container">
        {% if posts%}
            {% for post in posts %}
                <div class="post"><a href="{% url 'post-detail' post.id %}">         
                    <h2 class="title">{{post.title}}</h2>
                    <p class="date">{{post.dt_created}}</p>
                    <p class="text">{{post.content|slice:"0:100"}}</p>
                </a></div>
            {% endfor %}
        {% else %}
            <div class='blank'><p>글이 없넹<br>하나 작성해보는건 어때?</p></div>
        {% endif %}
    </div>
{% endblock content %}

짜잔 이렇게 하면 된다~~
----------------------------------------------------------------------------------------------------------------------------------
가져올 데이터가 존재하지 않는다면?

우리 뷰를 보면 많은 뷰 함수에서 post = Post.objects.get(id=post_id) 이런식으로 id를 이용해서 포스트를 가져온다 그런데 만약 데이터베이스에서 없는 아이디를 이용해서 조회하려고 하면 어떻게 될까?
한번 없는 id를 이용해서 url을 처보자 -> 에러페이지가 나온다 웹서비스를 할 때는 이런식으로 의도치 않은 접근 등으로 인한 다양한 에러 상황을 처리해줘야한다 지금과 같은 상황에서는 사용자에게 404에러 즉
이러한 접근에 대해서는 제공할 페이지가 없다 뭐 잘못된 접근이라는 에러 메세지를 보여주는것이 좋습니다 한번 해보자 다시 뷰로 가서 post_detail 뷰에 에러를 처리해주는 코드를 작성하자

이전 뷰
def post_detail(request, post_id):
    post = Post.objects.get(id=post_id)
    context = {'post' : post}
    return render(request, 'posts/post_detail.html', context)

새로운 뷰
def post_detail(request, post_id):
    try:
        post = Post.objects.get(id=post_id)
    except Post.DoesNotExist:
        raise Http404()

    context = {'post' : post}
    return render(request, 'posts/post_detail.html', context)

try 문은 에러가 날만한 구문을 적고 try 즉 시도하라는 뜻이다 그리고 만약 이떄 우리가 원하는 데이터를 가지고 오지 못한다면 그러니까 우리가 요청한 post_id에 해당하는 데이터가 데이터베이스에 없으면 
Post.DoesNotExist라는 오류가 나게되는데 그럴 때는 except Post.DoesNotExist: 해주시고 raise Http404() 해서 404 에러를 띄워주면 된다 이 Http404 에러를 띄우려면 에러도 따로 임포트 해줘야한다
-> from django.http import Http404

그리고 이 Http404는 에러가 발생했을 떄 장고가 내부적으로 가지고 있는 404 에러에 대한 뷰를 호출해서 기본 에러 페이지를 렌더한다음 유저에게 보여주게 된다
개발 서버 열고 테스트해봐라

그런데 뷰 안에 이렇게 데이터베이스로부터 어떤 특정한 조건의 데이터를 가져오는 일은 매우 흔한일이다 그래서 장고는 이렇게 데이터를 조회했는데 해당 데이터가 없는 경우에 404 에러 까지 발생시키는 일련의
과정을 하나의 함수로 제공한다 이부분을 함께 해보자 일단 다음과 같이 임포트해주자 -> from django.shortcuts import get_object_or_404 그리고 아래와 같이 뷰를 작성해주자
->
def post_detail(request, post_id):

    post = get_object_or_404(Post, id=post_id)

    context = {'post' : post}
    return render(request, 'posts/post_detail.html', context)
    
자 개발서버 켜고 확인해보자 404 에러 메세지가 잘 출력된다 자 만약에 이런식으로 에러에대한 처리를 해주지 않으면 404 에러말고 500 에러 즉 서버 에러를 발생시키는데 서버 에러란 한마디로 말하면 
서버 어딘가에서 로직을 수행하다고 발생한 에러라는 뜻이다 굉장히 범위가 넓지? 그래서 500 에러는 어디서 발생한 에러인지 알 수 없지만 404 에러는 요청에 대한 표시를 할 때 페이지가 없다는 말로
서버에 문제가 있는 것이 아니고 내가 요청한 페이지가 없는 페이지구나 라는 인식을 할 수 있게 된다 자 앞으로 뷰에서 get으로 데이터를 조회할 때는 get_object_or_404 를 사용하자 자 그리고 update 와 delete
뷰도 바꿔주자 

더 알아보기

파이썬 try-except 구문에 대해 더 알고싶다면 아래의 공식문서를 참고해보세요.
try-except 공식문서 바로가기
https://docs.python.org/ko/3/tutorial/errors.html#handling-exceptions
-----------------------------------------------------------------------------------------------------------------------------------------------

실습과제
100XP
새로 산 일기장

데이터가 없을 때 다음과 같이 안내 페이지가 나오도록 작성해 봅시다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=4157&directory=Untitled.png&name=Untitled.png

    page_list 템플릿 아래쪽에 글이 없을 때 보여줄 HTML이 있습니다.

    뷰에서 넘겨준 object_list에 데이터가 있다면 현재 content 블럭 안에 있는 내용이 나오도록 하고, 만약 object_list에 데이터가 없다면 페이지 아래 있는 HTML이 나오도록 작성해 주세요.

    {% if <조건> %}
    {% else %}
    {% endif %} 를 사용해서 작성하세요.

    일기 쓰기 페이지로 이동하는 url을 url 템플릿 태그를 이용해서 작성해 주세요.

    개발 서버를 켜고 데이터를 모두 지운 후 아래와 같이 잘 표시 되는지 확인해 주세요.

    https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=4157&directory=Untitled%201.png&name=Untitled+1.png

과제 해설close solution tab

    page_list 템플릿을 보면 아래에 object_list에 데이터가 없을 때 보여줄 HTML이 있습니다.

    <div class="wrap-default">
        <div class="default">
            <div class="default-box">
                <p>"오늘 하루는 어땠나요? 당신의 하루를 들려주세요"</p>
                <a href="일기 작성 페이지로 이동하는 링크">일기쓰기</a>
            </div>
        </div>
    </div>

    object_list가 있으면 현재의 content 블럭 안의 내용을 보여 주도록 작성합니다.

    {% extends './base.html' %}

    {% block content %}
    {% if object_list %} <!-- 데이터가 있다면, 아래의 HTML이 나옵니다.-->
        <div class="wrap-note">
            <div class="note">         
                <div class="note-list">
                    <ul>
                        {% for obj in object_list %}
                        <li>
                            <a href="{% url 'page-detail' obj.id %}">
                                <div class="date">
                                    <span>{{obj.dt_created|date:"d"}}</span>
                                    <p>{{obj.dt_created|date:"M"}}</p>
                                </div>
                                <h2>{{obj.title}}</h2>
                                <div class="score">
                                    <p>감정점수</p>
                                    <span>{{obj.score}}점</span>
                                </div>
                            </a>
                        </li>
                        {% endfor %}
                    </ul>
                </div>
            </div>
        </div>
    {% endif %} <!-- if 템플릿태그는 닫는 endif와 짝을 이룹니다. -->
    {% endblock content %}

        다음으로 object_list에 데이터가 없다면 페이지 아래의 HTML 코드가 나오도록 작성합니다.
        일기 작성 페이지로 이동하는 링크도 작성합니다.

    {% extends './base.html' %}

    {% block content %}
    {% if object_list %}
        <div class="wrap-note">
            <div class="note">         
                <div class="note-list">
                    ...
                </div>
            </div>
        </div>
    {% else %} <!-- else 즉, object_list에 데이터가 없을 때 -->
        <div class="wrap-default">
            <div class="default">
                <div class="default-box">
                    <p>"오늘 하루는 어땠나요? 당신의 하루를 들려주세요"</p>
                    <a href="{% url 'page-create' %}">일기쓰기</a> <!-- 일기 작성 페이지로 가는 링크 -->
                </div>
            </div>
        </div>
    {% endif %}
    {% endblock content %}

    개발 서버를 켜고 모든 데이터가 없을 때 아래와 같이 잘 표시 되는지 확인합니다.

    https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=4157&directory=Untitled%201.png&name=Untitled+1.png

------------------------------------------------------------------------------------------------------------------------------

초기에 필요한 데이터가 있다면?

이번 시간에는 여러가지 테스트 데이터를 추가하는 방법을 배우자 일단 과거에 작성했던 글들을 모두 삭제하자 지금 이 상태에서 포스트 목록 페이지가 잘 나오는지 테스트하려면? 아무글이나 써보고 확인하면 된다
그런데 만약 글 50개를 써도 잘 나오는지 확인하고 싶다면? 지금처럼 하나하나씩 글 써서 확인하기는 힘들것이다 자 이렇게 우리 서비스에서 사용할 데이터를 데이터베이스에 추가하는 것을 시딩 (seeding) 이라고한다
간단히 말하면 데이터베이스에 데이터를 심어주는것이다 지금처럼 테스트에 필요한 데이터를 준비하거나 서비스에 필요한 초기 데이터를 입력해야 되는 경우에 유용한 방법이다 자 장고에서 시딩은 하나의 파일에
데이터를 두고 manage.py에서 loaddata 명령어를 이용해서 실행할 수 있다  ( python manage.py loaddata <seed_file> )이 때 시딩을 위한 데이터가 들어있는 파일이 필요한데 이러한 seed_file 파일은 
JSON, XML 등의 파일 형식을 사용할 수 있다 여기서 우리는 JSON 형식을 사용해보자 자 그러면 먼저 시딩에 사용할 JSON 형식의 데이터파일을 만들어야한다 JSON에 대해 간단히 알아보면 JSON은 데이터를 
표현하기 위해 사용하는 대표적인 포맷중 하나로 파이썬의 사전형과 비슷하게 네임과 밸류로 데이터를 표현한다 예를 들어 우리가 사용했던 글들을 JSON 형식으로 간단히 표현해보면 
{
"title" : "title_data_01",
"content" : "content_data_0a"
}
이렇게 "title" 또는 "content" 라는 네임으로 데이터에 접근할 수 있다 자 이런 포맷이 JSON인데 그런데 이런 데이터를 중첩을 이용해서 다른식을 표현할 수 도 있다
{
    "data_01" : {
                    "title" : "title_data_01"
                    "content" : "content_data_01"
                }
}
"data_01" 이라는 네임에 또 다시 사전형 데이터로 "title"과 "content"를 넣을 수 있다

ex) 
json_object["data_01"]["title"] = "title_data_01"

이런식으로 같은 데이터라고 해도 다양한 형태와 계층으로 JSON을 표현할 수 있다 즉 내용물은 같지만 구조가 다른것이다 자 그러면 생각해보자 작성하는 사람마다 다른 형식으로 JSON을 작성하면 
장고가 어떤 형식으로 작성된 JSON인지 모르기 때문에 데이터를 파악하기 힘들다 그래서 장고가 읽을 수 있는 구조로 JSON을 작성해야한다 구조를 알아보는 가장 좋은 방법은 장고로 부터 데이터 하나를
JSON형식으로 추출해보는 것이다 한번 해보자 일단 글을 다 삭제한 상태에서 글을 하나 써보자 제목은 title_data_01 그리고 내용은 content_data_01 이렇게 쓴다 그리고 터미널로 가서 다음과 같이 입력하라
-> python manage.py dumpdata posts > posts_data.json
이 명령어는 장고의 프로젝트의 데이터를 파일로 추출하는 며령어인 dumpdata를 이용해서 데이터를 JSON 파일로 추출한것이다 실행하면 프로젝트 루트 디렉토리에 posts_data.json JSON 파일이 생긴다
파일을 열어보면 데이터가 들어있기는 한데 조금 불편하게 생겼다 자 그러면 보기 쉽게 여기다 indentation 을 넣어주게 다음과 같이 명령어를 처라
-> python manage.py dumpdata posts --indent=2 > posts_data.json
그러면 이쁘게 들여쓰기가 두칸씩 되서 출력된다
