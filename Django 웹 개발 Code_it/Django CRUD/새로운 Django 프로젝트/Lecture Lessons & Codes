CRUD 
데이터를 다룰 때 만드시 필요한 네가지 기능 앞에서는 CRUD를 모델과 관련된 기능 정도로만 소개했지만 CRUD는 데이터베이스를 넘어 웹사이트에서 가장 핵심적인 기능이다
유투브 페이스북등 거의 모든 웹사이트는 이 CRUD 기능이 핵심이다 우리는 글 작성 부터 조회 수정 삭제까지 가능한 블로그를 한번 만들어보자

django-admin startproject costory   -> 새 프로젝트를 만들자
cd costory
code .

초기 설정을 해보자 

settings.py 가서 Time Zone을 보자 TIME_ZONE 은 장고 프로젝트가 동작할 때 기준으로 삼을 시간대를 설정해준다 장고가 기본적으로 설정하는 시간대는 UTC이다
시간 설정을 한국으로 하려면 'Asia/Seoul' 이라고 하면 된다

Time Zone : https://docs.djangoproject.com/en/3.2/topics/i18n/timezones/

그리고 블로그 웹사이트에서 포스트 기능을 다룰 posts라는 앱을 생성한다 VSCode 창 띄워놓고 맨 위에 보면 Terminal 탭이 있다 그 아래 보면 New Terminal이 있는데 이거 누르면
VSCode 창에서 터미널 띄울수 있다!

python3 manage.py startapp posts 

그리고 settings.py의 INSTALLED_APPS애 등록해주자

자 그리고 장고 기본 데이터구조를 데이터베이스에 반영하자 INSTALLED_APPS 에 보면 우리가 생성한 앱 말고도 다양한 기본 앱이 있다 migrate를 하면 이 앱들이 필요한 데이터구조가 생성된다
-> python3 manage.py migrate
->
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, foods, menus, sessions
Running migrations:
  No migrations to apply.

자 이제 개발 서버 켜고 잘 되는지 들어가보자
----------------------------------------------------------------------------------------------------------------------------
URL 구조 만들기

Costory 웹사이트의 URL 구조를 생각해보고 전체 웹 사이트의 틀을 잡아보자 웹 사이트의 기능은 URL을 잘 정의 하는 것에서 시작한다

'' (root) -> 블로그의 홈페이지
/posts ->  전체 포스트 조회 (read)
/posts/<post_id> -> 개별 포스트 조회 (read)
/posts/new -> 새 포스트 작성 (create)
/posts/<post_id>/edit -> 포스트 수정 (update)
/posts/<post_id>/delete -> 포스트 삭제 (delete)

그러면 실재로 URL을 작성해보자

앞으로 사용할 URL 구조 -> 이건 강의 밑에 노트로 적혀있던건데 강의에서 URL구조랑 조금 다른데? 흠 
url	설명
/posts/	블로그의 홈페이지
/posts/<post_id>/	개별 포스트 조회
/posts/new/	포스트 작성
/posts/<post_id>/edit/	포스트 수정
/posts/<post_id>/delete/	포스트 삭제

아무것도 없는 domain/ 으로 들어오면 바로 posts 앱의 url로 연결시키자 프로젝트 앱의 urls.py 를 열고 추가한다 일단 include를 inport 해 주고 
path('', include('posts.urls')), 이렇게 경로를 추가해주면 이제 장고가 localhost:8000 과 localhost:8000 뒤에 붙는 추가적인 url 모두 posts 앱의 urls.py를 보고 처리하게 된다
