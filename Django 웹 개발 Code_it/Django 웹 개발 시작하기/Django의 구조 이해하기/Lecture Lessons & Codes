Django 강의 설명서
| Django 웹 개발 시작하기는

코드잇 Django 강의를 수강하는 여러분 반갑습니다! 본 강의에 들어가기에 앞서서 어떻게 하면 강의를 효율적으로 학습할 수 있는지 이번 토픽의 학습 목표는 무엇인지, 그리고 Django를 처음 배울 때 어려운 점은 무엇인지 미리 알아봅시다. 앞으로 여러분의 소중한 시간을 더욱더 값지게 사용하기 위해서요.
| 두 개의 프로젝트

이번 토픽에서는 두 개의 프로젝트를 하게 되는데 하나는 강의에서 함께 하는 프로젝트고 다른 하나는 강의를 바탕으로 여러분이 혼자 만드는 프로젝트입니다. 그리고 이 모든 과정은 앞의 레슨에서부터 이어지는 하나의 큰 과정입니다.

꼭! 이 두 가지 프로젝트를 직접 코딩해보세요.

Django는 파이썬 같은 언어가 아니라 웹 개발을 위해 만들어진 도구입니다. 이 훌륭한 도구는 사용하는 방법과 순서가 어느 정도 정해져 있어서 처음 배울 때는 사용법을 익히고 흐름을 이해하는 것이 중요합니다. 그리고 그것을 익히는 가장 좋은 방법은 눈으로만 보는 것이 아니라 직접 입력해 보는 것입니다.
| 처음부터 디테일을 추구하지 마세요

이번 토픽은 Django의 구조를 이해하고 각각의 구조가 어떻게 연결되어 있는지를 이해하는 것이 핵심입니다. 강의마다 Django의 새로운 명령어와 문법들이 나올 텐데 디테일에 집중하기보다 전체적인 흐름을 잡는 것에 집중해주세요. 자세한 문법들은 흐름을 이해한 다음에 다시 찾아봐도 늦지 않습니다.

천천히 그리고 가볍게 강의를 수강하세요.
| 조금 어렵게 느껴지는 것이 당연합니다

본 강의는 언어를 배우는 것이 아닌 언어를 활용한 하나의 프레임워크를 배우는 과정입니다. Django는 웹 서비스를 만들기 위한 프레임워크로 파이썬, 데이터베이스, 웹 프로그래밍 등 여러 가지 기술에 대한 지식과 테크닉이 들어가 있고 이러한 기술들을 조금 더 깔끔한 구조의 코드로 작성할 수 있도록 많은 개발자가 고민해서 만들어진 틀이 있기 때문에 처음 접할 때 어렵게 느껴지는 것이 당연합니다. 하지만 거꾸로 말하면 Django 내부의 이 틀만 잘 이해하면 Django를 잘 사용할 수 있게 된다는 뜻이기도 합니다.

너무 걱정하지는 마세요. 가벼운 개념부터 차근차근 알려드릴게요 :)
자, 준비가 되었다면 바로 다음 강의로 넘어가 봅시다.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Start a Django Project

django-admin startproject costaurant(project name) -> costaurant project directory created

ls -> can see costaurant project directory in the code_it_django

이제 django 개살 서버를 실행할 수 있다 -> 명령어 하나만 썼지만 개발에 필요한 기본적인 뼈대는 django가 모두 생성해주었다!

cd costautant -> 디렉토리로 들어가서~ 

code . -> vscode로 이 디렉토리를 열자 -> costaurant 아래에 costaurant 디렉토리와 여러가지 파일들이 있는것이 보인다

-> manage.py -> 이것을 이용해서 개발서버를 실행할 수 있다

-> python manage.py runserver (그런데 나는 pip3로 django를 설치했으니 python3 manage.py runserver 를 써야한다)

-> 나오는 주소 복사 후 웹브라우저에 붙여놓기 -> django로 만든 웹사이트에 접근한다!

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

코드잇 실행기에서 Django 실습하기
코드잇 실행기

코드잇 실행기에서 제공하는 웹 터미널 환경은 앞에서 배운 pyenv를 이용한 django 개발 환경(django-envs)인 환경이 적용된 상태로 추가적인 개발 환경 설정 없이 기본으로 설정되어있는 경로인 django 디렉토리에서 실습을 진행하면 됩니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3561&directory=Untitled.png&name=Untitled.png

각 레슨의 실행기는 독립적이며 사용자 한 명이 동시에 하나의 실행기만 실행할 수 있습니다. 그러니까 여러 개의 창을 띄워도 실행기는 하나의 창에서만 사용 가능한거죠. 그리고 웹 터미널의 경우에 오랜 시간 사용하지 않으면 Timeout이 발생하는데, 이때 새로 고침을 하면 다시 사용 할 수 있습니다.
파일 관리

django 디렉토리 내부에서 작업한 모든 파일과 디렉토리는 왼쪽 상단의 폴더 아이콘을 누르면 트리 구조로 볼 수 있습니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3561&directory=tree.png&name=tree.png
Django 개발서버 실행하기

코드잇 실행기에서 장고 실습을 진행할 경우 내 컴퓨터에서 실습하는 것과는 다르게 설정해야 하는 것이 두 가지 있습니다. 여기서 다루는 파일과 내용은 뒤에 있는 레슨에서 자세하게 다룰 거니까 지금은 실행을 위한 설정에 집중해 주세요.
1. Allowed Hosts 설정하기

Django 프로젝트를 생성하고 프로젝트 앱 내부를 보면 프로젝트의 설정을 할 수 있는 settings.py 파일이 있습니다.
settings.py 파일을 클릭해서 열고 28번째 줄 근처를 보면 ALLOWED_HOSTS 라는 리스트가 있는데 이 리스트에 '*' 이라는 문자열을 아래와 같이 추가합니다. 이렇게 하게되면 모든 경우의 호스트에 대해 허용해준다는 뜻인데 지금은 코드잇에서 제공하는 실행 환경을 사용하기위해 Django에 설정해 주는 과정이라고 생각하면 됩니다.

ALLOWED_HOSTS = ['*']

2. Run Server에 전달 인자 넣어주기

다음은 Django의 개발 서버를 실행할 때 추가로 입력해 주어야 하는 부분입니다. Django는 개발 진행 상황을 보면서 개발할 수 있도록 자체적으로 개발 서버를 제공하는데 일반적으로 아래의 명령어를 이용해서 개발 서버를 실행할 수 있습니다.

python manage.py runserver

이렇게 runserver 뒤에 아무런 전달 인자를 넣어 주지 않으면 내 컴퓨터 자체를 개발 서버로 사용하게 되는데 우리는 코드잇 실행기에서 개발 서버를 실행해야 하므로 코드잇 실행기에서 개발 서버를 실행할 때는 아래와 같이 runserver 뒤에 0.0.0.0:8000 을 인자로 전달해 주어야 합니다.

python manage.py runserver 0.0.0.0:8000

이렇게 입력한 뒤 아래처럼  http://0.0.0.0:8000에서 개발 서버가 실행되면

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3561&directory=Untitled%201.png&name=Untitled+1.png

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3561&directory=Untitled%202.png&name=Untitled+2.png

화면 왼쪽에 있는 '웹 페이지 열기' 버튼을 눌러서 접속할 수 있습니다.

중요한 부분이니까 다시 한번 정리할게요.
코드잇 실행기에서 장고 실습을 하면 내 컴퓨터에서 실습할 때와 다르게 설정해야 하는 부분이 두 가지 있는데
첫째, settings.py 의 Allowed hosts 항목에 '*' 을 추가해 주어야 하고
두 번째, django의 개발 서버를 실행할 때 python manage.py runserver 뒤에 0.0.0.0:8000을 인자로 전달해 주어야 합니다.

코드잇 실행기에서 Django 실습을 할 때는 이 두 가지를 꼭! 기억해 주세요.
Django 개발서버 종료하기

실습을 하다보면 개발서버를 껐다가 다시 켜야 할 수도 있을텐데요. 실행중인 Django 개발서버를 종료하기 위해서는 터미널에 Control + c 를 입력하면 됩니다.
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Run Server의 비밀

runserver

django-admin runserver
python manage.py runserver

우리가 Django 코드를 작성하고 나면 결과를 확인하기 위해서 위와 같은 runserver를 이용해서 서버(server)를 실행해야 했죠? 그렇게 서버를 실행하고 나면 웹 브라우저를 통해서 우리가 만든 Django 프로젝트에 접속할 수 있었는데요, 이 과정에서 웹 브라우저로 접속했을 때 우리가 만든 django 프로젝트를 보여주는 역할을 하는 것을 '서버'라고 합니다. 그러니까 코드잇 실행기에서 작업을 하고 있다면 코드잇 실행기가 서버 역할을 하게 되는 거고, 로컬에서 작업을 하고 있다면 여러분의 컴퓨터가 서버가 되는 거죠. 조금 더 자세한 서버 이야기는 뒤에서 다시 자세하게 배워보도록 하고 지금 여기서는 아, 서버가 Django 프로젝트를 실행하고 보여주는 역할을 하는구나 정도만 생각해 주세요.

자, 그러면 기존에 Django 프로젝트를 서버가 실행하고 있는데 Django 코드를 변경하면 어떻게 될까요? 변경사항이 반영된 Django 프로젝트를 보기 위해서는 실행 중이던 Django 프로젝트를 종료하고 다시 재시작 하면 되겠죠. 그런데 Django는 이러한 과정을 편하게 하기 위해서
변경된 작업 결과를 확인할 수 있는 개발 서버를 자체적으로 제공합니다. 그래서 별다른 추가 작업 없이 최신의 변경사항이 반영된 Django 프로젝트를 확인할 수 있습니다. 우리는 그냥 코드를 수정하고 새로 고침만 하면 편하게 변경 사항을 보면서 개발할 수 있는 거죠. 다만 파일이 새로 추가되는 등의 작업은 서버를 다시 시작해야 반영됩니다.
왜 '개발 서버'일까?

그런데 이렇게 runserver로 실행한 서버를 '개발 서버'(Development Server)라고 말하는데요. 그 이유는 보안과 관련된 사항이나 성능을 보장하지 않는 말 그대로 확인용 서버이기 때문입니다. 그래서 실제 배포 시에는 개발 서버를 사용하는 것이 아닌 따로 웹 서버를 사용해서 배포해야 하는데 이 부분은 장고에 대해서 많이 익숙해진 다음에 뒤에서 다시 설명하겠습니다.
숨어있는 IP와 Port

django-admin runserver {ip:port}
python manage.py runserver {ip:port}

우리가 로컬에서 개발할 때 Terminal 또는 WSL에서  python manage.py runserver라는 명령어를 통해 개발 서버를 실행해서 사용하지만 사실은 runserver 뒤에 IP와 Port 라는 인자가 숨어 있습니다.

우리가 따로 적어 주지 않으면 기본적으로 127.0.0.1이라는 IP주소와 8000번 포트를 사용해서 서버가 실행되며, 여기서 127.0.0.1은 지금 내 컴퓨터를 가리키는 주소라고 생각하면 됩니다. 그러니까 내 컴퓨터를 서버로 사용해서 Django 프로젝트를 실행한다는 뜻이죠. 그리고 당연히 다른 IP 주소와 포트를 지정할 수도 있습니다.

IP와 Port에 대해 간단히 알아보면 아이피 주소(IP Address)는 Internet Protocol의 앞 글자를 딴 것으로 네트워크 상에서 다른 컴퓨터와 내 컴퓨터를 구별하는 일종의 주소입니다. 그리고 포트(Port)는 IP로 찾은 컴퓨터 내부에서 실행되고 있는 프로그램이나 서비스를 구분하는 값인데요, 그러니까 IP로 컴퓨터를 찾고 그 안에서 포트를 가지고 프로그램을 찾는 거죠.

우리가 매번 실행하는 개발 서버를 예로 들면 python manage.py runserver로 실행한 개발 서버는 127.0.0.1의 IP 주소, 즉 내 컴퓨터에서 8000번 포트로 Django 서비스를 실행한 뒤 유저의 접속을 기다립니다. 그러면 우리는 웹 브라우저를 켜서 해당 주소값과 포트를 이용해 우리 개발 서버의 Django 프로젝트로 들어가게 되는 거죠. 이러한 과정에서 웹 브라우저와 같이 서버에 무언가를 요청하는 부분을 클라이언트라고 하고 지금과 같이 클라이언트와 서버가 있는 구조를 클라이언트-서버 구조라고 하는데, 이에 대해서는 뒤에 있는 레슨에서 자세하게 배워볼 예정입니다. 지금은 runserver 다음에 IP 주소와 포트 번호가 온다는 점만 기억해 주세요.
-------------------------------------------------------------------------------------------------------------------------------------------------------------
django-admin runserver vs python manage.py runserver

안녕하세요,

궁금한 내용은 'Django 프로젝트 구조 정리하기' 강의에 있으며 그 내용을 초록한 글입니다.

manage.py와 거의 동일한 기능을 하는 것으로 django-admin이 있습니다. 

실제로 manage.py는 django-admin을 감싸서 구현한 형태로 생성한 프로젝트에 대해 설정을 해주는 몇 가지 기능이 더 들어 있는 것입니다. 

다시 말하면 manage.py가 django-admin의 기능을 포함하면서 몇 가지 설정 기능이 더 있는 거죠.

프로젝트를 생성할 때는 django-admin을 사용하고 나머지 모든 기능은 manage.py를 사용하면 됩니다.

django-admin과 manage.py 에 대해 더 자세하게 알고 싶다면 아래 Django 공식 문서를 참고하세요.

https://docs.djangoproject.com/en/2.2/ref/django-admin/
---------------------------------------------------------------------------------------------------------------------------

django가 자동으로 생성해주는 프로젝트의 구조

costaurant 의 구조 :

costaurant (Project Root)
-> manage.py (우리 프로젝트의 매니저!)
-> db.sqlite3 (우리 프로젝트에서 사용하는 데이터베이스 파일)
-> costaurant (Project App)
   -> __init__.py
   -> settings.py
   -> urls.py
   -> wsgi.py
   
* Project Root : 쟝고 프로젝트의 모든 파일이 담겨있는 최상위 디렉토리이다 이 디렉토리는 나중에 이름을 맘대로 바꾸어도 된다
* Project App : 하나의 쟝고 프로젝트는 여러개의 앱으로 구성되어있다 프로젝트 앱은 그 중 가장 중심이 되는 앱이다 이 디렉토리는 설정 파일등 다른 여러곳에서 쓰이기 때문에 이름을 바꾸면 다른곳에서 많은 수정이 필요하다
* manage.py : 쟝고 프로젝트 관리를 위한 명령어 지원 앱(App) 생성, 데이터베이스 관련 명령, 개발서버 실행 등 여러기능을 수행할 수 있다
* db.sqlite3 : 우리 프로젝트에서 사용하는 데이터베이스 파일
* __init__.py : 처음에 열어보면 아무것도 없다 그렇다고 없어도 되는 파일일까? No No 이 파일은 디렉토리가 하나의 파이썬 패키지로 인식되게끔 하는 역할을 한다 쟝고의 앱은 하나의 파이썬 패키지이다 (프로젝트 앱 디렉토리도 하나의 앱이다) 
디렉토리가 하나의 파이썬 패키지로 인정받기 위해서는 __init__ 파일이 있어야한다 but 파이썬 3.3 이상부터는 이 파일이 없어도 파이썬 패키지로 인식한다 없어도 정상작동 하긴함 그럼에도 불구하고 __init__ 파일이 필요한 이유는
파이썬 3.3 이하 버전에서도 문제 없이 동작하는 구조를 만들기 위해서이다 (하위버전호환)
* seetings.py : 프로젝트의 시간대 설정 데이터베이스 설정 쟝고내의 여러 경로 설정 등 쟝고 프로젝트의 전반적인 설정을 담당한다
* urls.py : url을 보고 알맞은 페이지로 연결해주는 역할 유저가 브라우저에 우리 프로젝트의 어떤 주소 즉 url을 입력하면 이 파일이 들어오는 url에 따라 어떤 처리를 할 지 결정한다 예르들어 codeit.kr/login 이 들어오면
로그인 페이지를 받아와야한다 url을 보고 어디로 보낼지 결정하는것이다
* wsgi.py (Web Server Gateway Interface) : 웹 서버와 파이썬 애플리케이션인 쟝고가 소통하는데 필요한 일종의 프로토콜
-------------------------------------------------------------------------------------------------------------------------------------------------

Django 프로젝트(Project)
01. Django 프로젝트 생성하기

Django 프로젝트를 생성할 때는 아래 명령어를 이용해서 생성할 수 있습니다.

django-admin startproject {프로젝트명}

# 예시
django-admin startproject codeit_proj

02. Django 프로젝트 구조

Django 프로젝트를 새로 생성하면 다음과 같은 구조의 파일들이 생성됩니다.

codeit_proj/ #프로젝트명
    manage.py
    codeit_proj/ # 프로젝트명
        __init__.py
        settings.py
        urls.py
        wsgi.py

2.1 Project Root

최상위 디렉토리인 프로젝트 명(codeit_proj) 디렉토리는 Project Root라고 하고 우리 프로젝트의 전체 파일이 들어 있는 디렉토리 입니다.

2.2 manage.py

manage.py는 하나의 Django 프로젝트를 생성하면 자동으로 만들어지는 프로젝트 관리를 위한 명령 유틸리티입니다. Django 앱을 만들거나, 데이터베이스 관련 기능을 수행하거나, 개발 서버를 실행하는 등의 여러기능을 실행 할 수 있죠.

manage.py와 거의 동일한 기능을 하는 것으로 django-admin이 있습니다. 실제로 manage.py는 django-admin을 감싸서 구현한 형태로 생성한 프로젝트에 대해 설정을 해주는 몇 가지 기능이 더 들어 있는 것입니다. 다시 말하면 manage.py가 django-admin의 기능을 포함하면서 몇 가지 설정 기능이 더 있는 거죠. 프로젝트를 생성할 때는 django-admin을 사용하고 나머지 모든 기능은 manage.py를 사용하면 됩니다. 

django-admin과 manage.py 에 대해 더 자세하게 알고 싶다면 아래 Django 공식 문서를 참고하세요.
https://docs.djangoproject.com/en/2.2/ref/django-admin/

2.3 ProjectApp (Django Root)

Project Root 안에 있는 프로젝트 명(codeit_proj) 디렉토리는 Django 프로젝트를 위한 여러 파일이 담겨 있는 디렉토리 입니다. 우리는 헷갈리지 않게 이 디렉토리를 ProjectApp 라고 하겠습니다.

2.4 __ init __.py

__init__.py 파일이 포함된 디렉토리를 Python의 패키지로 인식하게끔 하기 위해서 사용합니다. python 3.3 이후 버전부터는 이 파일이 없어도 패키지로 인식되지만 하위 버전 호환을 위해 작성해 주는 것이 좋습니다.

2.5 settings.py

settings.py 는 Django 프로젝트의 여러 가지 설정을 담고 있는 파일입니다. 아직 내부에 있는 자세한 설정을 배우지는 않았지만, 미리 알고 싶다면 다음 문서를 참고하세요.
https://docs.djangoproject.com/en/2.2/ref/settings/

2.6 urls.py

urls.py 는 Django 프로젝트로 들어온 url을 보고 알맞은 로직(View)으로 연결해주는 역할을 하는 파일입니다. 우리 Django 프로젝트의 목차라고 할 수 있겠네요. 이 urls.py에 대해서는 뒤에서 자세하게 다룹니다.

2.7 wsgi.py

wsgi.py 의 WSGI는 WebServer Gateway Interface의 약자로 파이썬에서 웹 통신을 하기 위한 일종의 약속입니다.  더 자세하게 알기 위해서는 네트워크 통신에 대한 이해가 필요하므로 여기서는 간단하게 웹 서버와 Django 어플리케이션을 연결해주는 역할을 한다는 정도만 알고 넘어가도록 하겠습니다. 자세한 내용은 나중에 배포에 대한 심화 토픽에서 다루도록 할게요.
만약 지금 WSGI에 대해 더 알고 싶으시다면 아래 문서를 참고하세요.
https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface
----------------------------------------------------------------------------------------------------------------------------------------------

Django App - 새로운 쟝고 앱을 만들어보자

Project vs App
* Project는 웻 서비스 전체이고 App은 그 안에서 하나하나의 기능을 나타내는 단위
ex) 인터넷 쇼핑물을 만든다고 한다면 그 안에 회원 가입 기능 장바구니 기능 결제 기능 등등이 있다 쟝고애서는 이 하나하나의 단위를 각각의 독립적인 앱 단위로 개발할 수 있다 이런 앱들을 모두 합친것이 하나의 프로젝트이다

앱 생성하기
* 프로젝트의 루트 디렉토리로 이동 -> python3 manage.py startapp foods (pip3 를 써서 python3 를 쓴다 pip이면 python) -> 루트 디렉토리에 foods란 디렉토리가 생성됨 -> VSCode로 이 foods 디렉토리를
한번 봐보자 -> code . -> foods 디렉토리를 펼쳐보면 이미 몇개의 파일들이 만들어져있다 프로젝트를 생성할 깨 기본 뼈대가 생성되는 것처럼 앱을 생성할 때도 기본틀이 제공된다 이거시 웹 프레임워크를 사용하는 장점

foods
-> migrations (models처럼 데이터베이스와 연관됨 데이터베이스의 변동사항 히스토리 누적
   -> __init__.py
-> __init__.py (파이썬 패키지로 인식되기 위해 필요)
-> admin.py (foods 앱을 쟝고 관리자와 연동하기 위해 필요한 설정 파일)
-> apps.py (이 앱에 대한 설정을 넣어두는 파일)
-> models.py (이 앱에서 사용할 데이터 모델 정의, 데이터 모델 연동과 관련된 파일)
-> tests.py (프로젝트의 테스트 코드를 작성하는 곳 우리가 만든 웹사이트에 오류가 있는지 검사하기 위해 테스트 코드를 작성해둔다 이번 토픽에서는 이건 생략한다)
-> views.py (서버에 어떤 요청이 들어왔을 때 어떻게 처리할지에 대한 로직이 들어가는 파일, 메인 로직 처리와 관련된 파일)

models.py 와 views.py는 쟝고에서 가장 핵심이 되는 요소들이다

* 새로운 앱을 만들었다면 쟝고에게 새로운 앱을 만들었다고 말해주어야한다!
-> project app 디렉토리에 있는 settings.py를 열어보자 (VSCode) -> INSTALLED_APPS 항목으로 간다 -> 이 리스트가 현재 우리 프로젝트를 구성하고 있는 앱 목록이다 우리가 추가하지 않아도 쟝고가 기본적으로
몇개의 앱을 만들어서 넣어놨다 -> 우리가 방금 생성한 foods 앱도 넣어두자 -> 'foods' 추가

settings.py의 installed_apps 항목에 app을 추가할 때 아래처럼 항상 끝에 ,(콤마)를 붙여주면 안붙였을 때 에러가 발생하는 상황을 방지할 수 있습니다.

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'foods',
]

------------------------------------------------------------------------------------------------------------------------------------------------------

Django 앱(App) 구조
01. Project와 App의 차이

Django에서 웹 서비스 각각의 기능은 앱 단위로 구현합니다. 서로 다른 기능을 하는 앱을 여러 개 모아서 하나의 프로젝트로 만드는 거죠. 실제로 하나의 프로젝트는 여러 개의 앱과 약간의 설정 파일들로 구성되어 있고 하나의 앱은 여러 개의 프로젝트에서 사용할 수 있습니다.
02. App 생성하기

Django에서 앱을 생성할 때는 manage.py를 이용합니다.

python manage.py startapp {생성할 App 이름}

#예시
python manage.py startapp foods

03. Django App 구조

{app_name}/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    views.py

3.1 admin.py

각각의 앱을 Django의 관리자 기능과 연결하거나 관리자 기능에 대해 설정을 하는 파일입니다.
3.2 apps.py

각각의 App마다 추가적인 기능 및 설정을 넣어 주기 위한 파일입니다. 이번 토픽에서는 다루지 않는 파일이고 Django에 대한 이해가 있어야 사용할 수 있기 때문에 지금은 자세하게 설명하지 않겠습니다.

만약 조금 더 알고 싶으신 분은 아래의 공식 문서를 참조하세요.

https://docs.djangoproject.com/en/2.2/ref/applications
3.3 migrations 디렉토리

Django 앱의 데이터 구조에 대한 변경 사항인 migration 파일이 저장되는 디렉토리 입니다. migration에 대해서는 뒤에서 Django의 모델(Model)을 설명할 때 자세하게 다룹니다.
3.4 models.py

앱에서 사용하는 데이터 구조를 정의하고 데이터베이스와의 소통을 담당하는 파일입니다. migration과 마찬가지로 Django의 모델(Model)을 설명할 때 자세하게 다룹니다.
3.5 tests.py

앱에 대한 테스트 코드를 작성하는 파일입니다. 테스트는 말 그대로 Django 프로젝트의 모든 기능이 의도한 대로 잘 동작하는지 체크하는 것을 말합니다. 그리고 이런 테스트는 작은 함수 하나를 체크하는 테스트부터 여러 함수의 상호작용이 있는 전반적인 큰 로직을 테스트하는 것까지 다양한 크기의 테스트가 있습니다. 그렇기 때문에 프로젝트를 모두 완성한 다음 테스트를 준비하는 것이 아니라 앱 별로 작은 단위의 자동화된 테스트를 미리 만들어서 프로젝트 전체에 대한 테스트가 효율적으로 이루어질 수 있도록 작성하는 것이 좋습니다. 이러한 테스트에 대한 내용은 별도로 다뤄 볼 예정입니다.
3.6 views.py

앱에서 어떤 기능을 할지에 대한 메인 로직을 담당하는 파일입니다. 뒤에서 Django의 뷰(View)에 대해 설명할 때 자세하게 다룹니다.

--------------------------------------------------------------------------------------------------------------------------------------------------------

실습과제
100XP
코스토랑 프로젝트 #01
실습 문제

이제 여러분의 코스토랑 프로젝트를 시작 해봅시다. 아래를 참고해서 각각의 기능을 구현해주세요. 지금까지 강의에서 함께 만들었던 코스토랑 프로젝트는 그대로 두고 새로운 위치에서 프로젝트를 생성해주세요.
앞으로 지금 생성한 코스토랑 프로젝트를 계속 이어서 완성해 나갈 거니까, 기억할 수 있는 위치에서 작업해주세요.

1. 프로젝트 생성하기

costaurant 라는 이름의 Django 프로젝트를 생성해 주세요.

2. 앱 생성하기

menus 라는 이름의 앱을 생성해 주세요.

3. 앱 등록하기

settings.py로 가서 menus 앱을 등록해 주세요.

4. 서버 실행하기

서버를 켜고 아래 처럼 정상적으로 접속 되는지 확인하세요.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3568&directory=Untitled.png&name=Untitled.png


실습 정답

[1] django 프로젝트는 django-admin을 통해서 생성할 수 있습니다.

django-admin startproject costaurant

[2] django 앱은 manage.py를 이용해서 생성할 수 있습니다.

#costaurant 디렉토리로 이동한 뒤
python manage.py startapp menus

[3] 앱을 생성하면 settings.py에 등록해주어야 합니다.

#costaurant/settings.py
...
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'menus', # App 등록
]
...

# 만약 코드잇 실행기에서 실행을 하고 있다면 settings.py의 ALLOWED_HOSTS에
# 아래와 같이 추가해주어야 합니다.
ALLOWED_HOSTS = ['*']

[4] manage.py의 runserver를 통해 개발 서버를 실행할 수 있습니다.

python manage.py runserver
python manage.py runserver 0.0.0.0:8000 #코드잇 실행기에서 실행 할 

------------------------------------------------------------------------------------------------------------------------------------

*Reusable App

