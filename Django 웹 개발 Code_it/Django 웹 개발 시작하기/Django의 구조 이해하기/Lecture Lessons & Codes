Django 강의 설명서
| Django 웹 개발 시작하기는

코드잇 Django 강의를 수강하는 여러분 반갑습니다! 본 강의에 들어가기에 앞서서 어떻게 하면 강의를 효율적으로 학습할 수 있는지 이번 토픽의 학습 목표는 무엇인지, 그리고 Django를 처음 배울 때 어려운 점은 무엇인지 미리 알아봅시다. 앞으로 여러분의 소중한 시간을 더욱더 값지게 사용하기 위해서요.
| 두 개의 프로젝트

이번 토픽에서는 두 개의 프로젝트를 하게 되는데 하나는 강의에서 함께 하는 프로젝트고 다른 하나는 강의를 바탕으로 여러분이 혼자 만드는 프로젝트입니다. 그리고 이 모든 과정은 앞의 레슨에서부터 이어지는 하나의 큰 과정입니다.

꼭! 이 두 가지 프로젝트를 직접 코딩해보세요.

Django는 파이썬 같은 언어가 아니라 웹 개발을 위해 만들어진 도구입니다. 이 훌륭한 도구는 사용하는 방법과 순서가 어느 정도 정해져 있어서 처음 배울 때는 사용법을 익히고 흐름을 이해하는 것이 중요합니다. 그리고 그것을 익히는 가장 좋은 방법은 눈으로만 보는 것이 아니라 직접 입력해 보는 것입니다.
| 처음부터 디테일을 추구하지 마세요

이번 토픽은 Django의 구조를 이해하고 각각의 구조가 어떻게 연결되어 있는지를 이해하는 것이 핵심입니다. 강의마다 Django의 새로운 명령어와 문법들이 나올 텐데 디테일에 집중하기보다 전체적인 흐름을 잡는 것에 집중해주세요. 자세한 문법들은 흐름을 이해한 다음에 다시 찾아봐도 늦지 않습니다.

천천히 그리고 가볍게 강의를 수강하세요.
| 조금 어렵게 느껴지는 것이 당연합니다

본 강의는 언어를 배우는 것이 아닌 언어를 활용한 하나의 프레임워크를 배우는 과정입니다. Django는 웹 서비스를 만들기 위한 프레임워크로 파이썬, 데이터베이스, 웹 프로그래밍 등 여러 가지 기술에 대한 지식과 테크닉이 들어가 있고 이러한 기술들을 조금 더 깔끔한 구조의 코드로 작성할 수 있도록 많은 개발자가 고민해서 만들어진 틀이 있기 때문에 처음 접할 때 어렵게 느껴지는 것이 당연합니다. 하지만 거꾸로 말하면 Django 내부의 이 틀만 잘 이해하면 Django를 잘 사용할 수 있게 된다는 뜻이기도 합니다.

너무 걱정하지는 마세요. 가벼운 개념부터 차근차근 알려드릴게요 :)
자, 준비가 되었다면 바로 다음 강의로 넘어가 봅시다.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Start a Django Project

django-admin startproject costaurant(project name) -> costaurant project directory created

ls -> can see costaurant project directory in the code_it_django

이제 django 개살 서버를 실행할 수 있다 -> 명령어 하나만 썼지만 개발에 필요한 기본적인 뼈대는 django가 모두 생성해주었다!

cd costautant -> 디렉토리로 들어가서~ 

code . -> vscode로 이 디렉토리를 열자 -> costaurant 아래에 costaurant 디렉토리와 여러가지 파일들이 있는것이 보인다

-> manage.py -> 이것을 이용해서 개발서버를 실행할 수 있다

-> python manage.py runserver (그런데 나는 pip3로 django를 설치했으니 python3 manage.py runserver 를 써야한다)

-> 나오는 주소 복사 후 웹브라우저에 붙여놓기 -> django로 만든 웹사이트에 접근한다!

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

코드잇 실행기에서 Django 실습하기
코드잇 실행기

코드잇 실행기에서 제공하는 웹 터미널 환경은 앞에서 배운 pyenv를 이용한 django 개발 환경(django-envs)인 환경이 적용된 상태로 추가적인 개발 환경 설정 없이 기본으로 설정되어있는 경로인 django 디렉토리에서 실습을 진행하면 됩니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3561&directory=Untitled.png&name=Untitled.png

각 레슨의 실행기는 독립적이며 사용자 한 명이 동시에 하나의 실행기만 실행할 수 있습니다. 그러니까 여러 개의 창을 띄워도 실행기는 하나의 창에서만 사용 가능한거죠. 그리고 웹 터미널의 경우에 오랜 시간 사용하지 않으면 Timeout이 발생하는데, 이때 새로 고침을 하면 다시 사용 할 수 있습니다.
파일 관리

django 디렉토리 내부에서 작업한 모든 파일과 디렉토리는 왼쪽 상단의 폴더 아이콘을 누르면 트리 구조로 볼 수 있습니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3561&directory=tree.png&name=tree.png
Django 개발서버 실행하기

코드잇 실행기에서 장고 실습을 진행할 경우 내 컴퓨터에서 실습하는 것과는 다르게 설정해야 하는 것이 두 가지 있습니다. 여기서 다루는 파일과 내용은 뒤에 있는 레슨에서 자세하게 다룰 거니까 지금은 실행을 위한 설정에 집중해 주세요.
1. Allowed Hosts 설정하기

Django 프로젝트를 생성하고 프로젝트 앱 내부를 보면 프로젝트의 설정을 할 수 있는 settings.py 파일이 있습니다.
settings.py 파일을 클릭해서 열고 28번째 줄 근처를 보면 ALLOWED_HOSTS 라는 리스트가 있는데 이 리스트에 '*' 이라는 문자열을 아래와 같이 추가합니다. 이렇게 하게되면 모든 경우의 호스트에 대해 허용해준다는 뜻인데 지금은 코드잇에서 제공하는 실행 환경을 사용하기위해 Django에 설정해 주는 과정이라고 생각하면 됩니다.

ALLOWED_HOSTS = ['*']

2. Run Server에 전달 인자 넣어주기

다음은 Django의 개발 서버를 실행할 때 추가로 입력해 주어야 하는 부분입니다. Django는 개발 진행 상황을 보면서 개발할 수 있도록 자체적으로 개발 서버를 제공하는데 일반적으로 아래의 명령어를 이용해서 개발 서버를 실행할 수 있습니다.

python manage.py runserver

이렇게 runserver 뒤에 아무런 전달 인자를 넣어 주지 않으면 내 컴퓨터 자체를 개발 서버로 사용하게 되는데 우리는 코드잇 실행기에서 개발 서버를 실행해야 하므로 코드잇 실행기에서 개발 서버를 실행할 때는 아래와 같이 runserver 뒤에 0.0.0.0:8000 을 인자로 전달해 주어야 합니다.

python manage.py runserver 0.0.0.0:8000

이렇게 입력한 뒤 아래처럼  http://0.0.0.0:8000에서 개발 서버가 실행되면

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3561&directory=Untitled%201.png&name=Untitled+1.png

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3561&directory=Untitled%202.png&name=Untitled+2.png

화면 왼쪽에 있는 '웹 페이지 열기' 버튼을 눌러서 접속할 수 있습니다.

중요한 부분이니까 다시 한번 정리할게요.
코드잇 실행기에서 장고 실습을 하면 내 컴퓨터에서 실습할 때와 다르게 설정해야 하는 부분이 두 가지 있는데
첫째, settings.py 의 Allowed hosts 항목에 '*' 을 추가해 주어야 하고
두 번째, django의 개발 서버를 실행할 때 python manage.py runserver 뒤에 0.0.0.0:8000을 인자로 전달해 주어야 합니다.

코드잇 실행기에서 Django 실습을 할 때는 이 두 가지를 꼭! 기억해 주세요.
Django 개발서버 종료하기

실습을 하다보면 개발서버를 껐다가 다시 켜야 할 수도 있을텐데요. 실행중인 Django 개발서버를 종료하기 위해서는 터미널에 Control + c 를 입력하면 됩니다.
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Run Server의 비밀

runserver

django-admin runserver
python manage.py runserver

우리가 Django 코드를 작성하고 나면 결과를 확인하기 위해서 위와 같은 runserver를 이용해서 서버(server)를 실행해야 했죠? 그렇게 서버를 실행하고 나면 웹 브라우저를 통해서 우리가 만든 Django 프로젝트에 접속할 수 있었는데요, 이 과정에서 웹 브라우저로 접속했을 때 우리가 만든 django 프로젝트를 보여주는 역할을 하는 것을 '서버'라고 합니다. 그러니까 코드잇 실행기에서 작업을 하고 있다면 코드잇 실행기가 서버 역할을 하게 되는 거고, 로컬에서 작업을 하고 있다면 여러분의 컴퓨터가 서버가 되는 거죠. 조금 더 자세한 서버 이야기는 뒤에서 다시 자세하게 배워보도록 하고 지금 여기서는 아, 서버가 Django 프로젝트를 실행하고 보여주는 역할을 하는구나 정도만 생각해 주세요.

자, 그러면 기존에 Django 프로젝트를 서버가 실행하고 있는데 Django 코드를 변경하면 어떻게 될까요? 변경사항이 반영된 Django 프로젝트를 보기 위해서는 실행 중이던 Django 프로젝트를 종료하고 다시 재시작 하면 되겠죠. 그런데 Django는 이러한 과정을 편하게 하기 위해서
변경된 작업 결과를 확인할 수 있는 개발 서버를 자체적으로 제공합니다. 그래서 별다른 추가 작업 없이 최신의 변경사항이 반영된 Django 프로젝트를 확인할 수 있습니다. 우리는 그냥 코드를 수정하고 새로 고침만 하면 편하게 변경 사항을 보면서 개발할 수 있는 거죠. 다만 파일이 새로 추가되는 등의 작업은 서버를 다시 시작해야 반영됩니다.
왜 '개발 서버'일까?

그런데 이렇게 runserver로 실행한 서버를 '개발 서버'(Development Server)라고 말하는데요. 그 이유는 보안과 관련된 사항이나 성능을 보장하지 않는 말 그대로 확인용 서버이기 때문입니다. 그래서 실제 배포 시에는 개발 서버를 사용하는 것이 아닌 따로 웹 서버를 사용해서 배포해야 하는데 이 부분은 장고에 대해서 많이 익숙해진 다음에 뒤에서 다시 설명하겠습니다.
숨어있는 IP와 Port

django-admin runserver {ip:port}
python manage.py runserver {ip:port}

우리가 로컬에서 개발할 때 Terminal 또는 WSL에서  python manage.py runserver라는 명령어를 통해 개발 서버를 실행해서 사용하지만 사실은 runserver 뒤에 IP와 Port 라는 인자가 숨어 있습니다.

우리가 따로 적어 주지 않으면 기본적으로 127.0.0.1이라는 IP주소와 8000번 포트를 사용해서 서버가 실행되며, 여기서 127.0.0.1은 지금 내 컴퓨터를 가리키는 주소라고 생각하면 됩니다. 그러니까 내 컴퓨터를 서버로 사용해서 Django 프로젝트를 실행한다는 뜻이죠. 그리고 당연히 다른 IP 주소와 포트를 지정할 수도 있습니다.

IP와 Port에 대해 간단히 알아보면 아이피 주소(IP Address)는 Internet Protocol의 앞 글자를 딴 것으로 네트워크 상에서 다른 컴퓨터와 내 컴퓨터를 구별하는 일종의 주소입니다. 그리고 포트(Port)는 IP로 찾은 컴퓨터 내부에서 실행되고 있는 프로그램이나 서비스를 구분하는 값인데요, 그러니까 IP로 컴퓨터를 찾고 그 안에서 포트를 가지고 프로그램을 찾는 거죠.

우리가 매번 실행하는 개발 서버를 예로 들면 python manage.py runserver로 실행한 개발 서버는 127.0.0.1의 IP 주소, 즉 내 컴퓨터에서 8000번 포트로 Django 서비스를 실행한 뒤 유저의 접속을 기다립니다. 그러면 우리는 웹 브라우저를 켜서 해당 주소값과 포트를 이용해 우리 개발 서버의 Django 프로젝트로 들어가게 되는 거죠. 이러한 과정에서 웹 브라우저와 같이 서버에 무언가를 요청하는 부분을 클라이언트라고 하고 지금과 같이 클라이언트와 서버가 있는 구조를 클라이언트-서버 구조라고 하는데, 이에 대해서는 뒤에 있는 레슨에서 자세하게 배워볼 예정입니다. 지금은 runserver 다음에 IP 주소와 포트 번호가 온다는 점만 기억해 주세요.
-------------------------------------------------------------------------------------------------------------------------------------------------------------
django-admin runserver vs python manage.py runserver

안녕하세요,

궁금한 내용은 'Django 프로젝트 구조 정리하기' 강의에 있으며 그 내용을 초록한 글입니다.

manage.py와 거의 동일한 기능을 하는 것으로 django-admin이 있습니다. 

실제로 manage.py는 django-admin을 감싸서 구현한 형태로 생성한 프로젝트에 대해 설정을 해주는 몇 가지 기능이 더 들어 있는 것입니다. 

다시 말하면 manage.py가 django-admin의 기능을 포함하면서 몇 가지 설정 기능이 더 있는 거죠.

프로젝트를 생성할 때는 django-admin을 사용하고 나머지 모든 기능은 manage.py를 사용하면 됩니다.

django-admin과 manage.py 에 대해 더 자세하게 알고 싶다면 아래 Django 공식 문서를 참고하세요.

https://docs.djangoproject.com/en/2.2/ref/django-admin/
---------------------------------------------------------------------------------------------------------------------------

django가 자동으로 생성해주는 프로젝트의 구조

costaurant 의 구조 :

costaurant (Project Root)
-> manage.py (우리 프로젝트의 매니저!)
-> db.sqlite3 (우리 프로젝트에서 사용하는 데이터베이스 파일)
-> costaurant (Project App)
   -> __init__.py
   -> settings.py
   -> urls.py
   -> wsgi.py
   
* Project Root : 쟝고 프로젝트의 모든 파일이 담겨있는 최상위 디렉토리이다 이 디렉토리는 나중에 이름을 맘대로 바꾸어도 된다
* Project App : 하나의 쟝고 프로젝트는 여러개의 앱으로 구성되어있다 프로젝트 앱은 그 중 가장 중심이 되는 앱이다 이 디렉토리는 설정 파일등 다른 여러곳에서 쓰이기 때문에 이름을 바꾸면 다른곳에서 많은 수정이 필요하다
* manage.py : 쟝고 프로젝트 관리를 위한 명령어 지원 앱(App) 생성, 데이터베이스 관련 명령, 개발서버 실행 등 여러기능을 수행할 수 있다
* db.sqlite3 : 우리 프로젝트에서 사용하는 데이터베이스 파일
* __init__.py : 처음에 열어보면 아무것도 없다 그렇다고 없어도 되는 파일일까? No No 이 파일은 디렉토리가 하나의 파이썬 패키지로 인식되게끔 하는 역할을 한다 쟝고의 앱은 하나의 파이썬 패키지이다 (프로젝트 앱 디렉토리도 하나의 앱이다) 
디렉토리가 하나의 파이썬 패키지로 인정받기 위해서는 __init__ 파일이 있어야한다 but 파이썬 3.3 이상부터는 이 파일이 없어도 파이썬 패키지로 인식한다 없어도 정상작동 하긴함 그럼에도 불구하고 __init__ 파일이 필요한 이유는
파이썬 3.3 이하 버전에서도 문제 없이 동작하는 구조를 만들기 위해서이다 (하위버전호환)
* seetings.py : 프로젝트의 시간대 설정 데이터베이스 설정 쟝고내의 여러 경로 설정 등 쟝고 프로젝트의 전반적인 설정을 담당한다
* urls.py : url을 보고 알맞은 페이지로 연결해주는 역할 유저가 브라우저에 우리 프로젝트의 어떤 주소 즉 url을 입력하면 이 파일이 들어오는 url에 따라 어떤 처리를 할 지 결정한다 예르들어 codeit.kr/login 이 들어오면
로그인 페이지를 받아와야한다 url을 보고 어디로 보낼지 결정하는것이다
* wsgi.py (Web Server Gateway Interface) : 웹 서버와 파이썬 애플리케이션인 쟝고가 소통하는데 필요한 일종의 프로토콜
-------------------------------------------------------------------------------------------------------------------------------------------------

Django 프로젝트(Project)
01. Django 프로젝트 생성하기

Django 프로젝트를 생성할 때는 아래 명령어를 이용해서 생성할 수 있습니다.

django-admin startproject {프로젝트명}

# 예시
django-admin startproject codeit_proj

02. Django 프로젝트 구조

Django 프로젝트를 새로 생성하면 다음과 같은 구조의 파일들이 생성됩니다.

codeit_proj/ #프로젝트명
    manage.py
    codeit_proj/ # 프로젝트명
        __init__.py
        settings.py
        urls.py
        wsgi.py

2.1 Project Root

최상위 디렉토리인 프로젝트 명(codeit_proj) 디렉토리는 Project Root라고 하고 우리 프로젝트의 전체 파일이 들어 있는 디렉토리 입니다.

2.2 manage.py

manage.py는 하나의 Django 프로젝트를 생성하면 자동으로 만들어지는 프로젝트 관리를 위한 명령 유틸리티입니다. Django 앱을 만들거나, 데이터베이스 관련 기능을 수행하거나, 개발 서버를 실행하는 등의 여러기능을 실행 할 수 있죠.

manage.py와 거의 동일한 기능을 하는 것으로 django-admin이 있습니다. 실제로 manage.py는 django-admin을 감싸서 구현한 형태로 생성한 프로젝트에 대해 설정을 해주는 몇 가지 기능이 더 들어 있는 것입니다. 다시 말하면 manage.py가 django-admin의 기능을 포함하면서 몇 가지 설정 기능이 더 있는 거죠. 프로젝트를 생성할 때는 django-admin을 사용하고 나머지 모든 기능은 manage.py를 사용하면 됩니다. 

django-admin과 manage.py 에 대해 더 자세하게 알고 싶다면 아래 Django 공식 문서를 참고하세요.
https://docs.djangoproject.com/en/2.2/ref/django-admin/

2.3 ProjectApp (Django Root)

Project Root 안에 있는 프로젝트 명(codeit_proj) 디렉토리는 Django 프로젝트를 위한 여러 파일이 담겨 있는 디렉토리 입니다. 우리는 헷갈리지 않게 이 디렉토리를 ProjectApp 라고 하겠습니다.

2.4 __ init __.py

__init__.py 파일이 포함된 디렉토리를 Python의 패키지로 인식하게끔 하기 위해서 사용합니다. python 3.3 이후 버전부터는 이 파일이 없어도 패키지로 인식되지만 하위 버전 호환을 위해 작성해 주는 것이 좋습니다.

2.5 settings.py

settings.py 는 Django 프로젝트의 여러 가지 설정을 담고 있는 파일입니다. 아직 내부에 있는 자세한 설정을 배우지는 않았지만, 미리 알고 싶다면 다음 문서를 참고하세요.
https://docs.djangoproject.com/en/2.2/ref/settings/

2.6 urls.py

urls.py 는 Django 프로젝트로 들어온 url을 보고 알맞은 로직(View)으로 연결해주는 역할을 하는 파일입니다. 우리 Django 프로젝트의 목차라고 할 수 있겠네요. 이 urls.py에 대해서는 뒤에서 자세하게 다룹니다.

2.7 wsgi.py

wsgi.py 의 WSGI는 WebServer Gateway Interface의 약자로 파이썬에서 웹 통신을 하기 위한 일종의 약속입니다.  더 자세하게 알기 위해서는 네트워크 통신에 대한 이해가 필요하므로 여기서는 간단하게 웹 서버와 Django 어플리케이션을 연결해주는 역할을 한다는 정도만 알고 넘어가도록 하겠습니다. 자세한 내용은 나중에 배포에 대한 심화 토픽에서 다루도록 할게요.
만약 지금 WSGI에 대해 더 알고 싶으시다면 아래 문서를 참고하세요.
https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface
----------------------------------------------------------------------------------------------------------------------------------------------

Django App - 새로운 쟝고 앱을 만들어보자

Project vs App
* Project는 웻 서비스 전체이고 App은 그 안에서 하나하나의 기능을 나타내는 단위
ex) 인터넷 쇼핑물을 만든다고 한다면 그 안에 회원 가입 기능 장바구니 기능 결제 기능 등등이 있다 쟝고애서는 이 하나하나의 단위를 각각의 독립적인 앱 단위로 개발할 수 있다 이런 앱들을 모두 합친것이 하나의 프로젝트이다

앱 생성하기
* 프로젝트의 루트 디렉토리로 이동 -> python3 manage.py startapp foods (pip3 를 써서 python3 를 쓴다 pip이면 python) -> 루트 디렉토리에 foods란 디렉토리가 생성됨 -> VSCode로 이 foods 디렉토리를
한번 봐보자 -> code . -> foods 디렉토리를 펼쳐보면 이미 몇개의 파일들이 만들어져있다 프로젝트를 생성할 깨 기본 뼈대가 생성되는 것처럼 앱을 생성할 때도 기본틀이 제공된다 이거시 웹 프레임워크를 사용하는 장점

foods
-> migrations (models처럼 데이터베이스와 연관됨 데이터베이스의 변동사항 히스토리 누적
   -> __init__.py
-> __init__.py (파이썬 패키지로 인식되기 위해 필요)
-> admin.py (foods 앱을 쟝고 관리자와 연동하기 위해 필요한 설정 파일)
-> apps.py (이 앱에 대한 설정을 넣어두는 파일)
-> models.py (이 앱에서 사용할 데이터 모델 정의, 데이터 모델 연동과 관련된 파일)
-> tests.py (프로젝트의 테스트 코드를 작성하는 곳 우리가 만든 웹사이트에 오류가 있는지 검사하기 위해 테스트 코드를 작성해둔다 이번 토픽에서는 이건 생략한다)
-> views.py (서버에 어떤 요청이 들어왔을 때 어떻게 처리할지에 대한 로직이 들어가는 파일, 메인 로직 처리와 관련된 파일)

models.py 와 views.py는 쟝고에서 가장 핵심이 되는 요소들이다

* 새로운 앱을 만들었다면 쟝고에게 새로운 앱을 만들었다고 말해주어야한다!
-> project app 디렉토리에 있는 settings.py를 열어보자 (VSCode) -> INSTALLED_APPS 항목으로 간다 -> 이 리스트가 현재 우리 프로젝트를 구성하고 있는 앱 목록이다 우리가 추가하지 않아도 쟝고가 기본적으로
몇개의 앱을 만들어서 넣어놨다 -> 우리가 방금 생성한 foods 앱도 넣어두자 -> 'foods' 추가

settings.py의 installed_apps 항목에 app을 추가할 때 아래처럼 항상 끝에 ,(콤마)를 붙여주면 안붙였을 때 에러가 발생하는 상황을 방지할 수 있습니다.

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'foods',
]

------------------------------------------------------------------------------------------------------------------------------------------------------

Django 앱(App) 구조
01. Project와 App의 차이

Django에서 웹 서비스 각각의 기능은 앱 단위로 구현합니다. 서로 다른 기능을 하는 앱을 여러 개 모아서 하나의 프로젝트로 만드는 거죠. 실제로 하나의 프로젝트는 여러 개의 앱과 약간의 설정 파일들로 구성되어 있고 하나의 앱은 여러 개의 프로젝트에서 사용할 수 있습니다.
02. App 생성하기

Django에서 앱을 생성할 때는 manage.py를 이용합니다.

python manage.py startapp {생성할 App 이름}

#예시
python manage.py startapp foods

03. Django App 구조

{app_name}/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    views.py

3.1 admin.py

각각의 앱을 Django의 관리자 기능과 연결하거나 관리자 기능에 대해 설정을 하는 파일입니다.
3.2 apps.py

각각의 App마다 추가적인 기능 및 설정을 넣어 주기 위한 파일입니다. 이번 토픽에서는 다루지 않는 파일이고 Django에 대한 이해가 있어야 사용할 수 있기 때문에 지금은 자세하게 설명하지 않겠습니다.

만약 조금 더 알고 싶으신 분은 아래의 공식 문서를 참조하세요.

https://docs.djangoproject.com/en/2.2/ref/applications
3.3 migrations 디렉토리

Django 앱의 데이터 구조에 대한 변경 사항인 migration 파일이 저장되는 디렉토리 입니다. migration에 대해서는 뒤에서 Django의 모델(Model)을 설명할 때 자세하게 다룹니다.
3.4 models.py

앱에서 사용하는 데이터 구조를 정의하고 데이터베이스와의 소통을 담당하는 파일입니다. migration과 마찬가지로 Django의 모델(Model)을 설명할 때 자세하게 다룹니다.
3.5 tests.py

앱에 대한 테스트 코드를 작성하는 파일입니다. 테스트는 말 그대로 Django 프로젝트의 모든 기능이 의도한 대로 잘 동작하는지 체크하는 것을 말합니다. 그리고 이런 테스트는 작은 함수 하나를 체크하는 테스트부터 여러 함수의 상호작용이 있는 전반적인 큰 로직을 테스트하는 것까지 다양한 크기의 테스트가 있습니다. 그렇기 때문에 프로젝트를 모두 완성한 다음 테스트를 준비하는 것이 아니라 앱 별로 작은 단위의 자동화된 테스트를 미리 만들어서 프로젝트 전체에 대한 테스트가 효율적으로 이루어질 수 있도록 작성하는 것이 좋습니다. 이러한 테스트에 대한 내용은 별도로 다뤄 볼 예정입니다.
3.6 views.py

앱에서 어떤 기능을 할지에 대한 메인 로직을 담당하는 파일입니다. 뒤에서 Django의 뷰(View)에 대해 설명할 때 자세하게 다룹니다.

--------------------------------------------------------------------------------------------------------------------------------------------------------

실습과제
100XP
코스토랑 프로젝트 #01
실습 문제

이제 여러분의 코스토랑 프로젝트를 시작 해봅시다. 아래를 참고해서 각각의 기능을 구현해주세요. 지금까지 강의에서 함께 만들었던 코스토랑 프로젝트는 그대로 두고 새로운 위치에서 프로젝트를 생성해주세요.
앞으로 지금 생성한 코스토랑 프로젝트를 계속 이어서 완성해 나갈 거니까, 기억할 수 있는 위치에서 작업해주세요.

1. 프로젝트 생성하기

costaurant 라는 이름의 Django 프로젝트를 생성해 주세요.

2. 앱 생성하기

menus 라는 이름의 앱을 생성해 주세요.

3. 앱 등록하기

settings.py로 가서 menus 앱을 등록해 주세요.

4. 서버 실행하기

서버를 켜고 아래 처럼 정상적으로 접속 되는지 확인하세요.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3568&directory=Untitled.png&name=Untitled.png


실습 정답

[1] django 프로젝트는 django-admin을 통해서 생성할 수 있습니다.

django-admin startproject costaurant

[2] django 앱은 manage.py를 이용해서 생성할 수 있습니다.

#costaurant 디렉토리로 이동한 뒤
python manage.py startapp menus

[3] 앱을 생성하면 settings.py에 등록해주어야 합니다.

#costaurant/settings.py
...
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'menus', # App 등록
]
...

# 만약 코드잇 실행기에서 실행을 하고 있다면 settings.py의 ALLOWED_HOSTS에
# 아래와 같이 추가해주어야 합니다.
ALLOWED_HOSTS = ['*']

[4] manage.py의 runserver를 통해 개발 서버를 실행할 수 있습니다.

python manage.py runserver
python manage.py runserver 0.0.0.0:8000 #코드잇 실행기에서 실행 할 

------------------------------------------------------------------------------------------------------------------------------------

*Reusable App (쟝고 앱의 철학)
-> 만들어진 앱들은 꼭 하나의 프로젝트에서만 쓰이는 것이 아니라 다른 프로젝트에도 들어갈 수 있다 -> 하나의 앱이 여러가지 프로젝트에 포함될 수 있다!
ex) 예를들어 codeit_blog라는 프로젝트를 만든 후 codeit_books 라는 앱을 다시 만들 대는 필요한 기능들을 codeit_blog 에서 앱을 가져옴으로써 추가할 수 있다 이 때 가져온 앱들을 codeit_books에 맞게
살짝 수정만 해준다 심지어 직접 만든 앱이 아닌 다른 개발자들이 만든 앱도 가져와 쓸 수 있다 실재로 우리가 설치한 프로젝트의  settings.py 를 보면 INSTALLED_APPS 리스트에서 이 프로젝트가 이미 쟝고 개발자들이 개발한 
앱을 쓰고 있다는 것을 볼 수 있다
-> 이런식으로 여러 프로젝트에 가져다 쓸 수 있게 구조를 잘 짜놓은 앱을 reusable app이라 한다

Reusable한 앱을 만드는 방법?
-> 굉장히 애매하고 어렵다
-> 앱은 하나의 기능 단위라고 하지만 사실 하나의 기능이라는 기준이 명확하지 않다 A라는 기능이 있으면 그것을 하나의 앱으로 만들 수 있지만 A를 세부적인 두개의 기능으로 나누어 각각의 앱을 만들 수 도 있다
-> 딱히 정해진 답이 있는것이 아니다
-> 몇몇 사람이 제시한 가이드라인은 있다
-> 세계적인 쟝고 컨퍼런스인 쟝고컨 (DjangoCon) 에서는 Reusable App에 대해 다음 네가지 컨셉을 제시한다
1. 한가지 앱은 한가지 기능을 하고 그 기능을 잘 수행해야한다
2. 쟝고 개발자는 프로젝트를 많은 앱으로 구성하는 것을 두려워하면 안된다
3. 각각의 앱을 유연하게 작성해야한다
4. 다른 사람에게 배포가 가능하도록 개발해야한다

일단 우리는 이 수업에서 앱을 나누지 않고 하나의 앱으로만 쭉 연습해보자 

Reusable App에 대해 더 궁금하다면 다음의 영상을 참고해보세요!
DjangoCon: Reusable App 영상 바로가기 https://www.youtube.com/watch?v=A-S0tqpPga4&feature=youtu.be

-------------------------------------------------------------------------------------------------------------------------------------

Hello Django!

일단 VSCode를 이용해서 프로젝트 루트 디렉토리 안에 있는 urls.py를 열자 -> 유저가 브라우저에 url을 입력하면 쟝고는 urls.py 에 적혀있는 것을 보고 어떻게 처리할지를 결정한다

from django.contrib import admin
from django.urls import path

urlpatterns = [
    path('admin/', admin.site.urls),
]

-> urlpatters가 url을 어떻게 처리할지 써놓는 곳이다 우리가 건드린게 없어도 프로젝트를 생성하면 기본적으로 하나가 들어가있다
-> path('admin/', admin.site.urls) 뜻은 우리 사이트 주소 뒤에 /admin 이라고 되어있으면 admin.site.urls 로 가라는 뜻이다
-> 실재로 admin으로 접근해보자 -> 터미널로 가서 python3 manage.py runserver 해서 개발 서버를 연다 -> 주소로 간다 -> http://127.0.0.1:8000/ 이게 우리 사이트의 주소다
-> http://127.0.0.1:8000/admin 을 브라우저에 입력 -> 그러면 이런식으로 우리가 만들어준적은 없지만 쟝고에서 미리 제공해주는 관리자 페이지로 간다 관리자 페이지에 대해서는 뒤애서 공부하자
-> urls.py로 돌아가서 우리가 직접 url 처리를 해보자 -> path('foods/', include('foods.urls')) 를 추가한다 자세한 설명은 다음 렉처에... 그런데 include 함수를 쓰기 위해서는 
django.urls 로부터 include 함수를 가져와야한다 from django.urls import path 여기에 from django.urls import path, include 이렇게 추가해준다
-> 주소가 우리웹사이트주소/foods 면은 foods 앱 안의 urls.py 파일을 살펴보라는 의미이다 그런데 지금 foods 앱 안에 urls.py 파일이 없다 -> 만든다 -> VSCode로 foods 앱 안에 urls.py 를 생성한다
-> 프로젝트 루트 안의 urls.py 에서 
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('foods/', include('foods.urls'))
]
이 부분을 복사해서 새로은 urls.py 파일 안에 붙여넣는다 
-> 필요없는 첫번째 admin 관련 줄을지운다 그리고 path만 필요하기 때문에 include 도 지운다 foods 관련 줄도 지우고 다시 써준다 -> path('index/', views.index) 
-> views.index 의 의미는 foods 앱 안의 views.py 를 봐라이다 이러한 views 모듈을 쓰기 위해서는 일단 불러와야한다 -> from . import views 를 추가해준다 여기서 .은 현재와 같은 디렉토리를 의미한다 (현재 foods 디렉토리 안에서 views를 가져와라)
-> views.index의 의미는 또 views 모듈에서 index 함수를 가져오라는 의미이다 -> 실재로 views.py 를 열어보면 index 함수를 정의해준적이 없다 -> 우리가 만들어준다 

def index(request):
   return HttpResponse("<h2>Hello, Django!</h2>")

HttpResponse 함수를 쓰기위해서는 불러와야한다 -> from django.http import HttpResponse
-> 이제 다시 개발서버를 켠다 -> 우리 웹사이트/foods/index 를 브라우저에 입력한다 -> 짜잔


만약 파이썬의 '모듈과 패키지'에 대해 궁금하다면 아래의 코드잇 강의를 참고해주세요.
코드잇의 '모듈과 패키지' 강의 바로가기  https://www.codeit.kr/courses/python-intermediate/topics/python-module-and-package
--------------------------------------------------------------------------------------------------------------------------------------
def index(request):

   return HttpResponse("<h2>Hello, Django!</h2>")

index 함수의 패러미터인 request은 어디서 받아오나요?

views.index 에는 패러미터가 포함되어 있지 않은데 index 함수가 패러미터를 어디서 받아오는지 궁금합니다

좋은 질문이라 생각합니당!

  

어떤 URL 을 통해 HTTP 요청이 들어가게 될거에용.

이 때 django 는 이 HTTP 요청에 대한 metadata (content-type 이라든지, post 요청인지 get 요청인지 등등)를 포함한 HttpRequest 객체를 만든다고 합니당.

이 HttpRequest 객체가 뷰에 넘어가게 되는거죵.

  

https://docs.djangoproject.com/en/3.2/ref/request-response/ 도 한번 참고해보세용~!

-----------------------------------------------------------------------------------------------------------------------------------------

Client & Server

우리가 브라우저에 URL을 치고 엔터를 누르면 어떤 일이 벌어질까?
일반적으로 웹 서비스는 클라이언트가 서버에 무언가를 요청하고 (Reques) 서버가 클라이언트에게 응답하는 (Response) 식으로 동작한다. 

클라이언트는 서비스를 요청하는 쪽을 말하는데 크롬이나 사파리 같은 웹 브라우저가 클라이언트가 될 수 있고 모바일 앱이 클라이언트가 될 수 있다

서버란 무엇일까
사실 서버도 전세계 어딘가에 있는 컴퓨터이다 우리가 사용하는 데스크탑과 크게 다르지 않은 규모의 서버부터 훨씬 큰 규모의 서버도 있다
이러한 컴퓨터가 클라이언트에게 서비스를 제공하면 우리는 서버라고 부른다 예를들어 우리가 맛집에 대한 지도를 요청하면 서버는 해당 맛집에 대한 지도를 만들어 제공하고
날씨를 요청하면 날씨에 대한 정보를 찾아 제공하는것이다 때로는 서버가 클라이언트에게 이미지나 동영상을 요청하거나 제공받기도 한다

이렇게 클라이언트와 서버 두개의 파트로 나눈 구조를 클라이언트-서버 구조라고 한다

우리에게 응답을 해줄 서버를 어떻게 찾고 어떻게 요청하는가?
바로 URL을 이용한다 예를 들어 크롬 브라우저에 url을 입력하고 엔터를 누르면 브라우저가 클라이언트가 되어 서버에 무언가 요청한것이 된다 
무엇을 요청했을까? 우리는 지금 브라우저에 웹페이지를 띄우고 싶어하니까 웹페이지를 달라는 요청을 한것이다 웹페이지 주세요! (요청) 옜다 웹페이지.html (응답)

URL은 어떤 구조를 가지고 있나?
ex) bakey.codeit.kr/foods/index   
-> 앞부분(bakey.codeit.kr)을 도메인(domain)이라고 부르고 그 뒤에 있는 부분을 경로(path)라고 부른다 그리고 이 전체를 합쳐 url이라고 한다
이 때 앞부분의 도메인을 우리가 요청할 서버를 찾아주는 역할을 한다 
우리가 사용하는 인터넷에는 도메인 네임 시스템 (Domain Name System 줄여서 DNS)가 있는데 쉽게 말해 인터넷상의 주소록이라고 생각하면 된다 이러한 주소록에서 도메인을 검색해서
우리가 요청할 서버를 찾는거고 우리의 경우 해당 서버에 Django 프로젝트가 있는것이다
다음으로 경로(path)는 우리가 요청하는 내용(서버 안에서 원하는것이 있는 위치)을 담고 있다 여기서는 foods/index 에 해당하는 웹페이지를 달라고 하는것이다

웹 브라우저에 url을 입력하였을 때 django 프로젝트에서 어떤 일이 일어날까?
-> 터미널에서 costaurant 프로젝트로 이동 -> VSCode 실행
우리 장고 프로젝트에 웹 브라우저로부터 요청이 들어오면 구체적으로 어떤 응답을 해야할지 결정해야한다 url의 경로 항목에 어떤 url를 입력하든 장고가 가장 먼저 보는 파일은 프로젝트앱
디렉토리 안에 있는 urls.py이다 왜 그런지 settings.py을 보면 알 수 있는데 ROOT_URLCONF 항목은 장고가 url을 보고 가장 먼저 어떤 파일을 봐야하는지 설정하는 부분이다 보면은 
'costaurant.urls' 라고 되어있다 -> costaurant 프로젝트앱 안에 있는 urs.py를 봐라! 우리가 따로 설정해주지 않아도 프로젝트를 생성하면 장고가 이렇게 설정해준다
이제 프로젝트 앱 안의 urls.py를 보자 바로 여기서 입력된 url의 경로와 매치되는 패턴이 있는지 본다
    path('admin/', admin.site.urls),
    path('foods/', include('foods.urls'))
일단 url의 경로와 foods 부분이 매칭된다 거기서 시키는대로 동작된다 -> include('foods.urls') 이건 무슨 의미일까? 우리 전체 url의 경로 중에 foods 까지만 매칭되고 그 뒤에 index는 아직 그대로 남아있다
이 부분에 대해서 처리를 해주기 위해서 그 다음의 foods 앱 안에 있는 urs.py를 봐달라는 의미이다 즉 foods가 매칭이 되었으면 그 다음부터는 foods안의 urls.py를 봐달라는 것이다
-> foods 안의 urls.py로 가보자

urlpatterns = [
    path('index/', views.index)
]

-> 지금 넘어온 나머지 경로는 index인데 보면 'index/'라는 패턴이 있다 -> 딱 이곳에 매칭된다 그러면 여기서 시키는대로 하면 된다 -> views 모듈의 index를 가리키고 있다 -> views로 가보자

def index(request):
    return HttpResponse("<h2>Hello, Django!</h2>")
    
-> index라는 함수가 있다 domain/foods/index 는 결국 이 함수를 향해 간다 이 index 함수가 하는 일은 무엇일까?
파라미터로 request 즉 요청을 받고 HttpResponse 즉 응답을 리턴한다 지금은 h2 태그를 응답으로 주고 있다 그래서 브라우저에 이 주소를 치면 h2태그가 뜬다
해당 url로 가서 개발자 도구로 들어가 보면 실재로 h2 태그가 들어가는 것을 볼 수 있다

Django는 클라이언트-서버 구조에서 서버에 속합니다.
URL(Uniform Resource Locator)는 네트워크 상의 자원(Resource)의 위치를 나타내는 문자열 입니다. 그 중에서 Domain은 서버를 의미합니다.
서버는 웹 페이지 뿐만 아니라 이미지나 동영상등 여러가지 형태의 자원(Resource)를 클라이언트에게 제공할 수 있습니다.
urls.py는 클라이언트의 요청인 URL을 보고 알맞은 로직을 제공 하기 위해 계층적으로 구성됩니다. 
모든 URL에 대해 분기가 끝나면 알맞은 view를 호출하여 로직을 처리합니다.

----------------------------------------------------------------------------------------------------------------------------------------------

URL 작성

우리는 앞으로 많은 URL을 작성하게 될 겁니다. Django가 가지고 있는 철학 중 하나가 바로 'URL은 반드시 아름답게 작성되어야 한다'는 것인데요, 막상 작성하다보면 헷갈릴 수 있는 부분들이 있습니다. 이번 노트에서는 앞으로 여러분이 URL을 작성할 때 알아두면 좋을 내용들을 간단하게 살펴보겠습니다.

첫째. urls.py에 적는 URL 패턴은 슬래시( / )를 붙여서 작성합니다.

urlpatterns=[
    path('foods/', views.index),
    path('foods/banana/', views.fruit),
] 

URL 끝에 있는 슬래시를 트레일링 슬래시(traling slash)라고 하는데요, 우리가 평소에 구글에 접속하고자 할 때를 생각해보면 www.google.com 이라고 적죠? 그런데 www.google.com/ 이라고 적어도 같은 페이지로 이동하기 때문에 별다른 생각없이 사용해 왔을겁니다.

결론부터 말하면 codeit.kr 이나 google.com 같이 도메인 끝에 나오는 슬래시는 그 유무에 따른 차이가 없습니다. 하지만 도메인이 아닌 다른 url, 그러니까 codeit.kr/learn/courses/django-web-development과 같은 url에 대해서는 슬래시가 붙은 주소와 아닌 주소가 서로 다른 곳을 가리키는 주소가 됩니다. 위에 예시로 적은 코드로 말하면 'foods/' 와 'foods'가 서로 다르다는 거죠.

이와 같은 형태가 남아있는 이유는 과거에는 '파일'과 '디렉토리'를 구분하는 것이 중요했기 때문인데요. 슬래시가 붙은 주소는 '디렉토리'를 가리키고 슬래시가 없는 주소는 '파일'을 가리키도록 만들어 졌습니다. 그런데 오늘날에는 URL이 직접적으로 파일이나 디렉토리를 가리키지 않죠. URL로 직접 데이터에 접근하기 보다 대부분의 데이터는 데이터베이스에 저장해서 사용합니다.

자, 그러면 웹 사이트를 개발하는 입장에서는 슬래시 유무를 하나의 일정한 형식으로 맞춰줄 필요가 있겠죠? 그래서 Django는 기본적으로 트레일링 슬래시가 붙어 있지 않은 URL로 요청이 들어오면 먼저 해당 URL와 딱 맞는 URL 패턴이 있는지를 보고, 만약 없다면 슬래시를 붙인 URL로 다시 리디렉션 하는 설정이 기본적으로 되어있습니다. 그래서 우리가 URL 패턴을 작성할 때 트레일링 슬래시가 붙어있는 형태로 작성하는 것이 일정한 형식을 유지하는 측면에서 좋습니다. 그러면 슬래시가 안붙은 URL로 요청이 들어오더라도 자동으로 슬래시가 붙은 URL로 연결되기 때문입니다.

둘째. 다른 URL로 이동하기 위한 URL을 적을 때 앞에 슬래시(/)가 있으면 도메인으로 부터의 경로를 의미합니다. 예를 들어, 현재 codeit.kr/food/ 에 있다고 하고 아래의 이동하기 링크를 누르면

<a href="/banana/">이동하기</a>

codeit.kr/food/banana/가 아닌codeit.kr/banana/로 이동하게 됩니다.

셋째. 다른 URL로 이동하기 위한 URL을 적을 때 앞에 슬래시(/)가 없으면 현재 URL 뒤에 이동하는 URL이 연결된 경로가 됩니다.

예를 들어,  현재 codeit.kr/food/ 에 있다고 하고 아래의 이동하기 링크를 누르면

<a href="banana/">이동하기</a>

codeit.kr/food/banana/ 로 이동하게 되는거죠.

자, 앞으로 우리는 점점 더 많은 페이지들을 연결하는 작업을 하게 될 텐데요, 이번 노트에서 설명한 내용들을 참고해서 작성하면 조금 더 명확하게 여러분이 원하는 URL 구조를 작성할 수 있겠죠?

-----------------------------------------------------------------------------------------------------------------------------------------------------------

메인 페이지

지금 우리 서버를 실행하고 처음 들어가면 아래와 같은 페이지가 보이는데요, 마치 에러 페이지처럼 보이지만 사실 이 페이지가 에러가 난 것은 아닙니다. 지금 우리가 접속한 주소는 만약 여러분이 로컬 환경이라면 127.0.0.1:8000 , 코드잇 실행기에서 실행했다면 ip:port  주소로 접속했을 텐데요, 한 번 천천히 살펴보겠습니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=4566&directory=error_page.png&name=error_page.png

"Using the URLconf defined in costaurant.urls" 라고 보이죠? 그러니까 지금 보고 있는 이 페이지는 costaurant.urls에 명시 되어 있는 것을 보고 보여준 페이지 인데, "Django tried these URL patterns, in this order: 1. admin/  2. foods/ "  그리고 "The empty path didn't maych any of these".

Django가 열심히 찾아 봤는데 admin/ 과 foods/ 라는 URL은 찾을 수 있었지만 "The empty path"에 대해서는 매칭되는 URL 패턴을 찾을 수 없다고 하네요.

실제 costaurant 디렉토리 안의 urls.py 파일을 보면 이렇게 되어있습니다.

# costaurant/urls.py

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('foods/', include('foods.urls')),
]

admin/ 으로 들어오면 admin.site.urls를 보면 되고, foods/ 로 들어오면 foods 앱 안의 urls.py를 보도록 되어있는거죠. 그러면 우리가 지금 접속한 URL의 패턴은 무엇일까요? 바로 '' 즉 아무것도 없는 경로로 이 경로를 urlpatterns에 작성하면 이렇게 됩니다.

urlpatterns = [
        path('', include(' ... '),
    ...
]

지금 우리의 urls.py에는 이  '' 패턴에 대한 처리가 안되어 있기 때문에 'Page not found' 즉 해당 하는 웹 페이지를 찾을 수 없다라는 화면을 보여주는거죠. 그러니까 여기서 만약 아래처럼 적게되면

# costaurant/urls.py

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('foods.urls')),
]

그냥 ip와 port만 입력하고 들어갔을때 매칭되는 ''  패턴이 이제 foods앱의 urls.py를 보게됩니다.

자, 그럼 왜 이러한 '' 패턴, 그러니까 메인 페이지에 해당하는 경로를 적어주지 않았냐구요? 우리는 아직 이러한 Django의 URL 구조에 대해 익숙하지 않은 상태이기 때문에 각각의 앱 이름으로 된 URL 구조를 만들고 다시 그 아래에 하위 URL 구조를 계층적으로 작성하면서 구조적으로 URL 패턴을 작성하는 법을 학습하기 위함입니다.

만약 '' 경로에 대해 다른 페이지를 할당하고 싶다면 프로젝트 앱 아래의 urls.py에 이번 노트에서 배운 '' 경로를 추가해보세요.
------------------------------------------------------------------------------------------------------------------------------------------------------------

Django Template & Rendering

더 많은 HTML을 담아서 리턴하고 싶다면? -> 그냥 일단 html 코드를 많이 적어준다

ttpResponse('''<h1>Hello, Django!</h1>
               <h2>Hello, URL!</h2>
               <p>Let's Code</p>''')
-> 그런데 멋이 없고 깔끔하지도 않다 그리고 모든 html 코드를 넣는것은 views.py 파일을 더럽히는것 같다 그리고 사실 html 코드는 html 파일에 딱 넣어야 정리가 된다 그래서 '''  ''' 부분을 따로 파일로 빼는 작업을 해보자
쟝고에서는 html 같이 화면 구성을 담당하는 부분을 template 이라고 한다 지금은 foods 앱을 개발할고 있으니까 foods 앱 안에 template 들을 담을 디렉토리를 하나 만들자 -> foods 앱 디렉토리 안에 templates라는 디렉토리를 만든다
-> 생성한 templates 폴더 안에 새로운 디렉토리를 생성한다 -> 이번엔 앱이름을 그대로 사용해서 foods라고 짓는다 -> 이제 이 디렉토리 안에 html 파일을 생성해주면 된다 -> index.html 이라고 짓자
-> 이걸 다른 말로는 index template 이라고 할 수 있다 -> 그다음 원하는 html 코드는 마음껏 써라 -> 이제 이 템플릿을 유저에게 보여주면 된다 -> 템플릿을 유저에게 보여줄 수 있도록 변환 하는 것을 다은 표현으로 템플릿을 렌더한다고 한다 
-> views로 가서 html 코드를적었던 부분을 지우고 -> 그대신 render 함수를 써주고 첫번째 파라미터로 request 를 넘긴다 그리고 두번째 파라미터로는 우리가 원하는 템플릿의 경로를 써주어야한다
-> 방금 만든 index.html의 경로를 적는다 ->

def index(request):
   return render(request, 'foods/index.html')   #경로는 어떻게 설정된거지? templates 디렉토리는 생략하나?

-> 이 render 함수는 우리가 넘겨준 정보와 템플릿을 토대로 하나의 응답 즉 하나의 HttpResponse 객체를 만들어서 리턴해준다 -> 아까의 HttpResponse 대신 render 를 썼지만 결국에는 HttpResponse 객체를 리턴해준다
-> 서버를 다시 켜고 url를 쳐서 확인해보자



render( )

render( request, template_name, context=None, context_type=None, status=None, using=None )

render 함수는 인자로 주어진 템플릿을 사전형(dict) 인자인 context와 결합해서 렌더링을 거친 다음 HttpResponse 객체로 반환하는 함수입니다. 쉽게 말하면 인자로 넘겨주는 템플릿과 context 데이터를 합쳐서 HttpResponse 객체로 돌려주는 함수인 거죠.
필수 인자

이 중에서 필수인자는 request와 template_name 입니다.

    request에는 데이터를 요청한 요청 객체를 넘겨줍니다. 앞에서 함수형 view의 인자로 들어온 request를 render에 그대로 사용했었죠.

...
def view(request):
    return render(request, ...)
...

이 request를 넘겨주는 이유는 요청에 대한 정보에 접근해서 user, session 등 여러 가지 기능을 구현하기 위해서인  데 이 부분은 다른 토픽에서 함께 다루도록 하겠습니다. 지금은 아 request 객체가 필요하구나! 정도만 알아두면 됩니다.

    template_name은 렌더링에 사용할 대상 템플릿을 명시합니다.

선택 인자

다음으로 선택 인자를 보면

    context 는 템플릿에 추가할 값들이 들어 있는 사전형 인자로 기본값은 아무것도 없는 None입니다.
    content_type 은 결과로 만들어 내는 문서의 유형을 말하며 기본값은 'text/html' 즉 HTML 웹 페이지입니다.
    status 는 상태 코드(Status Code) 값이며 기본값은 200(성공)입니다. 상태 코드는 클라이언트의 요청이 성공적으로 처리되었는지에 대한 정보를 주는 코드인데 뒤에서 자세하게 다루도록 하겠습니다.
    using 은 템플릿을 렌더하는 템플릿 엔진을 지정할 수 있는 인자입니다. 원하는 경우 다른 템플릿 엔진을 사용하여 템플릿을 렌더링할 수 있습니다.

    더 자세히 알고 싶으신 분들은 아래 공식 문서를 참고하세요 :) render 공식문서 바로가기 https://docs.djangoproject.com/en/2.2/topics/http/shortcuts/#django.shortcuts.render

두 개의 render

사실 우리가 알고 있는 과정 중 'render'라고 불리는 과정은 두 가지가 있습니다. 우리가 Django Template Language를 써서 작성한 코드를 읽어서 일반적인 HTML 코드로 바꿔주는 과정도 rendering이라고 하고, 이 HTML 파일을 브라우저가 읽어서 우리가 실제로 보는 이쁜 웹 페이지로 바꿔주는 과정도 rendering이라고 합니다. 그러니까 서버에서 Django 코드를 render 해서 HTML 파일로 만들고 그 다음 웹 브라우저에서 HTML 파일을 render 해서 우리가 보는 웹페이지로 바꿔주는거죠. Django 강의에서 말하는 render는 대부분 Template Language를 사용한 Django 코드를 HTML로 바꿔주는 과정을 일컫기는 하지만 이 두 가지 과정 모두 render라는 것을 기억해주세요.
모르는 함수가 너무 많아요!

Django를 배우다 보면 정말 많은 함수가 나오죠? 앞으로 지금까지 배운 함수보다 더 많은 함수가 나올 텐데 새로운 함수를 접하면 어떻게 하는 게 좋을까요?

처음 접하는 함수를 사용할 때 함수 내부를 몰라도 사용할 수 있지만 그런 함수가 많아질수록 내가 작성하는 코드가 어떻게 동작하는지 파악하기가 어려워지고 필요할 때 내가 원하는 방향으로 수정해서 사용할 수 없게 됩니다.

모르는 함수가 나올 때 가장 좋은 방법은 바로 공식 문서를 보는 건데요, 내가 궁금한 함수를 문서에서 검색해서 찾은 다음 나와 있는 모두 이해할 필요 없이 한 번 함수를 훑어보는 것만으로도 큰 도움이 됩니다. 그리고 필요하다면 함수의 숨겨진 인자가 무엇인지, 우리가 넘겨주는 값은 어떤 인자로 들어가게 되는지, 어떤 로직으로 동작하는지, 반환 값은 무엇인지 등을 파악하게 되면 함수에 대한 막연한 두려움이 사라지고 코드를 작성할 때 조금 더 빠르고 정확하게 작성할 수 있습니다.


* 템플릿 언어란? https://dalpaeng00.tistory.com/32


-------------------------------------------------------------------------------------------------------------------------------------------

Django의 MVT 구조

쟝고에는 세가지 가장 중요한 개념이 있다 -> Model, View 그리고 Template
이 세계를 줄여서 MVT 또는 MVT 구조(아키텍처)라고 한다

Model
-장고의 데이터 구조를 담당/생성
-정의된 데이터 구조를 이용해서 데이터베이스와 소통
ex) 수강신청 사이트를 만든다고 해보자 -> 강의에 대한 정보도 있어야되고 사용자인 학생에대한 정보도 있어야한다 -> 데이터 베이스에 강의와 학생의 정보를 담당하는 테이블을 각각 따로 만든다
-> 강의 테이블에는 강의명 강의코드 교수명 강의요일 학생 테이블에는 이름 학과 학번등을 저장한다 -> 이러한 정보를 저장할거라는것을 모델에 정의해두면 장고는 정의된 데이터 구조에 따라 데이터베이스와 소통하며
-> 데이터를 쓰고 (Create) 읽고 (Read) 수정하고 (Update) 삭제하게 (Delete) 된다...CRUD!

Template
-우리 웹사이트의 화면 구성을 담당 
-단순하게는 HTML CSS JavaScript를 이용해서 유저가 보는 화면을 구성하는 건데 장고의 템플릿은 여기서 끝이 아님 -> 장고의 템플릿에는 템플릿 랭귀지 라는 것이 있다 이걸 쓰면 매번 변한 데이터에 따라 매번 바뀌는
동적인 화면을 구성할 수 있다
ex) 유투브 같은 영상 스트리밍 페이지를 만든다고 가정해보자 -> 어떤 영상을 봐도 기본적인 틀은 비슷 -> 영상이 바뀌고 영상에 따라 제목이나 설명글이 바뀌는 등 세부 내용만 바뀌 뿐 기본적인 틀은 비슷하다
-> 템플릿 랭귀지를 사용하면 이런식으로 변하는 세부 내용들을 동적으로 채워 넣을 수 있다 -> 그래서 장고 템플릿을 기본적인 틀은 우리가 html로 작성하고 세부내용은 템플릿 랭귀지를 사용해 구현하게 된다

View
-웹사이트의 로직을 담당
-Model과 Template 사이를 연결한다 -> 요청이 들어오면 그 요청을 처리해서 응답해준다
ex) 간단한 응답으로는 요청이 들어왔을 때 템플릿을 바로 렌더링해서 응답(html)할 수 있고 조금 더 복잡하게는 요청이 들어왔을 떄 Model을 통해서 필요한 정보를 가져온 다음 가져온 데이터를 알맞게 처리하고
그 처리된 데이터를 템플릿에 보내서 필요한 화면을 렌더링해 만들어진 html코드로 응답할 수 있다 -> Model과 Template 사이에서 컨트롤하는 역할이다



