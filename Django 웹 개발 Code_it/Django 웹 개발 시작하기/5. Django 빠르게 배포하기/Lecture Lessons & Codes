Django를 배포할 수 있는 두가지 방법

배포는 내가 만든 웹사이트를 인터넷에 올려 모든 사람이 볼 수 있게 하는것이다 크게 두가지 방법이 있다

여기서 잠깐 서버도 결국 실재로 존재하는 컴퓨터이다 서버는 잘 꺼지지 않고 안정성이 높은 컴퓨터이다 이렇게 서버로 사용할 컴퓨터를 일반 사람들이 구축하고 관리하기 어려우니
업체가 서버를 제공하고 일반인들은 해당 서버를 네트워크르 이용해서 사용한다 이러한 것을 우리는 클라우드 서비스라고 말한다 그 중에서 서버를 위한 클라우드 서비스는 크게 두 종류가 있는데
IaaS와 PaaS 라고 한다

이 두 서비스의 차이점은 개발자가 서비스의 어디까지 설정해서 사용할 수 있는가이다 

IaaS (Infrastructure as a Service)

먼저 IaaS는 서버 장비만 빌려서 사용하는 방식이다 업체에서는 장비에 개발자가 선택한 운영체재만 설치해서 네트워크로 제공해주고 개발자는 제공받은 클라우드 서버에 필요한 모든 프로그램을 직접 설치하고
설정해서 사용해야 한다 보다 많은 부분을 직접 해줘야해서 구축하는 과정이 조금 까다롭지만 필요한 최적의 환경 구축이 가능하다 대표적인 서비스로는 아마존의 AWS EC2

PaaS (Platform as a Service)

PaaS는 서버 장비와 운영체재 그리고 개발자가 선택한 각종 실행 환경과 개발 설정 까지 모두 갖춰져있는 서버를 빌려 사용하는 방식으로 개발자가 서버 구축보다 개발에 더 집중할 수 있다
대표적인 서비스로는 아마존의 AWS Elastic Beanstalk, Google App Engine, HEROKU 등이 있다

우리는 여기서 PaaS를 이용해 배포하는 방법을 배워볼것이다 여러 PaaS 중에서도 파이썬 애플리케이션 배포에 특화된 서비스인 pythonanywhere을 사용해보자 (파이썬 앱에 특화됨)
그리고 장고가 많이 익숙해진 뒤 별도의 토픽으로 IaaS를 이용해 필요한 것들을 하나하나 설정한 다음 배포하는 심화 과정도 배워보도록 하자

-------------------------------------------------------------------------------------------------------------------------------

웹사이트에 배포가 개발만큼 까다롭다는 말이 있다 그만큼 여러가지 작업이 필요한데 이번에는 배포하기 전에 Django프로젝트에서 준바해야할 세가지 사항에 대해 배워보자

VSCode 를 실행하고 제일 먼저 debug 모드를 끄자 

디버그 모드가 하는 중요한 기능 중 하나는 에러가 났을 때 자세한 에러 페이지를 표시하는 것인데 예를 들어 서버를 켜고 잠깐 에러를 내기 위해서 우리 프로젝트의 index 템플릿의 이름을 임의로 바꿔보면
개발서버에서 새로 고침을 해봤을 때 많은 정보를 가지고 있는 에러페이지가 나온다 장고의 버전이 무엇인지 파이썬 버전이 무엇인지 그리고 우리 웹사이트가 어떤 디렉토리 구조를 가지는지 구성 옵션이 어떻게 되는지 등등 정보가 나온다
이러한 정보들은 혹시나 우리 사이트를 공격하려는 많은 정보를 제공하고 웹사이트의 민감한 정보가 유출된 우려가 있다 장고에서 자체적으로 보안에 관련된 단어가 있으면 걸러주긴 하지만 배포시에는 꼭 디버그 모드를 끄도록 하자

* 장고에서 자체적으로 제외해주는 단어
API KEY PASS SECRET SIGNATURE TOKEN

장고 공식문서에도 디버그 모드가 켜 있는 상태로 배포하지 말라그런다

자 이제 바로 꺼주도록 하자 프로젝트 앱을 가서 settings.py 로 간다 그리고 내려가서 DEBUG를 True에서 False 로 바꿔준다

디버그 모드를 껐으면 두번째로 해야될 일은 ALLOWED_HOSTS를 설정해줘야한다 이름 그대로 우리가 허용한 호스트를 적어주는것이다
호스트란 간단히 말해서 우리의 장고 프로젝트를 제공하는 컴퓨터인데 배포할 때 사용할 주소를 이곳에 적어서 해당 서버가 우리 웹사이트를 서비스할 수 있게 하는 것이다
지금처럼 이렇게 아무것도 안적혀 있으면 로컬 호스트 즉 우리 컴퓨터에서만 접속할 수 있는 환경이 된다
따라서 적어주자 우리는 pythonanwhere 을 사용할거니까 문자열로 '.pythonanywhere.com'을 입력한다 -> 맨 앞에 .을 꼭 입력해야한다 이유는 나중에 배포하려는 사람들 각각의 
id.pythonanywhere.com으로 접속하기 때문이다

마지막 세번째로 할 일은 정적파일을 한곳에 모아주는 것이다 배포서버에서는 웹사이트에 필요한 모든 정적 파일을 하나의 위치에서 찾게되기 때문이다
샌드위치 구조가 기억나나? 배포시 하나로 모을 때 파일 이름이 중복되지 않게하기 위함이다 자 이제 정적파일들을 한곳에 모아보자 settings.py 맨 아래쪽을 보면 STATIC_URL 이라는것이 있다 그 아래 쪽에 배포 서버가
정적 파일을 찾을 수 있도록 경로를 적어줘야한다
(STATIC_URL은 웹에서 정적파일에 대한 URL을 할당할 떄 사용할 최상위 URL이며 실재로 존재하는 디렉토리가 아닌 URL을 만들기 위한 부분이다)

따라 적어보자 STATIC_URL = '/static/' 아래에 적는다 
STATIC_ROOT = os.path.join(BASE_DIR, 'static')   -> STATIC_ROOT는 실재 정적파일이 모아지는 경로이며 장고 프로젝트에 사용하는 모든 정적파일이 이 경로에 복사된다

한마디로 base 아래 static이란 디렉토리를 두고 그곳에 모든 정적파일을 모아두겠다고 명시해준것이다

자 설정을 다 했으니 이제 모든 정적파일을 한곳에 모아볼까? 여기서 일일이 우리가 모을 필요 없이 우리가 지정한 경로로 모아주는 과정을 장고가 명령어로 지원해준다 따라서 입력해보자

터미널 -> 프로젝트 루트 -> 입력하라 python3 manage.py collectstatic -> 결과 149 static files copied to '/Users/jutlo/code_it_django/costaurant/static'.

실재 디렉토리로 가보자 프로젝트 루트에 static이란 디렉토리가 생기고 앱별로 각각의 폴더로 이쁘게 정리되어있다 바로 우리가 샌드위치 구조로 만들어줬기 때문이다 그리고 static 아래 있는 admin은 
장고에서 기본적으로 제공하는 관리자앱에대한 정적파일이다 

자 이제 모든 준비가 끝났다
-----------------------------------------------------------------------------------------------------------------------------------------
STATIC_URL 은 예를 들어 index.html 에서 {% static "~" % } 이런 식으로 쓰게 될 때 참조되는 경로입니당.

실제로 존재하는 디렉토리가 아닌 << 요 대목을 저도 무슨 의미에서 쓰셨는지 쪼금 헷갈리는뎅

  

제 생각엔 예를 들어 정적파일들이 실제 디렉토리 내 /static 디렉토리 하위에 있지만,

settings.py 에서 STATIC_URL이 /static/ 이 아니라 /staticdirs/ 라고 하더라도

개발서버를 띄었을 때 localhost/static/~~.css 이런식으로 접근해서 css 파일이 읽어졌다면

위와 같이 /staticdirs/ 로 바꿔도 localhost/staticdirs/~~.css 로 접근이 됩니당.

즉 실제 디렉토리명과 관계없이 url에만 쓰인다는 의미로 쓰신 것 같아용
-----------------------------------------------------------------------------------------------------------------------------
PythonAnywhere로 배포하기

가장 먼저 우리 프로젝트 디렉토리를 압축해야한다 프로젝트 루트 디렉토리를 zip 파일로 압축하면 된다 그리고 바탕화면으로 빼두고 그리고 pythonanywhere 홈페이지로 접속하자 https://www.pythonanywhere.com/
그리고 상단의 sign up 을 누르고 create a beginner account 를 누른다 그리고 계정을 만들어주자 다 끝내면 Dashboard가 나온다
자 그러면 오른쪽 상단의 Files를 누르고 Upload를 선택해서 압축해논 파일을 올린다 업로드가 끝났다면 Open Bash console here 을 눌러 콘솔창을 열어준다
ls를 입력해준다 업로드한 파일이 보인다 이제 이 파일을 압축해제하자 -> unzip costaurant.zip  을 입력해주자 -> 압축해제 완료! 다시 ls를 하면 프로젝트 디렉토리가 보인다

그럼 이제 이 서버에서도 파이썬 가장 환경을 만들어주자 home 디렉토리에다가 만들자
자 입력해라 -> virtualenv --python=python3.8.5 django-envs   (나는 로컬에서 작업할 떄 파이썬 3.8.8을 사용했는데 이 콘솔에는 3.8.5가 깔려 있다 해서 그냥 3.8.5로 했다, 3.8로만 처도 된다 )
이러면 이제 가상환경이 생성되었다 이제 가상환경을 적용해보자 홈디렉토리에서 ls를 하면 우리가 생성한 가상환경 디렉토리가 보인다 글로 이동하자
그리고 입력하자 -> source bin/activate  
그리고 라인 맨 왼쪽을 보면 -> (django-envs) 21:57 ~/django-envs $   -> 이렇게 맨 왼쪽에 적용된 가상환경이 표기된다
자 이제 가상환경이 적용되었으니 장고를 깔아보자 -> pip install django==2.2
자 이제 설치가 되었다면 오른쪽 상단을 눌러 Web으로 가자 -> Add a new web app 클릭 -> next -> Select a Python Web Framework 에는 Manual Configuration 선택 -> 3.8 선택 내가 3.8로 했으니까~
-> 그리고 next -> 생성되었다면 이제 내려가서 Code: 부분을 수정하자 이 소스코드 부분을 보면 우리 코드가 있는 경로를 입력하라고 되어있다 home/id/프로젝트명 이렇게 입력하라 되있는데 그래서 나는 home/jutlo/costaurant 이라고 입력
-> 다 됬으면 이제 WSGI 를 설정해주자 WSGI 는 파이썬이 웹서버와 통신하기 위한 일종의 약속이다 여길 클릭하면 나오는 코드에서 19줄 부터 47번 줄 까지 드래그해서 코멘트 처리하자

# HELLO_WORLD = """<html>
# <head>
#     <title>PythonAnywhere hosted web application</title>
# </head>
# <body>
# <h1>Hello, World!</h1>
# <p>
#     This is the default welcome page for a
#     <a href="https://www.pythonanywhere.com/">PythonAnywhere</a>
#     hosted web application.
# </p>
# <p>
#     Find out more about how to configure your own web application
#     by visiting the <a href="https://www.pythonanywhere.com/web_app_setup/">web app setup</a> page
# </p>
# </body>
# </html>"""


# def application(environ, start_response):
#     if environ.get('PATH_INFO') == '/':
#         status = '200 OK'
#         content = HELLO_WORLD
#     else:
#         status = '404 NOT FOUND'
#         content = 'Page not found.'
#     response_headers = [('Content-Type', 'text/html'), ('Content-Length', str(len(content)))]
#     start_response(status, response_headers)
#     yield content.encode('utf8')

-> 그 다음 밑으로 내리면 장고 부분이 있다 76번 줄 부터 89번 줄 까지 코멘트 해제한다

import os
import sys

# assuming your django settings file is at '/home/jutlo/mysite/mysite/settings.py'
# and your manage.py is is at '/home/jutlo/mysite/manage.py'
path = '/home/jutlo/mysite'
if path not in sys.path:
    sys.path.append(path)

os.environ['DJANGO_SETTINGS_MODULE'] = 'mysite.settings'

# then:
from django.core.wsgi import get_wsgi_application
application = get_wsgi_application()

-> 그리고  path = '/home/jutlo/mysite'  이 부분에서 mysite를 우리 프로젝트인 costaurant 으로 바꾸자
-> os.environ['DJANGO_SETTINGS_MODULE'] = 'mysite.settings' 여기도 mysite를 costaurant 으로 바꾼다
-> 모두 끝났으면 save를 누르고 오른쪽 상단을 눌러 다시 Web으로 가자 -> 스크롤을 내려서 이번엔 Virtualenv 부분을 설정하자 우리가 만들어준 디렉토리를 넣으면 된다
-> /home/jutlo/django-envs 를 입력 -> 그리고 밑으로 내려가 Static으로 가자 정적 파일의 경로를 적어줘야한다 URL 밑에는 /static/을 Directory 밑에는 실재 경로를 적어주자
-> /home/jutlo/costaurant/static 입력 -> 이렇게하면 모든 설정이 끝났다 맨 위로 올라가서 reload를 누른다 -> jutlo.pythonanywhere.com  이부분 복사해서 /foods/menu 에서 브라우저에 처보저 -> 배포완료!


