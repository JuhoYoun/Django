Django Framework
* 웹 개발을 하는데 있어서의 뼈대, 틀
* 어떤 웹사이트를 만들던 공통의 요소들이 있어 매번 뼈대부터 만들기 보단 틀을 사용하는것이 빠르다

프론트엔드는 웹사이트의 얼굴이다. 화면 요소를 어떻게 배치하고 구조화할것인지를 정한다. 예전에는 프론트엔드 개발이 단순했지만 요즘은 더 복잡해져 리액트 앵귤러 뷰 같은 프론트엔드 프레임이 잘 쓰인다

백엔드는 뒤에서 웹서비스의 동작과 논리적 처리를 담당한다

* Django 는 백엔드 프레임 워크인지 프론트엔드 프레임 워크인지 딱 잘라 말하기 어렵다
* Django에는 데이터베이스를 쉽게 이용하는 기능과 그 외 수 많은 백엔드 기능을 제공한다
* 하지만 백엔드에서 프론트엔드로 데이터를 넘겨주고 그 데이터를 프론트엔드에서 사용하는것 까지 Django에서 구현 가능하다 -> FULL STACK 프레임워크다!
* 하지만 Django의 프론트엔드 기능은 처음 만들어진 2003년 기준 거의 그대로라서 개발자들은 거의 백엔드 프레임워크로 사용하고 프론트엔드 프레임으로 다른 프레임워크를 사용해서 Django 백엔드와 소통한다

Django 개발 환경
* Python 사용
* 텍스트 에디터로 MS visual studio code 사용 (windows) -> 코드 오픈 작성 수정이 가능한 개발용 메모장
* 가상 환경 -> 하나의 독립된 공간 -> 예를들어 프로젝트 A는 Python 2.7 Django 1.1 을 사용하는 반면 프로젝트 B는 Python 3.7 Django 2.2를 사용한다면 가상환경이 없다면 두 프로젝트를 모두 관리 할 때 항상 소프트웨어를 재설치해야한다 
-> 이런 불편함을 없애기 위해 각각의 프로젝트의 개발환경을 독립적으로 만들어 관리하는 것이 가상 환경이다 -> pyenv를 이용하요 파이썬 버전 관리 및 설치를 하고 pyenv-virtualenv를 이용하요 가상환경을 구성 및 파이썬 패키지 관리를 한다 
* Windows 사용자는 위와 같은 환경을 구성하는데 있어서 WSL (Windows Subsystem for Linux)를 사용한다 -> WSL 은 MS 내놓은 Windows 확장 프로그램으로 Linux Terminal을 Windows애서 사용할 수 있게 해주는 프로그램이다 -> MacOS와 비슷한 환경을 Windows애서 만들 수 있다 
-> WSL 환경을 구축하게 되면 무거운 다른 가상환경을 제공하는 프로그램 없이 윈도우에서 맥처럼 리눅스를 이용해 개발할 수 있다
* Homebrew -> macOS의 패키지 관리 프로그램 (pyenv와 pyenv-virtualenv 모두 homebrew로 설치가능), 패키지 설치부터 제거까지 간편하다
* 이 수업에서는 Django 2.2 가 사용된다 -> 2022년까지 꾸준히 업데이트 및 버그 수정이 되는 버전이다

Django 개발 환경 구성하기 (MaxOS)

1. VSCode 텍스트 에디터
2. Homebrew 프로그램 설치/관리
* pyenv 파이썬 설치/관리  -> 파이썬 설치 3.7.7 버전
* pyenv-virtualenv 파이썬 가상환경 관리 -> 가상환경 만든 후 pyenv로 설치한 파이썬을 적용하고 쟝고를 설치한다 (python 3.7.7 / django 2.2 )

VSCode
* 내가 원하는 경로에서 바로 VSCode를 열 수 있도록 설정 -> command + shift + p (명령 팔레트) -> 검색창에 shell command 입력 -> install -> 이제 터미널을 열고 디렉토리를 만들어보자
-> mkdir code_it_django -> cd code_it_django -> 해당 디렉토리로 갔으면 code . 을 입력한다 -> code_it_django 위치에서 VSCode가 실행된다 이렇게 하지 않으면 매번 코드를 편집할 디렉토리를 지정해주어야한다

Homebrew
-> 다운 받는 법은 Linux 수업 참조
brew --version -> 현재 버전 알려준다
brew install pyenv -> pyenv 설치
brew install pyenv-virtualenv -> virtualenv 설치
-> 설치가 다 되었다면 시스템 환경설정(System Preference)으로 들어간 후 Users & Groups -> 자물쇠를 풀어준다 -> 현재 사용자로 가서 고급옵션(Advanced Options) -> login shell을 확인한다
-> login shell 은 터미널에서 기본적으로 어떤 쉘을 사용하는지 보여준다

-> bash일 경우와 zsh 일 경우 나눠서 다음과 같이 해준다

| 홈 디렉토리로 이동하기

아래 명령어는 홈 디렉토리(~)에서 실행해야 합니다.

cd ~

| pyenv 설정하기 for bash

echo 'eval export PATH="$HOME/.pyenv/bin:$PATH"' >> .bash_profile
echo 'eval "$(pyenv init -)"' >> .bash_profile
echo 'eval "$(pyenv virtualenv-init -)"' >> .bash_profile

| pyenv 설정하기 for zsh

echo 'eval export PATH="$HOME/.pyenv/bin:$PATH"' >> .zshrc
echo 'eval "$(pyenv init -)"' >> .zshrc
echo 'eval "$(pyenv virtualenv-init  -)"' >> .zshrc

-------------------------------------------------------------------------------------------------------
움.. 이건 django 에서 다룰 내용이 아니긴한데, 나중에 쉘 명령어 같은 걸 공부하실 기회가 있다면

배우셔도 좋을 거에용^^

  

간단하게만 설명드리면,

echo 는 쉘에서 출력하기 위함인데 >> file 명을 쓰게 되면 그 출력이 파일에 추가가 됩니다.

eval 은 뒤에 어떤 인자를 쉘 명령어로 쓰기 위해 사용합니다. eval 뒤에 인자들이 실행할 문자열로 결합되서 쉘에서 실행되는거죵.

$(pyenv init -) 이나 $(pyenv virtualenv-init -) 같은건 pyenv 와 virtualenv 를 초기화하는 과정입니다.

  

$(command)

  

요거는 command substitution 이라고 하는데 command 실행 결과를 문자열로 대체시켜 줍니당

나중에 관심있으시면 https://wiki.kldp.org/HOWTO/html/Adv-Bash-Scr-HOWTO/commandsub.html 를 아주 가볍게만 참고해주세용. 

  

마지막으로 export PATH 는 환경변수를 등록하는 과정입니다. 

http://jinyongjeong.github.io/2016/06/06/bash_shell_environment_variable/ 를 같이 참고해보세용~!

------------------------------------------------------------------------------------------------------------------


가상 환경 구성 & 쟝고 설치하기

pyenv 이용해서 파이썬 설치
-> pyenv install --list -> 설치가능한 파이썬 버전 리스트가 엄청 많이 나온다 꼭 하나면 다운 받을 필요는 없고 여러개 다운 받아서 마음대로 바꿔 쓸 수 있다 
-> 3.7.7 버전과 3.8.2 둘 다 설치해보자 
-> pyenv install 3.7.7 -> 3.7.7 버전 설치
-> pyenv install 3.8.2 -> 3.8.2 버전 설치
-> pyenv versions -> 설치되 있는 버전들 보여준다 

*내가 할 때는 Big Sur 를 써서 그런지 해당버전들 설치가 안되서 3.8.8 과 3.9.0 으로 하겠다

가상환경 생성
-> pyenv virtualenv 3.7.7 django-envs (버전과 가상 환경의 이름)
-> pyenv versions -> 생성된 가상 환경을 볼 수 있다
* system (set by /Users/jutlo/.pyenv/version)
  3.8.8
  3.8.8/envs/django-envs (추가됨)
  3.9.0
  django-envs (추가됨)

가상환경 삭제
-> pyenv uninstall django-envs (virtualenv 안써도 되넹)

Global 가상 환경 vs Local 가상 환경

Global 가상환경
- 시스템 전역에 적용하는 환경
- global 가상환경을 적용하면 따로 지정하지 않아도 기본적으로 global 환경 사용

Local 가상환경
- 특정 디렉토리 내부에서만 적용되는 환경
- global 환경이 지정되어 있더라도 local 환경이 적용됨 (해당 디렉토리의 하위 디렉토리에도 자동으로 local 환경이 적용된다)

global 가상환경 설정
-> pyenv global 3.8.8 -> 컴퓨터 전역에 파이썬 3.8.8 적용
-> pyenv versions
  system
* 3.8.8 (set by /Users/jutlo/.pyenv/version)  -> global로 지정된 파이썬 버전
  3.8.8/envs/django-envs
  3.9.0
  django-envs
  
local 가상환경 설정
-> 가상환경을 설정하고 싶은 디렉토리로 이동
-> pyenv version -> 현재 적용되있는 환경만 따로 볼 수 있다 -> 따로 지정해두지 않아도 global 환경에 적용된 것이 보인다
-> pyenv local django-envs (local 환경 설정)
-> pyenv version -> 적용되어 있는 환경이 바뀌었다 
-> 상위 디렉터리로 이동 -> 해당 디렉토리의 환경은 여전히 global 이다

Django 설치
* code_it_django 디렉토리 안에 설치하는 것이 아니라 가상 환경 안에 설치한다 -> django-envs
* pip 설치하는 법 : https://howchoo.com/python/install-pip-python#install-pip-on-macos  (내 컴퓨터에는 pip이 설치되어 있지 않은거 같다 아마 homebrew로 파이썬을 설치하지 않아서일까)
-> code_it_django 디렉토리로 이동 -> pip3 install django==2.2 (강의에서는 pip을 썼는데 나는 pip이 안되서 pip3을 썼다) -> 가상 환경에 쟝고 설치
-> django-admin --version -> 2.2 (2.2 버전이 설치된것이 보인다)
-> pip list (나는 pip 이 안되서 pip3로 했다) -> 설치되 있는 파이썬 패키지와 버전을 볼 수 있다 
Package    Version
---------- -------
Django     2.2
pip        21.2.3
pytz       2021.3
setuptools 57.4.0
sqlparse   0.4.2

-> django와 django 가 필요로하는 몇가지 패키지가 설치되어있다
-> cd .. (상위 디렉토리로 이동) -> pip list
Package    Version
---------- -------
pip        21.2.3
setuptools 57.4.0
-> global 환경 이기 때문에 이렇게 나와야한다 근데 내가 해보니 상위 폴더에도 django 랑 기타 패키지가 설치되있네?

* pip은 안되지만 pip3은 된다? https://apple.stackexchange.com/questions/371929/why-do-i-only-have-pip3-but-no-pip

* 개발환경 구성 꿀팁 (windows) 이건 나중에 하자! 



VSCode 더 편하게 사용하기

01. Visual Studio Code

Visual Studio Code(VSCode)는 Microsoft에서 오픈 소스로 개발하고 있는 텍스트 에디터로 Windows는 물론이고 macOS, Linux에서도 사용할 수 있는 멀티플랫폼 프로그램 입니다. 오픈 소스이므로 무료로 사용이 가능하며 Microsoft가 주도적으로 개발, 관리 하고 있는 에디터인 만큼 완성도 면에서 큰 인기를 얻고 있는 텍스트 에디터 입니다.
02. 확장프로그램(Extension)

이런 VSCode를 더욱 편리하고 사용할 수 있게 해주는 것이 바로 확장프로그램(Extension) 입니다. 확장프로그램은 VSCode에 여러 가지 기능을 더해주는 역할을 하는데 Microsoft에서 배포하는 확장프로그램부터 전 세계의 수많은 개발자들이 직접 만든 확장프로그램까지 매우 다양한 종류가 있습니다. 개발자들이 사용하는 대부분의 언어나 프레임워크를 위한 확장 프로그램들이 있으며 이러한 확장프로그램을 설치하는 것은 선택이 아니라 필수라고 말하고 싶네요.
2.1. 확장프로그램(Extension) 검색 및 설치

VSCode에서 확장프로그램을 설치하기 위해서는 왼쪽의 Extension 아이콘을 누르고

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3629&directory=1.png&name=1.png

검색창에 내가 원하는 확장프로그램의 이름을 검색 합니다. 보통 사용하고자 하는 언어 또는 프레임워크를 입력해서 관련된 확장 프로그램 목록을 보거나 바로 해당 확장 프로그램을 검색해서 사용합니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3629&directory=2.png&name=2.png

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3629&directory=Untitled.png&name=Untitled.png

그리고 원하는 확장프로그램을 선택한 후 오른쪽의 Install을 눌러서 설치 합니다. 한 가지 팁은 확장프로그램 목록의 정렬순서는 많이 다운로드한 순서대로 나오므로 많은 사람들이 사용해본 위에서부터 눌러 보면서 해당 확장 프로그램의 설명을 본 다음 선택하는 것이 좋습니다.
2.2. Django를 위한 확장프로그램 설치하기
Python Extension

Microsoft에서 배포한 파이썬 확장프로그램으로 파이썬 문법에 맞는 하이라이팅과 자동 완성을 지원합니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3629&directory=Untitled%201.png&name=Untitled+1.png
Django Extension

Django의 템플릿을 작성할 때 템플릿 언어에 맞는 하이라이팅과 자동 완성을 지원합니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3629&directory=Untitled%202.png&name=Untitled+2.png
vscode-icons

VSCode 왼쪽 트리 구조의 파일들을 각 언어 맞는 이쁜 아이콘으로 바꿔주는 확장 프로그램 입니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3629&directory=Untitled%203.png&name=Untitled+3.png
2.3. 이 밖의 재미있는 확장프로그램
indent-rainbow

들여쓰기가 어디서부터 어디까지 얼마나 되어 있는지 보기 불편하다면? indent-rainbow를 설치해보세요. 들여쓰기를여러 가지 색으로 구분 지어 알아보기 쉽게 만들어 줍니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3629&directory=Untitled%204.png&name=Untitled+4.png
Bracket Pair Colorizer 2

수많은 괄호 속에서 지금 닫는 이 괄호의 짝이 어디 있는지 찾기 힘들다구요? Bracket Pair Colorizer를 설치해보세요.짝이 맞는 괄호를 색별로 구분 해줍니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3629&directory=Untitled%205.png&name=Untitled+5.png

이밖에도 멋진 확장프로그램이 정말 많이 있으며 파이썬 뿐만 아니라 C, C++, JAVA,  HTML, CSS, JS 
또는 통계 프로그래밍 언어인 R이나 데이터베이스 SQL 등 거의 모든 언어와 프레임워크에 관한 확장프로그램이 있습니다. 내게 맞는 확장 프로그램을 설치해서 VSCode를 더욱 편리하게 사용 해보세요.
03. VSCode에서 파이썬 버전 선택하기

우리는 앞에서 여러 개의 파이썬 가상 환경을 구성 했죠? 그런데 그렇게 많은 가상 환경 중에서 VSCode는 어떤 파이썬 환경을 사용해야 할지 모르기 때문에 사용할 파이썬 환경을 설정 해주는 것이 필요합니다. VSCode에서 현재 사용하는 파이썬 환경에 따라 자동 완성, 패키지 임포트 등의 동작에 영향을 미칩니다.

아무것도 설정하지 않은 상태에서 파이썬 파일을 열고 왼쪽 아래를 보면 기본적으로 현재 컴퓨터에 설정 되어 있는 Global 파이썬 환경이 적용됩니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3629&directory=3.png&name=3.png

이렇게 사용하고 있는 파이썬 환경을 변경하기 위해서 Windows를 사용하고 있다면 Control + p 를 macOS를 사용하고 있다면 Command + p를 눌러서 명령 팔레트를 실행 합니다. 명령 팔레트는 VSCode에서 에디터 명령, 파일 열기, 확장 패키지 명령등 다양한 커맨드들을 사용할 수 있는 공간입니다.

검색 창에 'python' 이라고 검색하고Python: Select Interpreter를 선택 한 다음 원하는 파이썬 환경을 선택해서 사용할 환경을 변경 할 수 있습니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3629&directory=4.png&name=4.png

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3629&directory=5.png&name=5.png

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3629&directory=6.png&name=6.png




커맨드 라인 추가 설정하기
커맨드 라인을 꼭 더 이쁘게 써야 하나요?

그렇지 않습니다. 이전 강의에서 개발 환경 구성을 모두 마쳤다면 아래 내용은 온전히 '선택'의 영역입니다. macOS와 WSL의 기본 커맨드 라인 유틸리티는 기본적으로 검정 바탕에 흰색 글자 인데 추가적인 설정을 통해서 가독성을 높이고 더 편리하게 사용할 수 있습니다. 아래 설치 과정 중 특별한 구분이 없으면 Windows(WSL), macOS 모두 호환됩니다.
01. Zsh Shell

Shell은 운영체제와 커널(Kernel)사이를 연결해주는 역할을 하는 프로그램으로 사용자의 명령어를 해석해서 운영체제가 동작할 수 있도록 합니다. 이러한 Shell이 여러 종류가 있는데 그 중에서 거의 모든 운영체제가 기본으로 선택하는 것이 Bash Shell 이고 Bash Shell의 기능을 대부분 가지고 있으면서 더 많은 기능이 포함된 것이 바로 Zsh Shell입니다.
1.1 Shell 확인하기

맨 처음 WSL에 우분투(Ubuntu)를 설치하면 기본적으로 Bash Shell이 설치되어 있고 만약 macOS라면 10.15 이전 버전은 Bash Shell이, 그 이상 버전이라면 Zsh Shell이 기본적으로 설치되어 있습니다. 아래 명령어를 입력하면 현재 사용 중인 Shell을 확인할 수 있습니다. 현재 Zsh Shell을 사용하고 있다면 바로 02. Oh-My-Zsh 설정으로 넘어가 주세요.

echo $SHELL

1.2 Zsh Shell 설치하기 for WSL Ubuntu

아래 명령어를 입력해서 zsh를 설치합니다.

sudo apt-get install zsh

여기에서 'y'를 입력해서 진행합니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3632&directory=Untitled.png&name=Untitled.png

설치가 끝났다면 기본 shell을 zsh로 변경합니다.

chsh -s `which zsh`

WSL을 재실행 하면 아래와 같은 화면을 볼 수 있는데 0을 눌러서 진행합니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3632&directory=Untitled%201.png&name=Untitled+1.png

다시 WSL을 재실행하고 사용 중인 Shell을 확인해보면 zsh shell로 변경된 것을 확인할 수 있습니다.

echo $SHELL

1.3 Zsh Shell 설치하기 for macOS

앞서 환경 설정 할때 homebrew를 이용했었죠? zsh도 homebrew를 이용해서 쉽게 설치할 수 있습니다.

brew install zsh   
-> The default interactive shell is now zsh.
To update your account to use zsh, please run `chsh -s /bin/zsh`.  -> now shell is changed to zsh!


02. Oh-My-Zsh

Oh My Zsh는 Zsh의 여러가지 설정을 다루는 플러그인으로 Zsh를 더 쉽고 편하게 사용할 수 있게 해줍니다. 아래 명령어를 입력해서 설치합니다. 이때 macOS라면 기본 Shell을 zsh shell로 변경하기 위해 사용자의 비밀번호를 물어보는 과정이 추가 됩니다.

sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

모든 설치가 끝나면 이렇게 이전과는 다른 조금 더 이쁜 커맨드 라인 화면을 볼 수 있습니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3632&directory=Untitled%202.png&name=Untitled+2.png


03. Zsh 테마 변경 및 설정
3.1 테마 변경하기

이번에는 zsh에 테마를 입혀서 조금 더 가시성이 좋게 만들어 볼게요. VSCode를 홈 경로(~)에서 실행합니다.

cd ~
code .

그다음 왼쪽의 폴더 트리에서 .zshrc 파일을 클릭합니다. .zshrc 파일은 zsh의 여러 설정을 해주는 부분입니다. 여기에ㅓ 11번째 줄 근처를 보면 ZSH_THEME이라는 부분이 있습니다. zsh의 테마를 적어주는 부분인데 기본적으로 'robbyrussell' 테마가 적용되어 있습니다. 여기에 
변경하고자 하는 테마의 이름을 입력하면 되는데 우리는 기본으로 내장되어있는 'agnoster' 테마로 변경해 주겠습니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3632&directory=Untitled%203.png&name=Untitled+3.png

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3632&directory=Untitled%204.png&name=Untitled+4.png

그 다음 커맨드 라인 프로그램을 재시작하면 아래와 같이 변경된 테마를 볼 수 있습니다. 만약 이전의 초기 테마로 돌아가고 싶다면 robbyrussell을 입력해서 돌아갈 수 있습니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3632&directory=Untitled%205.png&name=Untitled+5.png

이 밖에도 아래 Github에 나와있는 여러가지 테마를 적용할 수 있습니다.
https://github.com/ohmyzsh/ohmyzsh/wiki/External-themes


3.2 pyenv 설정하기

홈 디렉토리(~)로 이동한 후 vscode를 실행해주세요.

cd ~
code .

그리고 왼쪽 폴더 트리에서 .bashrc를 클릭하고 맨 아래를 보면 우리가 pyenv를 설정 해준 부분이 있죠? 이 부분은 .bashrc 즉 bash shell에 설정을 해준 것 이므로 .zshrc 그러니까 zsh shell에도 설정해주어야 합니다.
아래 세 줄을 복사해서 .zshrc 파일의 맨 아래쪽에 붙여넣어 주세요.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3632&directory=_2020-09-20__6.43.07_copy.png&name=_2020-09-20__6.43.07_copy.png

그다음 다시 커맨드 라인 프로그램을 실행하고 아래 명령어를 이용해서 우리가 설정해 주었던 파이썬 환경 목록이 제대로 나오는지 확인합니다.

pyenv versions


04. 재미있는 Zsh 플러그인
4.1 zsh-syntax-highlighting

이름에서도 알 수 있듯이 명령어를 자동으로 하이라이팅해 주는 기능이 있는 플러그인입니다. 아래 명령어를 한 줄씩 입력해서 설치한 후 재실행을 해보면 여러 가지 색으로 명령어가 구분되는 것을 확인 할 수 있습니다.

cd ~
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git

echo "source ${(q-)PWD}/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" >> ${ZDOTDIR:-$HOME}/.zshrc


4.2 autojump

autojump는 내가 이전에 이동 했었던 경로를 기억해두었다가 해당 디렉토리 이름만으로 Jump 하듯 이동할 수 있게 해주는 플러그인 입니다. 예를들어 이전에 cd /codeit/django/costaurant/new 라는 경로로 이동한적이 있다면 jump의 약자인 j를 사용해서 j new 라는 명령어 만으로 같은 경로로 이동할 수 있습니다.

    WSL Ubuntu에서 설치하기

cd ~
git clone git://github.com/wting/autojump.git

cd autojump
./install.py or ./uninstall.py

설치를 하고 나면 화면 아래쪽에 .zshrc에 다음의 두 라인을 추가하라는 안내가 나옵니다. 여러분 화면의 다음 두 줄을복사합니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3632&directory=_2020-09-21__4.34.51_copy.png&name=_2020-09-21__4.34.51_copy.png

cd ~
code .

VSCode를 실행하고 .zshrc의 맨 아래쪽에 복사한 두 줄을 다음과 같이 붙여 넣습니다. 그리고 WSL을 재실행 하면 모든 설치가 완료됩니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3632&directory=_2020-09-21__4.37.59_copy.png&name=_2020-09-21__4.37.59_copy.png


    macOS에서 설치하기

autojump 역시 homebrew를 이용해서 설치가 가능합니다.

brew install autojump

설치가 끝났다면 홈 경로(~)에서 VSCode를 실행하고

cd ~
code .

아래로 내려서 plugins 항목에 다음과 같이 git 옆에 autojump를 추가합니다. 이때 콤마가 아니라 아래와 같이 띄어쓰기로 구분해야 합니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3632&directory=_2020-09-21__4.44.51_copy.png&name=_2020-09-21__4.44.51_copy.png

그 다음 터미널을 재실행 하면 설치가 완료 됩니다.


4.3 zsh-autosuggestions

마지막으로 소개할 플러그인은 zsh-autosuggestions으로 내가 이전에 타이핑 했던 명령어를 기반으로 명령어를 추천해주는 플러그인 입니다. 아래 명령어를 각각 입력해서 플러그인을 다운로드 합니다.

cd ~
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions

완료 되었다면 VSCode로 .zshrc를 열고

cd ~
code .

plugins 항목에 아래처럼  zsh-autosuggestions를 추가합니다. 이때 콤마가 아닌 띄어쓰기로 각 플러그인을 구분해야 합니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3632&directory=_2020-09-21__4.51.40_copy.png&name=_2020-09-21__4.51.40_copy.png

그 다음 사용하고 있는 커맨드 라인 유틸리티를 재실행하면 모든 설치가 완료됩니다. 이제 아래와 같이 명령어를 입력하면 내가 이전에 입력했었던 히스토리를 토대로 입력할 명령어를 흐리게 추천해 줍니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3632&directory=_2020-09-21__4.55.22_copy.png&name=_2020-09-21__4.55.22_copy.png



이 밖에도 zsh shell에서 사용할 수 있는 여러 가지 플러그인이 있습니다.
검색과 설정을 통해서 여러분만의 커맨드 라인 환경을 구성해보세요 :)

--------------------------------------------------------------------------------------------------------------------------------------------------

Django 강의 설명서
| Django 웹 개발 시작하기는

코드잇 Django 강의를 수강하는 여러분 반갑습니다! 본 강의에 들어가기에 앞서서 어떻게 하면 강의를 효율적으로 학습할 수 있는지 이번 토픽의 학습 목표는 무엇인지, 그리고 Django를 처음 배울 때 어려운 점은 무엇인지 미리 알아봅시다. 앞으로 여러분의 소중한 시간을 더욱더 값지게 사용하기 위해서요.
| 두 개의 프로젝트

이번 토픽에서는 두 개의 프로젝트를 하게 되는데 하나는 강의에서 함께 하는 프로젝트고 다른 하나는 강의를 바탕으로 여러분이 혼자 만드는 프로젝트입니다. 그리고 이 모든 과정은 앞의 레슨에서부터 이어지는 하나의 큰 과정입니다.

꼭! 이 두 가지 프로젝트를 직접 코딩해보세요.

Django는 파이썬 같은 언어가 아니라 웹 개발을 위해 만들어진 도구입니다. 이 훌륭한 도구는 사용하는 방법과 순서가 어느 정도 정해져 있어서 처음 배울 때는 사용법을 익히고 흐름을 이해하는 것이 중요합니다. 그리고 그것을 익히는 가장 좋은 방법은 눈으로만 보는 것이 아니라 직접 입력해 보는 것입니다.
| 처음부터 디테일을 추구하지 마세요

이번 토픽은 Django의 구조를 이해하고 각각의 구조가 어떻게 연결되어 있는지를 이해하는 것이 핵심입니다. 강의마다 Django의 새로운 명령어와 문법들이 나올 텐데 디테일에 집중하기보다 전체적인 흐름을 잡는 것에 집중해주세요. 자세한 문법들은 흐름을 이해한 다음에 다시 찾아봐도 늦지 않습니다.

천천히 그리고 가볍게 강의를 수강하세요.
| 조금 어렵게 느껴지는 것이 당연합니다

본 강의는 언어를 배우는 것이 아닌 언어를 활용한 하나의 프레임워크를 배우는 과정입니다. Django는 웹 서비스를 만들기 위한 프레임워크로 파이썬, 데이터베이스, 웹 프로그래밍 등 여러 가지 기술에 대한 지식과 테크닉이 들어가 있고 이러한 기술들을 조금 더 깔끔한 구조의 코드로 작성할 수 있도록 많은 개발자가 고민해서 만들어진 틀이 있기 때문에 처음 접할 때 어렵게 느껴지는 것이 당연합니다. 하지만 거꾸로 말하면 Django 내부의 이 틀만 잘 이해하면 Django를 잘 사용할 수 있게 된다는 뜻이기도 합니다.

너무 걱정하지는 마세요. 가벼운 개념부터 차근차근 알려드릴게요 :)
자, 준비가 되었다면 바로 다음 강의로 넘어가 봅시다.

---------------------------------------------------------------------------------------------------------------------------------------
강의 내용인 파이선 3.7.7 과 3.8.2 가 설치가 안되서 3.9.1 과 3.9.8을 설치했고 django를 설치할때는 pip가 안되서 pip3으로 설치를 했는데 django-admin --version에서 zsh: command not found: django-admin가 나옵니다. 

같은 과정을 두번째 하는중입니다. 어떻게 해결할 수 있을까요?ㅠ

위에는 다른 사람이 올린 질문이고 내 경우는 가상환경에만 장고 설치가 안됨 그리고 커맨드라인 맨 왼쪽에 (가상환경) 이렇게 안뜸 

내 질문 ->
저는 영상을 보고 따라한 결과 djnago-envs 가상환경에만 장고가 설치된것이 아니라 global하게 장고가 설치되었습니다 

영상에 7:50~8:00  쯤 보면 codeit_django 디렉토리에 장고를 설치하는 것이 아니라 가상환경에 설치하는 것이라고 설명하신 뒤 

그러면 다시 Django 설치로 돌아와서 라고 말씀하시면서 콘솔 화면이 바뀌는데 

(djnago-envs) ~codeit-django  라고 콘솔에 나타나는데 바로 이전 화면에 라인 맨 왼쪽에 ~codeit-django 라고만 써있는것과는 조금 다르네요

혹시 제가 놓친 과정이 있나요?

답변 ->

결국엔 경로를 인식하냐 못하냐 차이인 것 같아용

먼저

pip3 show django

요 명령어 결과를 답변으로 복붙해주실 수 있을까용?

->

echo 'eval "$(pyenv init --path)"' >> ~/.zprofile
echo 'eval "$(pyenv init -)"' >> ~/.zshrc
echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.zshrc

  

위 명령을 각각 실행해주세용.

그리고 터미널이나 iterm 을 종료 후에 재실행 해보시기 바랍니다.

또한 python 은 3.7.10 으로 설치를 해보시고,

그 후 virtualenv 를 통해 가상환경을 만들어보시고 답변으로 알려주셔용

그전에 쓰지 않는 python interpreter 는 pyenv uninstall 로 삭제하셔도 좋습니당

그랬더니 질문자는 장고가 깔렸고 나는 맨 왼쪽에 (가상환경) 이렇게 뜸 가상환경 안에만 장고가 설치되는지는 장고 삭제후 다시 해봐야될거 같다 
