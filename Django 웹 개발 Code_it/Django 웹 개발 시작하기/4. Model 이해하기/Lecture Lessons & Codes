Model
모델은 데이터의 구조를 잡아주고 정의된 구조를 기반으로 데이터베이스와 소통한다

데이터 구조
우리가 저장할 정보들의 형태이다 코스트랑에 들어갈만한 정보의 형태는? 우선 코스트랑에는 여러가지 메뉴가 있고 각각의 메뉴마다 음식으 이름 간단한 설명 그리고 가격이 있다
여기서 이름과 설명은 문자(str)의 형태로 저장하면 되고 가격은 숫자형태(int)로 저장하면 된다 이런식으로 각각의 데이터구조와 형식을 정하는것을 데이터 모델릴 (Data Modeling)이라 한다
쉽게 말해 데이터 모델링은 우리 서비스의 요구 사항에 맞게 데이터를 짜는 것이다

실재로 데이터를 저장하는 곳은? 데이터 베이스(Data Base)
대표적인 데이터베이스로는 MySQL, PostgreSQL, Oracle, MongoDB, SQLite 같은 것들이 있다 그리고 이러한 데이터 베이스에 데이터를
추가하거나 (Create) 조회하거나 (Read) 수정하거나 (Update) 지우거나 (Delete) 하는데 이러한 과정을 SQL 이라는 언어를 통해서 한다 
그런데 지금까지 파이썬 html css Django 까지 배우느냐 고생하는데 sql 까지 배우려면 막막하다! 그래서 장고에서는 파이썬을 이용해서 데이터베이스와 소통하게 해주는 도구가 있다
바로 ORM이다

ORM (Object-Relational Mapper)
원래 데이터베이스와 소통하기 위해서는 sql로 된 코드를 길게 써야하는데 이 ORM을 쓰면 파이썬을 이용해 데이터베이스와 소통할 수 있다 이게 어떻게 가능하냐?
장고에서는 Model애서 ORM을 제공한다 우리가 서비스의 요구 사항에 맞게 데이터 모델을 정의한 후 어떤 식으로 파이썬 코드를 쓰면 아 이 모델은 이런 형식으로 데이터를 정의하는구나 하고 장고에서 인식해서
그에 맞는 sql 코드를 자동으로 생성해서 실행하고 우리가 정의해준 형태에 맞게 데이터베이스에 저장된다 그리고 만약 이런 코드를 쓰면 적절한 sql 코드를 자동으로 생성한 다음 실행해서 원하는 데이터를 데이터베이스로부터 
읽어오게 된다 

Model 작성하기
이제 데이터를 웹페이지 파일 자체에 코딩해놓는게 아니라 모델을 이용해서 데이터베이스에 저장해 놓고 필요할 때 꺼내서 사용하자
일단 코스토랑은 음식에 대한 모델 객체가 필요하다 데이터 구조를 어떻게 잡아야할지 데이터 모델링부터 해보자 foods앱의 views.py를 가서 food_detail 함수를 보면 

def food_detail(request, food):
    context = dict() #빈 사전형 생성
    if food == 'chicken':
        context['name'] = '코딩에 빠진 닭'
        context['description'] = '주머니가 가벼운 당신의 마음까지 생각한 가격 !'
        context['price'] = 10000
        context['img_path'] = 'foods/images/chicken.jpg'
    else:
        raise Http404('이런 음식은 없습니다')
    return render(request, 'foods/detail.html', context = context)

하나의 메뉴는 이름과 설명 가격 그리고 이미지로 이루어져있다
그러면 이름과 설명 그리고 이미지 경로는 문자열로 저장하고 음식 가격은 숫자로 저장하면 되겠다
그럼 바로 모델을 작성해보자 foods 앱 안의 models.py 로 가자 모든 모델은 클래스로 구성된다 클래스를 쓰고 이름은 menu라고 하자 

class Menu(models.Model):

그리고 모델 클래스는 장고의 models.Model을 상속받아 구현한다
앞에서 배운 템플릿 상속이 기억나는가? 상속은 공통되는 부분을 모아 부모 객체로 만들고 자식 객체에서는 공통 기능은 부모객체로부터 상속 받아 사용하고 각각 달라지는 부분만 작성한다

맨 처음은 음식 이름을 저장할 구조를 만든다 각각의 데이터에 대한 형식을 필드라고 한다 음식에 대한 name 은 장고에서 제공하는 models를 이용해서 CharField 로 하면 된는데 이 CharField는 저장할 최대 길이를
필수 인수로 넘겨줘야한다 음식 이름 최대 길이를 50으로 하자

class Menu(models.Model):
    name = models.CharField(max_length=50)
  
이렇게 장고에서 제공하는 Field가 여러개가 있는데 지금 다 알아볼 수 없으니 나올때 마다 하나씩 알아보자 다음으로 음식 설명을 위해서 description 변수에 똑같이 CharField 를 만들어주는데 설명이 기니까 100자로 하자
그리고 가격은 숫자니까 IntegerField로 하자 이미지 경로는 문자열이므로 CharField를 쓰고 경로가 길어질 수 있으니 255로 하자

class Menu(models.Model):
    name = models.CharField(max_length=50)
    description = models.CharField(max_length=100)
    price = models.IntegerField()
    img_path = models.CharField(max_length=255)

그 다음 함수를 하나 정의해준다

class Menu(models.Model):
    name = models.CharField(max_length=50)
    description = models.CharField(max_length=100)
    price = models.IntegerField()
    img_path = models.CharField(max_length=255)
    
    def __str__(self):
        return self.name

이 __str__ 함수는 이 Menu 클래스는 하나의 문자열로 표현하는 것을 지정해주는 함수이다 print(Menu)를 썼을 떄 결과로 나오는 문자열을 넣어주는 것이다
그리고 여기 return 뒤에 결과로 돌려줄 문자를 적게 되는데 우리는 가각의 음식의 이름을 결과값으로 돌려주도록 하자
자 이렇게 하면 모델작성이 끝났다 생각보다 간단하져? 그리고 이렇게 모델을 새로 작성했거나 중간에 수정했다면 장고에게 사용하는 모델이 바뀌었다고 알려줘야한다
터미널에로 가서 현재 위치를 프로젝트 루트로 바꾼다 그리고 다음의 명령어를 쓴다

python3 manage.py makemigrations (나는 python3로)

콘솔에 다음과 같이 출력된다

Migrations for 'foods':
  foods/migrations/0001_initial.py
    - Create model Menu

모델이 만들어졌다 그 다음에 또 따라서 입력해보자

python3 manage.py migrate

그러면 우리가 만들어준 foods 앱과 더불어 장고에서 미리 만들어주는 여러 데이터 구조들이 함께 반영된다

------------------------------------------------------------------------------------------------------------------------------------
Django의 Model Field

Django Model은 대부분의 데이터를 저장할 수 있는 필드(Field)를 지원하는데 모든 필드에 사용할 수 있는 공통 옵션이 있고, 각각의 필드마다 가지고 있는 고유 옵션이 있습니다. 여기서는 자주 사용할 만한 몇 가지 필드와 옵션을 살펴보겠습니다.
필드(Field)

필드(Field)는 데이터 테이블에서의 열(column), 즉 데이터의 속성을 의미합니다.
CharField

class CharField(max_length=None)

제한된 길이의 문자열을 위한 필드입니다.

    max_length 필수 인수이며 입력할 최대 길이를 설정합니다.

IntegerField

class IntegerField()

정수 값을 위한 필드이며 -2147483648 부터 2147483647 범위를 지원합니다.
BooleanField

class BooleanField()

Boolean 값을 위한 필드 입니다.
DateField

class DateField(auto_now=False, auto_now_add=False)

DateField는 파이썬의 datetime.date 객체 형태로 표시되는 날짜 필드입니다.

    auto_now
      true로 설정되면 해당 객체가 변경(save) 될 때마다 자동으로 필드 값을 지금으로 수정합니다. '마지막 수정 시간' 같은 항목으로 사용하면 좋겠죠?

    auto_now_add
      모델이 처음 생성될 때 한 번, 자동으로 필드 값을 지금으로 설정합니다. '생성된 시간'을 저장하기 위해 많이 사용합니다.

DateTimeField

class DateTimeField(auto_now=False, auto_now_add=False)

파이썬의 datetime.datetime 객체 형태로 표시되는 날짜 필드 입니다. DateField와 인수 옵션은 같습니다.
EmailField

class EmailField(max_length=254)

CharField의 하위 클래스로 문자열이 이용 가능한 이메일 주소인지 EmailValidator를 통해 확인합니다. 
EmailValidator의 내부 구조가 궁금하다면 아래 문서를 참고하세요.
(https://docs.djangoproject.com/en/3.1/ref/validators/#django.core.validators.EmailValidator)
FileField

class FileField(upload_to=None, max_length=100)

파일 업로드를 위한 필드 입니다.

    upload_to 업로드될 경로를 지정하는 필드로 Storage.save() 함수로 값이 전달되어 저장됩니다. Storage.save 함수 공식문서 (https://docs.djangoproject.com/en/3.1/ref/files/storage/#django.core.files.storage.Storage.save)

ImageField

class ImageField(upload_to=None, height_field=None, width_field=None, max_length=100)

FileField를 상속하여 구현되는 파일 업로드를 위한 필드이며 기본적으로 최대 길이가 100인 문자열 형식으로 생성됩니다. 위에서 나왔던 FileField에서 업로드된 파일이 정상적인 이미지 파일인지 확인하는 과정이 추가된 필드로 이미지 처리를 위한 Pillow 라이브러리가 필수적으로 필요합니다. 이 부분은 뒤에서 함께 다뤄보도록 하겠습니다.

    height_field & width_field 객체가 저장 될 때 이미지의 높이와 너비값이 자동으로 채워 집니다.

이 밖에도 IP 주소를 체크를 하는 GenericIPAddressField, JSON 파일을 위한 JSONField (django 3.1 버전 이상부터 지원) 특정 폴더의 파일 패스를 표현하는 FilePathField, URL을 위한 URLField 등 다양한 필드가 있습니다. 
다음 공식 문서를 참고하세요.
( https://docs.djangoproject.com/en/3.1/ref/models/fields/#django.db.models.Field.default )
옵션(Option)

아래 옵션은 모든 필드 타입에 사용할 수 있으며 선택적으로 적용할 수 있습니다.
null

Field.null

기본 값은 False이며 Null 값 허용 여부를 선택 합니다.

만약 이 null 옵션을 적용할 필드가 문자열 기반 필드 (Char, Text)일 경우에는 주의해서 사용해야 하는데 ' ' (빈 문자열)과 Null 모두 해당 필드의 데이터가 없다는 것을 의미하기 때문입니다. 일반적으로 데이터가 없다는 것을 의미하는 값은 하나여야 하므로 Django는 문자열 기반 필드가 데이터가 없음을 표시할 때는 ' '(빈 문자열)을 사용하도록 권장하고 있습니다.
blank

Field.blank

기본 값은 False이며 True로 설정한 경우 필드 값을 빈 값으로 설정할 수 있습니다.

그렇다면 null과 blank의 차이는 무엇 일까요?
null은 온전히 데이터베이스와 관련된 사항이고 blank는 데이터의 유효성 검사와 관련된 옵션입니다. 예를들어 blank가 True라면 해당 필드에 데이터를 입력하지 않아도 유효성 검사를 통과하게 됩니다.
default

Field.default

필드의 기본값을 설정하는 옵션으로 값 또는 함수가 들어갈 수 있습니다.
db_column

Field.db_column

해당 필드에 사용할 데이터베이스 속성 명을 지정합니다. 따로 지정하지 않을 경우 일반적으로 필드의 이름을 사용합니다.

더 많은 필드와 옵션에 대해 알고 싶다면 아래 django 공식 문서를 참고하세요.
https://docs.djangoproject.com/en/3.1/ref/models/fields/#django.db.models.Field.default



모든 필드와 옵션을 외울 수는 없습니다. 필요할 때 찾아서 사용할 수 있으면 되는 거죠. 다만 찾아보는 연습을 해두어야 찾아야 할 때 참고해서 작성할 수 있습니다. 
공식 문서 보는 것을 두려워하지 마세요. 조금만 관심 있게 보면 친절함이 보인답니다.
----------------------------------------------------------------------------------------------------------------
