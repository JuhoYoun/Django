Django Framework
* 웹 개발을 하는데 있어서의 뼈대, 틀
* 어떤 웹사이트를 만들던 공통의 요소들이 있어 매번 뼈대부터 만들기 보단 틀을 사용하는것이 빠르다

프론트엔드는 웹사이트의 얼굴이다. 화면 요소를 어떻게 배치하고 구조화할것인지를 정한다. 예전에는 프론트엔드 개발이 단순했지만 요즘은 더 복잡해져 리액트 앵귤러 뷰 같은 프론트엔드 프레임이 잘 쓰인다

백엔드는 뒤에서 웹서비스의 동작과 논리적 처리를 담당한다

* Django 는 백엔드 프레임 워크인지 프론트엔드 프레임 워크인지 딱 잘라 말하기 어렵다
* Django에는 데이터베이스를 쉽게 이용하는 기능과 그 외 수 많은 백엔드 기능을 제공한다
* 하지만 백엔드에서 프론트엔드로 데이터를 넘겨주고 그 데이터를 프론트엔드에서 사용하는것 까지 Django에서 구현 가능하다 -> FULL STACK 프레임워크다!
* 하지만 Django의 프론트엔드 기능은 처음 만들어진 2003년 기준 거의 그대로라서 개발자들은 거의 백엔드 프레임워크로 사용하고 프론트엔드 프레임으로 다른 프레임워크를 사용해서 Django 백엔드와 소통한다

Django 개발 환경
* Python 사용
* 텍스트 에디터로 MS visual studio code 사용 (windows) -> 코드 오픈 작성 수정이 가능한 개발용 메모장
* 가상 환경 -> 하나의 독립된 공간 -> 예를들어 프로젝트 A는 Python 2.7 Django 1.1 을 사용하는 반면 프로젝트 B는 Python 3.7 Django 2.2를 사용한다면 가상환경이 없다면 두 프로젝트를 모두 관리 할 때 항상 소프트웨어를 재설치해야한다 
-> 이런 불편함을 없애기 위해 각각의 프로젝트의 개발환경을 독립적으로 만들어 관리하는 것이 가상 환경이다 -> pyenv를 이용하요 파이썬 버전 관리 및 설치를 하고 pyenv-virtualenv를 이용하요 가상환경을 구성 및 파이썬 패키지 관리를 한다 
* Windows 사용자는 위와 같은 환경을 구성하는데 있어서 WSL (Windows Subsystem for Linux)를 사용한다 -> WSL 은 MS 내놓은 Windows 확장 프로그램으로 Linux Terminal을 Windows애서 사용할 수 있게 해주는 프로그램이다 -> MacOS와 비슷한 환경을 Windows애서 만들 수 있다 
-> WSL 환경을 구축하게 되면 무거운 다른 가상환경을 제공하는 프로그램 없이 윈도우에서 맥처럼 리눅스를 이용해 개발할 수 있다
* Homebrew -> macOS의 패키지 관리 프로그램 (pyenv와 pyenv-virtualenv 모두 homebrew로 설치가능), 패키지 설치부터 제거까지 간편하다
* 이 수업에서는 Django 2.2 가 사용된다 -> 2022년까지 꾸준히 업데이트 및 버그 수정이 되는 버전이다

Django 개발 환경 구성하기

1. VSCode 텍스트 에디터
2. Homebrew 프로그램 설치/관리
* pyenv 파이썬 설치/관리  -> 파이썬 설치 3.7.7 버전
* pyenv-virtualenv 파이썬 가상환경 관리 -> 가상환경 만든 후 pyenv로 설치한 파이썬을 적용하고 쟝고를 설치한다 (python 3.7.7 / django 2.2 )

VSCode
* 내가 원하는 경로에서 바로 VSCode를 열 수 있도록 설정 -> command + shift + p (명령 팔레트) -> 검색창에 shell command 입력 -> install -> 이제 터미널을 열고 디렉토리를 만들어보자
-> mkdir code_it_django -> cs code_it_django -> 해당 디렉토리로 갔으면 code . 을 입력한다 -> code_it_django 위치에서 VSCode가 실행된다 이렇게 하지 않으면 매번 코드를 편집할 디렉토리를 지정해주어야한다

Homebrew
-> 다운 받는 법은 Linux 수업 참조
brew --version -> 현재 버전 알려준다
brew install pyenv -> pyenv 설치
brew install pyenv-virtualenv -> virtualenv 설피
-> 설치가 다 되었다면 시스템 환경설정(System Preference)으로 들어간 후 Users & Groups -> 자물쇠를 풀어준다 -> 현재 사용자로 가서 고급옵션(Advanced Options) -> login shell을 확인한다
-> login shell 은 터미널에서 기본적으로 어떤 쉘을 사용하는지 보여준다

-> bash일 경우와 zsh 일 경우 나눠서 다음과 같이 해준다

| 홈 디렉토리로 이동하기

아래 명령어는 홈 디렉토리(~)에서 실행해야 합니다.

cd ~

| pyenv 설정하기 for bash

echo 'eval export PATH="$HOME/.pyenv/bin:$PATH"' >> .bash_profile
echo 'eval "$(pyenv init -)"' >> .bash_profile
echo 'eval "$(pyenv virtualenv-init -)"' >> .bash_profile

| pyenv 설정하기 for zsh

echo 'eval export PATH="$HOME/.pyenv/bin:$PATH"' >> .zshrc
echo 'eval "$(pyenv init -)"' >> .zshrc
echo 'eval "$(pyenv virtualenv-init  -)"' >> .zshrc

