Django Framework
* 웹 개발을 하는데 있어서의 뼈대, 틀
* 어떤 웹사이트를 만들던 공통의 요소들이 있어 매번 뼈대부터 만들기 보단 틀을 사용하는것이 빠르다

프론트엔드는 웹사이트의 얼굴이다. 화면 요소를 어떻게 배치하고 구조화할것인지를 정한다. 예전에는 프론트엔드 개발이 단순했지만 요즘은 더 복잡해져 리액트 앵귤러 뷰 같은 프론트엔드 프레임이 잘 쓰인다

백엔드는 뒤에서 웹서비스의 동작과 논리적 처리를 담당한다

* Django 는 백엔드 프레임 워크인지 프론트엔드 프레임 워크인지 딱 잘라 말하기 어렵다
* Django에는 데이터베이스를 쉽게 이용하는 기능과 그 외 수 많은 백엔드 기능을 제공한다
* 하지만 백엔드에서 프론트엔드로 데이터를 넘겨주고 그 데이터를 프론트엔드에서 사용하는것 까지 Django에서 구현 가능하다 -> FULL STACK 프레임워크다!
* 하지만 Django의 프론트엔드 기능은 처음 만들어진 2003년 기준 거의 그대로라서 개발자들은 거의 백엔드 프레임워크로 사용하고 프론트엔드 프레임으로 다른 프레임워크를 사용해서 Django 백엔드와 소통한다

Django 개발 환경
* Python 사용
* 텍스트 에디터로 MS visual studio code 사용 (windows) -> 코드 오픈 작성 수정이 가능한 개발용 메모장
* 가상 환경 -> 하나의 독립된 공간 -> 예를들어 프로젝트 A는 Python 2.7 Django 1.1 을 사용하는 반면 프로젝트 B는 Python 3.7 Django 2.2를 사용한다면 가상환경이 없다면 두 프로젝트를 모두 관리 할 때 항상 소프트웨어를 재설치해야한다 
-> 이런 불편함을 없애기 위해 각각의 프로젝트의 개발환경을 독립적으로 만들어 관리하는 것이 가상 환경이다 -> pyenv를 이용하요 파이썬 버전 관리 및 설치를 하고 pyenv-virtualenv를 이용하요 가상환경을 구성 및 파이썬 패키지 관리를 한다 
* Windows 사용자는 위와 같은 환경을 구성하는데 있어서 WSL (Windows Subsystem for Linux)를 사용한다 -> WSL 은 MS 내놓은 Windows 확장 프로그램으로 Linux Terminal을 Windows애서 사용할 수 있게 해주는 프로그램이다 -> MacOS와 비슷한 환경을 Windows애서 만들 수 있다 
-> WSL 환경을 구축하게 되면 무거운 다른 가상환경을 제공하는 프로그램 없이 윈도우에서 맥처럼 리눅스를 이용해 개발할 수 있다
* Homebrew -> macOS의 패키지 관리 프로그램 (pyenv와 pyenv-virtualenv 모두 homebrew로 설치가능), 패키지 설치부터 제거까지 간편하다
* 이 수업에서는 Django 2.2 가 사용된다 -> 2022년까지 꾸준히 업데이트 및 버그 수정이 되는 버전이다

Django 개발 환경 구성하기 (MaxOS)

1. VSCode 텍스트 에디터
2. Homebrew 프로그램 설치/관리
* pyenv 파이썬 설치/관리  -> 파이썬 설치 3.7.7 버전
* pyenv-virtualenv 파이썬 가상환경 관리 -> 가상환경 만든 후 pyenv로 설치한 파이썬을 적용하고 쟝고를 설치한다 (python 3.7.7 / django 2.2 )

VSCode
* 내가 원하는 경로에서 바로 VSCode를 열 수 있도록 설정 -> command + shift + p (명령 팔레트) -> 검색창에 shell command 입력 -> install -> 이제 터미널을 열고 디렉토리를 만들어보자
-> mkdir code_it_django -> cd code_it_django -> 해당 디렉토리로 갔으면 code . 을 입력한다 -> code_it_django 위치에서 VSCode가 실행된다 이렇게 하지 않으면 매번 코드를 편집할 디렉토리를 지정해주어야한다

Homebrew
-> 다운 받는 법은 Linux 수업 참조
brew --version -> 현재 버전 알려준다
brew install pyenv -> pyenv 설치
brew install pyenv-virtualenv -> virtualenv 설치
-> 설치가 다 되었다면 시스템 환경설정(System Preference)으로 들어간 후 Users & Groups -> 자물쇠를 풀어준다 -> 현재 사용자로 가서 고급옵션(Advanced Options) -> login shell을 확인한다
-> login shell 은 터미널에서 기본적으로 어떤 쉘을 사용하는지 보여준다

-> bash일 경우와 zsh 일 경우 나눠서 다음과 같이 해준다

| 홈 디렉토리로 이동하기

아래 명령어는 홈 디렉토리(~)에서 실행해야 합니다.

cd ~

| pyenv 설정하기 for bash

echo 'eval export PATH="$HOME/.pyenv/bin:$PATH"' >> .bash_profile
echo 'eval "$(pyenv init -)"' >> .bash_profile
echo 'eval "$(pyenv virtualenv-init -)"' >> .bash_profile

| pyenv 설정하기 for zsh

echo 'eval export PATH="$HOME/.pyenv/bin:$PATH"' >> .zshrc
echo 'eval "$(pyenv init -)"' >> .zshrc
echo 'eval "$(pyenv virtualenv-init  -)"' >> .zshrc


가상 환경 구성 & 쟝고 설치하기

pyenv 이용해서 파이썬 설치
-> pyenv install --list -> 설치가능한 파이썬 버전 리스트가 엄청 많이 나온다 꼭 하나면 다운 받을 필요는 없고 여러개 다운 받아서 마음대로 바꿔 쓸 수 있다 
-> 3.7.7 버전과 3.8.2 둘 다 설치해보자 
-> pyenv install 3.7.7 -> 3.7.7 버전 설치
-> pyenv install 3.8.2 -> 3.8.2 버전 설치
-> pyenv versions -> 설치되 있는 버전들 보여준다 

*내가 할 때는 Big Sur 를 써서 그런지 해당버전들 설치가 안되서 3.8.8 과 3.9.0 으로 하겠다

가상환경 생성
-> pyenv virtualenv 3.7.7 django-envs (버전과 가상 환경의 이름)
-> pyenv versions -> 생성된 가상 환경을 볼 수 있다
* system (set by /Users/jutlo/.pyenv/version)
  3.8.8
  3.8.8/envs/django-envs (추가됨)
  3.9.0
  django-envs (추가됨)

가상환경 삭제
-> pyenv uninstall django-envs (virtualenv 안써도 되넹)

Global 가상 환경 vs Local 가상 환경

Global 가상환경
- 시스템 전역에 적용하는 환경
- global 가상환경을 적용하면 따로 지정하지 않아도 기본적으로 global 환경 사용

Local 가상환경
- 특정 디렉토리 내부에서만 적용되는 환경
- global 환경이 지정되어 있더라도 local 환경이 적용됨 (해당 디렉토리의 하위 디렉토리에도 자동으로 local 환경이 적용된다)

global 가상환경 설정
-> pyenv global 3.8.8 -> 컴퓨터 전역에 파이썬 3.8.8 적용
-> pyenv versions
  system
* 3.8.8 (set by /Users/jutlo/.pyenv/version)  -> global로 지정된 파이썬 버전
  3.8.8/envs/django-envs
  3.9.0
  django-envs
  
local 가상환경 설정
-> 가상환경을 설정하고 싶은 디렉토리로 이동
-> pyenv version -> 현재 적용되있는 환경만 따로 볼 수 있다 -> 따로 지정해두지 않아도 global 환경에 적용된 것이 보인다
-> pyenv local django-envs (local 환경 설정)
-> pyenv version -> 적용되어 있는 환경이 바뀌었다 
-> 상위 디렉터리로 이동 -> 해당 디렉토리의 환경은 여전히 global 이다

Django 설치
* code_it_django 디렉토리 안에 설치하는 것이 아니라 가상 환경 안에 설치한다 -> django-envs
* pip 설치하는 법 : https://howchoo.com/python/install-pip-python#install-pip-on-macos  (내 컴퓨터에는 pip이 설치되어 있지 않은거 같다 아마 homebrew로 파이썬을 설치하지 않아서일까)
-> code_it_django 디렉토리로 이동 -> pip3 install django==2.2 (강의에서는 pip을 썼는데 나는 pip이 안되서 pip3을 썼다) -> 가상 환경에 쟝고 설치
-> django-admin --version -> 2.2 (2.2 버전이 설치된것이 보인다)
-> pip list (나는 pip 이 안되서 pip3로 했다) -> 설치되 있는 파이썬 패키지와 버전을 볼 수 있다 
Package    Version
---------- -------
Django     2.2
pip        21.2.3
pytz       2021.3
setuptools 57.4.0
sqlparse   0.4.2

-> django와 django 가 필요로하는 몇가지 패키지가 설치되어있다
-> cd .. (상위 디렉토리로 이동) -> pip list
Package    Version
---------- -------
pip        21.2.3
setuptools 57.4.0
-> global 환경 이기 때문에 이렇게 나와야한다 근데 내가 해보니 상위 폴더에도 django 랑 기타 패키지가 설치되있네?

* pip은 안되지만 pip3은 된다? https://apple.stackexchange.com/questions/371929/why-do-i-only-have-pip3-but-no-pip

* 개발환경 구성 꿀팁 (windows) 이건 나중에 하자! 



VSCode 더 편하게 사용하기

01. Visual Studio Code

Visual Studio Code(VSCode)는 Microsoft에서 오픈 소스로 개발하고 있는 텍스트 에디터로 Windows는 물론이고 macOS, Linux에서도 사용할 수 있는 멀티플랫폼 프로그램 입니다. 오픈 소스이므로 무료로 사용이 가능하며 Microsoft가 주도적으로 개발, 관리 하고 있는 에디터인 만큼 완성도 면에서 큰 인기를 얻고 있는 텍스트 에디터 입니다.
02. 확장프로그램(Extension)

이런 VSCode를 더욱 편리하고 사용할 수 있게 해주는 것이 바로 확장프로그램(Extension) 입니다. 확장프로그램은 VSCode에 여러 가지 기능을 더해주는 역할을 하는데 Microsoft에서 배포하는 확장프로그램부터 전 세계의 수많은 개발자들이 직접 만든 확장프로그램까지 매우 다양한 종류가 있습니다. 개발자들이 사용하는 대부분의 언어나 프레임워크를 위한 확장 프로그램들이 있으며 이러한 확장프로그램을 설치하는 것은 선택이 아니라 필수라고 말하고 싶네요.
2.1. 확장프로그램(Extension) 검색 및 설치

VSCode에서 확장프로그램을 설치하기 위해서는 왼쪽의 Extension 아이콘을 누르고

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3629&directory=1.png&name=1.png

검색창에 내가 원하는 확장프로그램의 이름을 검색 합니다. 보통 사용하고자 하는 언어 또는 프레임워크를 입력해서 관련된 확장 프로그램 목록을 보거나 바로 해당 확장 프로그램을 검색해서 사용합니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3629&directory=2.png&name=2.png

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3629&directory=Untitled.png&name=Untitled.png

그리고 원하는 확장프로그램을 선택한 후 오른쪽의 Install을 눌러서 설치 합니다. 한 가지 팁은 확장프로그램 목록의 정렬순서는 많이 다운로드한 순서대로 나오므로 많은 사람들이 사용해본 위에서부터 눌러 보면서 해당 확장 프로그램의 설명을 본 다음 선택하는 것이 좋습니다.
2.2. Django를 위한 확장프로그램 설치하기
Python Extension

Microsoft에서 배포한 파이썬 확장프로그램으로 파이썬 문법에 맞는 하이라이팅과 자동 완성을 지원합니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3629&directory=Untitled%201.png&name=Untitled+1.png
Django Extension

Django의 템플릿을 작성할 때 템플릿 언어에 맞는 하이라이팅과 자동 완성을 지원합니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3629&directory=Untitled%202.png&name=Untitled+2.png
vscode-icons

VSCode 왼쪽 트리 구조의 파일들을 각 언어 맞는 이쁜 아이콘으로 바꿔주는 확장 프로그램 입니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3629&directory=Untitled%203.png&name=Untitled+3.png
2.3. 이 밖의 재미있는 확장프로그램
indent-rainbow

들여쓰기가 어디서부터 어디까지 얼마나 되어 있는지 보기 불편하다면? indent-rainbow를 설치해보세요. 들여쓰기를여러 가지 색으로 구분 지어 알아보기 쉽게 만들어 줍니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3629&directory=Untitled%204.png&name=Untitled+4.png
Bracket Pair Colorizer 2

수많은 괄호 속에서 지금 닫는 이 괄호의 짝이 어디 있는지 찾기 힘들다구요? Bracket Pair Colorizer를 설치해보세요.짝이 맞는 괄호를 색별로 구분 해줍니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3629&directory=Untitled%205.png&name=Untitled+5.png

이밖에도 멋진 확장프로그램이 정말 많이 있으며 파이썬 뿐만 아니라 C, C++, JAVA,  HTML, CSS, JS 
또는 통계 프로그래밍 언어인 R이나 데이터베이스 SQL 등 거의 모든 언어와 프레임워크에 관한 확장프로그램이 있습니다. 내게 맞는 확장 프로그램을 설치해서 VSCode를 더욱 편리하게 사용 해보세요.
03. VSCode에서 파이썬 버전 선택하기

우리는 앞에서 여러 개의 파이썬 가상 환경을 구성 했죠? 그런데 그렇게 많은 가상 환경 중에서 VSCode는 어떤 파이썬 환경을 사용해야 할지 모르기 때문에 사용할 파이썬 환경을 설정 해주는 것이 필요합니다. VSCode에서 현재 사용하는 파이썬 환경에 따라 자동 완성, 패키지 임포트 등의 동작에 영향을 미칩니다.

아무것도 설정하지 않은 상태에서 파이썬 파일을 열고 왼쪽 아래를 보면 기본적으로 현재 컴퓨터에 설정 되어 있는 Global 파이썬 환경이 적용됩니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3629&directory=3.png&name=3.png

이렇게 사용하고 있는 파이썬 환경을 변경하기 위해서 Windows를 사용하고 있다면 Control + p 를 macOS를 사용하고 있다면 Command + p를 눌러서 명령 팔레트를 실행 합니다. 명령 팔레트는 VSCode에서 에디터 명령, 파일 열기, 확장 패키지 명령등 다양한 커맨드들을 사용할 수 있는 공간입니다.

검색 창에 'python' 이라고 검색하고Python: Select Interpreter를 선택 한 다음 원하는 파이썬 환경을 선택해서 사용할 환경을 변경 할 수 있습니다.

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3629&directory=4.png&name=4.png

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3629&directory=5.png&name=5.png

https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=3629&directory=6.png&name=6.png
