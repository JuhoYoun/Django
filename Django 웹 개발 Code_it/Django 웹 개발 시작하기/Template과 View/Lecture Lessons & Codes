Tmeplate 적용하기

html/css 웹 퍼블리싱 강의에서도 html과 css를 이용해 웹페이지를 만들었는데 django를 사용하면 뭐가 달라지는가?
이전에 만들었던 방식의 웹사이트는 HTML CSS 폰트 그리고 이미지로 이루어져있다 (template 적용하기 lecture example 파일 참조)
만약 여기에 음식 하나를 추가하고 싶다면? index.html (lecture example 프로젝트의 costaurant/foods/templates/foods/index.html)을 열고 아래로 내려가서
food class 태그를 새로 작성하고 음식 사진을 이미지 폴더에 놓고 이미지 경로를 다시 적어줘야한다 음식 설명도 하나하나 바꿔줘야한다 
게다가 이 html 코드에서 날짜 부분은 매일 바꿔줘야되게 디자인되어있다 -> 정적으로 내용이 고정되어 있는것이 불편하다
쟝고를 사용해서 구현하면 각각의 음식에 대한 내용은 데이터베이스에서 가져오고 날짜와 같이 매번 달라지는 부분들이 변경될 때 마다 동적으로 새로운 페이지를 만들 수 있다

직접 해볼까요~

실습파일

templates_03_01 (css, fonts, images, html 파일)

코드잇 실행기에는 foods/templates/foods 디렉토리 안에 css, fonts, images 디렉토리가 미리 생성되어 있습니다.
바로 서버를 실행해서 결과를 확인해보세요.

이 템플릿 파일을 장고 프로젝트에 옮긴다 -> 기존의 templates/foods/index.html 파일은 지워주고 실습파일들을 여기다 풀어준다 -> 이제 개발서버를 켜고 주소창에 domain/foods/index를 처보자
-> template이 잘 render되서 나오는데 css와 image가 적용이 안되있다 -> 다음 강의로

Static Files (정적 파일)
: html 파일을 제외하고 웹 페이지를 rendering 하는 과정에서 필요한 추가적인 파일 예를 들어 CSS나 JavaScript, 이미지, 폰드 등의 파일

장고는 이런 정적파일을 관리하는 디렉토리 구조가 정해져있다 
foods/templates/foods 이런 샌드위치 구조가 기억 나는가? 정적 파일을 넣어주는 디렉토리도 이와 똑같은 구조를 갖는다

foods 앱 디렉토리로 이동 -> 템플릿 파일을 넣어줬던것처럼 정적 파일을 위한 디렉토리를 만든다 -> foods 앱 안에 static이란 디렉토리를 만들어준다 -> static 디렉토리 안에 또 다시 앱이름으로된(foods) 디렉토리를 만든다
-> 이제 이 디렉토리 안에 정적파일을 넣어주면 되는데 한 디렉토리에 모든 정적파일을 넣어줘도 되지만 조금 더 이쁘게 구조화한다면 보통은 CSS JavaScript images fonts 등의 디렉토리를 추가적으로 만든다 (우리는 JavaScript는 지금 없다)
-> 만들어준다! -> 이제 각각의 디렉토리에 맞게 정적 파일을 넣주면 되는데 지금 우리의 정적파일들은 templates 디렉토리 안에 있다 templates 디렉토리 안의 정적파일들 디렉토리 안의 파일들을 새로 만든 정적파일들 디렉토리 안에 넣어준다
-> templates 디렉토리 안의 정적파일 디렉토리드들은 지워준다 (난 그냥 새로운 정적파이 디렉토리 안만들고 정적파일들 디렉토리 자체를 옮겼다) -> 이제 이 옮긴 정적파일들을 사용하도록 템플릿을 수정하면 된다
-> index.html을 연다 -> 맨 위에 {% load static %} 라고 적는다 -> 이건 템플릿 랭귀지 중 템플릿 태그라고 하는데 static에 있는 정적 파일들을 현재 이 템플릿에서 사용한다고 알려준다
-> 정적 파일을 사용한다고 알려줬으니 이제 템플릿에 있는 경로를 정적파일이 있는 위치로 바꿔주면 된다 -> CSS부터 해보자 href가 CSS파일의 경로다 이 부분을 {% static 'foods/css/styles.css'%} 이렇게 바꾼다
-> 이미지는 src가 이미지의 경로다 이 부분을 {% static 'foods/images/chicken.jpg'%} 이렇게 바꾼다 -> 그럼 이제 font는? CSS 파일이 fonts를 어떻게찾는가.... 웹퍼블리싱 수업 들어야하나?

Template과 Static의 폴더 구조
둘 다 샌드위치 구조이다 왜 이렇게 샌드위치 구조로 만들어야할까? -> 사이트가 복잡해지면 점점 앱이 여러개 생긴다 이 때 폴더구조가 샌드위치 구조가 아니면 문제가 발생한다
하나의 프로젝트 디렉토리에 여러개의 앱이 있고 그 앱 안에 templates 디렉토리가 있다 이 때 templates 디렉토리 안에 앱이름으로 된 디렉토리를 추가하지 않고 바로 html파일을 넣으면 어떻게 될까?
하나의 프로젝트에 A와 B라는 두개의 앱이 있고 그 안에 templates 폴더 그리고 templates 폴더 안에 바로 html 파일이 있다고 해보자 
-> 우리가 했던 예제와 같이 url 설정 끝낸 후 브라우저에 domain/A/index 를 열자 -> A 템플릿이 렌더링 되서 나온다 그럼 이번엔 domain/B/index를 열자 -> 근데 이번에도 A 템플릿이 렌더링되서 나온다 왜일까?
-> 프로젝트 앱의 settings.py로 가보자 -> TEMPLATES 로 가자 -> 'APP_DIRS': True, 이부분을 주목 -> 이 라인은 각각의 앱에 templates 디렉토리가 있으니까 템플릿 찾을 때 거기서 찾으라는 의미이다
-> 우리는 A,B 두개의 앱이 있으니까 이 상태로 index.html을 찾으려하면 settings.py의 INSTALLED_APPS에 등록된 순서대로 index 템플릿을 찾게된다 (이 경우 A가 먼저 등록되어있다) 그런데 index.html은 A에도
있고 B에도 있다 이 때 장고는 앱이 등록된 순서대로 templates 디렉토리를 뒤지다 먼저 등록된 A의 templates 디렉토리에서 index.html을 찾는다 -> 이렇게 겹치는 일이 없게 하기 위해 샌드위치 구조로 만든다

이미지와 같은 정적 파일 (static file)도 샌드위치 구조로 구성하는 이유는?
Template과 거의 비슷한데 살짝 다른 점이 있다 -> 우리가 개발할 때는 문제가 없는데 개발한 서비스를 배보할 때 문제가 생긴다
-> 배포 환경에서는 모든 정적파일들을 하나의 디렉토리로 모아서 사용하게 되는데 이 때 같은 이름의 파일이 있으면 충돌이 나게 된다 그런데 이 파일들을 각각의 앱 이름으로 되어있는 디렉토리에 모아주면 하나의 디렉토리에
모았을 때도 문제없이 사용할 수 있다

----------------------------------------------------------------------------------------------------------------------------------------------

Template Language (템플릿 언어) 이해하기
: 장고의 템플릿 언어는 화면을 구성하는 템플릿을 작성할 때 보다 편리하게 작성할 수 있도록 도와주는것이다
쉽게 말해 html문서를 작성할 때 프로그래밍을 하듯 작성할수 있게 해준다
언뜻 모습만 보면 html안에 마치 파이썬이 들어간 거처럼 보이지만 사실 그건 아니고 프로그래밍 구조와 유사한 기능을 제공하는 것이다

템플릿 언어는 크게 4가지 종류가 있다
1. 템플릿 변수 : 템플릿이 렌더될 때 우리가 넘겨준 객체로 대치된다 -> 우리가 지정한 데이터로 변환
2. 템플릿 태그 : 템플릿에 로직을 넣어준다 -> 템플릿 작성에 로직을 사용
3. 템플릿 필터 : 템플릿 변수를 특정한 형식으로 변환할 때 사용
4. 템플릿 주석 : 템플릿 언어의 주석처리를 담당

템플릿 변수
템플릿 변수는 중괄호 두개로 감싼 형태로 사용한다 {{변수명}}
이 템플릿 변수는 템플릿이 렌더될 때 우리가 지정해준 결과로 변환된다 (우리가 지정해준 데이터로 변환)
view에서 템플릿으로 원하는 데이터를 전달하고 탬플릿은 이 템플릿 변수를 이용해서 전달받은 데이터를 사용한다 즉 템플릿 변수는 view에서 템플릿으로 넘겨준 데이터로 해석되어 변환된다 (view에서 넘겨받은 값으로 전환)

템플릿 변수는 점 연산자를 지원한다
{{변수명.속성}}
이 연산자는 템플릿 변수 내부 속성에 접근할 때 사용한다
ex) codeit의 title 에 접근하고 싶으면 codeit.title이 된다

템플릿 필터
템플릿 변수 옆에 파이프 연산자(|)를 넣어 사용한다 -> {{변수명|필터}}
템플릿 변수를 특정한 형식으로 변환하기 위해 사용한다
ex) {{codeit|upper}} 의 경우 codeit 템플릿 변수가 변환되는 텍스트를 모두 대문자로 바꾸어준다

템플릿 태그
{% 태그 %}  -> 이런 형태로 사용된다
몇몇 태그는 시작되는 템플릿 태그와 종료되는 템플릿 태그 형태로 시작과 끝을 명시해서 사용한다 -> {% 태그 %}   {% end태그 %}
템플릿 태그는 템플릿을 작성할 때 로직을 함께 넣어서 템플릿을 편하게 작성할 수 있게 돕는다
예를 들어 for loop ( {% for %}  {% endfor %}  )을 이용해서 반복되는 부분을 간단하게 처리할 수 있고
템플릿 변수와 if else을 사용하여 조건에 따라 템플릿 달라지도록 할 수 있다
->
{% if %}
{% else %}
{% endif %}

그리고 템플릿 태그 block 을 이용해서 
->
{% block %}
{% endblock %}

중복되는 부분을 상속을 이용해 처리하기도 한다 -> 이 부분은 뒤에 자세하게


템플릿 주석
{# 주석 #}
템플릿 언어에서 주석처리를 하기 위함으로 위의 형태이다

------------------------------------------------------------------------------------------------------------------------------------------------------
Template Language 한 걸음 더

템플릿 언어 (Template Language)는 Django의 템플릿에서 사용 할 수 있는 특별한 문법으로 템플릿 변수, 템플릿 필터, 템플릿 태그, 템플릿 코멘트가 있습니다. 이번 노트에서는 템플릿 변수와 필터 그리고 태그에 대해 조금 더 알아볼텐데 아래 내용을 모두 외우려고 하지 말고 '이런식으로 사용하는구나' 정도로만 가볍게 읽어보세요 :)
템플릿 변수 (Template Variable)

{{ variable }}

템플릿 변수는 템플릿이 렌더될 때 해당 변수가 의미하는 값으로 변환됩니다. 뷰(View)에서 가공한 데이터를 템플릿으로 넘겨주면 템플릿에서는 템플릿 변수를 사용해 넘겨받은 데이터에 접근할 수 있습니다.
템플릿 변수의 점(.) 연산자

템플릿 변수는 점(.)을 사용해서 변수 안쪽 속성에 접근할 수 있습니다.

user = {"name" : "우재", "coffee" : True}

예를 들어 위와 같은 user 변수가 있다면, user.name으로 "우재"라는 안쪽 값에 접근 할 수 있다는 거죠. 이와 같은 점(.) 연산자는 다음과 같은 순서로 변수의 안쪽 속성에 접근을 시도합니다.

    변수를 사전형(dict)으로 생각하고 점(.) 연산자로 Key값 조회
    변수를 객체로 생각하고 내부 속성값 조회 또는 함수 호출
    변수를 리스트(list)로 생각하고 점(.) 연산자로 Index 조회

Django에서 템플릿의 점 연산자를 만나면 자동으로 위의 경우대로 순서대로 처리하며 알맞은 값으로 변환되지만 내가 접근 하려는 템플릿 변수가 어떤 자료형인지 알고 점(.)연산자를 사용해야지만 예기치 못한 에러를 방지 할수 있습니다.
템플릿 필터 (Template Filter)

{{ variable|filter }}

템플릿 변수에 파이프(|)를 쓰고 템플릿 필터를 사용하면 템플릿 변수를 특정 형식으로 변환 할 수 있습니다.

{{ variable|filter:args }}

일부 필터는 필터 뒤에 인자를 필요로 합니다. Django는 약 60개의 내장 템플릿 필터를 제공하며 개발자가 직접 필터를 정의해서 사용하는 것도 가능합니다. 아래는 몇 가지 내장 템플릿 필터입니다.
default

참조하는 템플릿 변수가 비어 있거나 부울형 False일 경우 변환되는 값을 지정합니다.

{{ variable|default:"coffee" }} 

변수가 비어 있거나 False면 coffee 라는 텍스트로 대체 됩니다.
capfirst

맨 첫글자를 대문자로 바꿔 줍니다.

{{ variable|capfirst }}

random

반복 가능한 템플릿 변수에 대해 무작위로 하나를 추출해 변환합니다.

{{ variable|random }}

만약 variable이 참조하는 값이 [ "a", "b", "c", "d" ] 인 리스트형이라면 템플릿 변수가 리스트 내의 하나의 원소로 대체 됩니다.
upper & lower

템플릿 변수를 대문자(upper) 또는 소문자 (lower)로 변환합니다.

{{ variable | upper }} , {{ variable | lower }}

ljust & rjust

주어진 길이 내에서 공백을 넣어 왼쪽 정렬(ljust) 또는 오른쪽 정렬(rjust)을 한 문자열로 변환합니다.

{{ variable|ljust:"length" }}, {{ variable|rjust:"length" }}

variable이 "codeit" 일 때 {{ variable|ljust:"10" }} 이라면 "codeit    "이 됩니다. 공백을 표시해서 보면 "codeit_ _ _ _"이런 형태인거죠.마찬가지로 만약 {{ variable|rjust:"10" }} 이라면 "    codeit"이 되겠죠?



이 밖에도 몇 가지 필터가 더 있는데 모두 외울 필요는 당연히 없고 필요할 때 찾아서 사용하면 됩니다. 더 많은 템플릿 필터에 대한 정보는 아래 Django 공식 문서를 참고하세요.
https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#ref-templates-builtins-filters
템플릿 태그 (Template Tag)

{% tag %}

템플릿 태그는 템플릿을 작성할 때 반복문, 조건문 등의 로직을 사용해서 마치 프로그래밍을 하듯 템플릿을 작성할 수 있게 해줍니다. Django가 기본적으로 제공하는 태그가 있지만, 개발자가 직접 태그를 정의해서 사용할 수도 있습니다.

{% tag %} ~ {% endtag %}

태그의 형태는 단독으로 사용하는 템플릿 태그와 여는 태그와 닫는 태그가 필요한 템플릿 태그가 있습니다. 아래는 몇 가지 기본 템플릿 태그입니다.
for

{% for obj in values %} ~ {% endfor %}

반복 가능한 객체를 반복하며 템플릿을 작성 할 수 있습니다. 아래처럼 말이죠.

{% for food in foods %} 
    <li> {{ food.name }} </li>
{% endfor %}

만약 목록을 역순으로 반복하고 싶다면 아래와 같이 사용 할 수 있습니다.

{% for food in foods reversed %} 
    <li> {{ food.name }} </li>
{% endfor %}

반복 가능한 객체가 비어 있거나 존재하지 않을 때는 아래와 같이 사용 할 수 있습니다.
아래는 만약 foods라는 객체가 비어있다면 {% empty %} 구문이 실행됩니다.

{% for food in foods %} 
    <li> {{ food.name }} </li>
{% empty %}
    <li> There is no food. </li>
{% endfor %}

if

{% if value1 %} ~ {% elif value2 %} ~ {% else %} ~ {% endif %}

파이썬에서 사용하던 조건문과 형태가 비슷하죠? 실제로 사용 할 때도 우리가 아는 조건문의 형태로 사용하면 됩니다.

{% if hungry %}
    <p> Let's eat! </p>
{% elif sleepy %}
        <p> You need some coffee. </p>
{% else %}
    <p> Go back to work. </p>
{% endif %}

with

{% with value1=value2 %} ~ {% endwith %}

복잡한 변수가 있을 때 '별명'을 붙이기 위해 사용합니다. with 구문 내에서는 value1을  value2 대신 사용할 수 있습니다.

이 밖에도 몇 가지 템플릿 태그가 더 있는데, 필터와 마찬가지로 필요할 때 찾아서 사용하면 됩니다. 템플릿 태그에 대한 더 많은 정보는 아래 Django 공식 문서를 참고하세요.
https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#ref-templates-builtins-tags
사용자 정의 필터와 태그

사용자 정의 템플릿 필터와 템플릿 태그를 사용하는 방법은 Django의 문법에 익숙해진 후에 별토의 레슨에서 다루도록 하겠습니다. 지금은 기본적인 템플릿 언어에 익숙해지는 것이 중요합니다. 만약 먼저 알고 싶다면 아래의 공식 문서를 참고하세요.
https://docs.djangoproject.com/en/2.2/howto/custom-template-tags/

-----------------------------------------------------------------------------------------------------------------------------------------------------

Can you apply multiple stylesheets to a single page? 
https://discuss.codecademy.com/t/can-you-apply-multiple-stylesheets-to-a-single-page/369792

------------------------------------------------------------------------------------------------------------------------------------------------------

팀플릿 중복 없애기

하나의 웹서비스는 무수히 많은 웹페이지로 이루어져있고 그 때 마다 중복되는 코드를 매번 쓰는 것은 비효율적이다 장고에서는 이런 템플릿의 반복적인 부분들을 템플릿 상속으로 해결할 수 있다
상속이란 파일들의 공통적인 부분들을 모아 부모 파일로 만들어두고 자식파일에서는 공통되는 부분은 부모 파일에서 상속받고 달라지는 부분만 작성한다
장고에서 템플릿 상속은 템플릿 태그인 {% block %} 과 {% extends %}를 사용해서 구현합니다

해보자 
VSCode 켜고 foods 앱의 index 템플릿으로 가자 뼈대가 되는 기본적인 부분을 부모 템플릿으로 만들어보자 
index 템플릿과 같은 디렉토리에 base.html을 만들자 -> index에 있는 모든 내용 복사해서 붙여놓자
base 템플릿 = 부모 템플릿, index 템플릿 = 자식 템플릿
뼈대가 되는 부분을 base에 남기고 변경되는 부분을 index 템플릿에 작성하도록 구조를 잡는다

{% load static %}
<!DOCTYPE html>
<html>
<head>
  <title>코스토랑</title>
  <meta charset="utf-8">
  <link rel="stylesheet" href= {% static 'foods/css/styles.css'%}>
</head>
<body>
  <div> July 16, 2020 </div>
  <hr/>

  <h1>코스토랑</h1>
  <h2>넌 코딩할때가 제일 이뻐</h2>
  
  <div class="food-container">

    <div class="food">
      <img src={% static "foods/images/chicken.jpg"%} width="300px" height="200px"/>
      <div class="info">
        <h3>코딩에 빠진 닭</h3>
        <P>주머니가 가벼운 당신의 마음까지 생각한 가격!</p>
        <a href="#">메뉴 보기</a>
      </div>
    </div>
    
    <div class="food">
      <img src={% static "foods/images/sushi.jpg"%} width="300px" height="200px"/>
      <div class="info">
        <h3>코코스시</h3>
        <P>주머니가 가벼운 당신의 마음까지 생각한 가격!</p>
        <a href="#">메뉴 보기</a>
      </div>
    </div>
    
    <div class="food">
      <img src={% static "foods/images/burger.jpg"%} width="300px" height="200px"/>
      <div class="info">
        <h3>코데리아</h3>
        <P>주머니가 가벼운 당신의 마음까지 생각한 가격!</p>
        <a href="#">메뉴 보기</a>
      </div>
    </div>
    
    <div class="food">
      <img src={% static "foods/images/bibimbap.jpg"%} width="300px" height="200px"/>
      <div class="info">
        <h3>코가네</h3>
        <P>주머니가 가벼운 당신의 마음까지 생각한 가격!</p>
        <a href="#">메뉴 보기</a>
      </div>
    </div>

    <div class="food">
      <img src={% static "foods/images/banana.jpg"%} width="300px" height="200px"/>
      <div class="info">
        <h3>나에게 뭘 바나나</h3>
        <P>주머니가 가벼운 당신의 마음까지 생각한 가격!</p>
        <a href="#">메뉴 보기</a>
      </div>
    </div>

    <div class="food">
      <img src={% static "foods/images/croquette.jpg"%} width="300px" height="200px"/>
      <div class="info">
        <h3>귀여운 고로케</h3>
        <P>주머니가 가벼운 당신의 마음까지 생각한 가격!</p>
        <a href="#">메뉴 보기</a>
      </div>
    </div>

    <div class="food">
      <img src={% static "foods/images/pumpkin_soup.jpg"%} width="300px" height="200px"/>
      <div class="info">
        <h3>단호박 단호박죽</h3>
        <P>주머니가 가벼운 당신의 마음까지 생각한 가격!</p>
        <a href="#">메뉴 보기</a>
      </div>
    </div>
    
  </div>
</body>
</html>



일단 food-container 안에 있는 모든 부분을 지운다



{% load static %}
<!DOCTYPE html>
<html>
<head>
  <title>코스토랑</title>
  <meta charset="utf-8">
  <link rel="stylesheet" href= {% static 'foods/css/styles.css'%}>
</head>
<body>
  <div> July 16, 2020 </div>
  <hr/>

  <h1>코스토랑</h1>
  <h2>넌 코딩할때가 제일 이뻐</h2>
  
  <div class="food-container">
    
  </div>
</body>
</html>



food-container 안쪽 음식들은 계속해서 업데이트되며 바뀌는 부분이니까 자식 템플릿인 index에 구현한다
이제 지워진 이부분에 자식 템플릿인 index의 코드가 들어갈 수 있도록 연결해주면 된다
자식 템플릿에서 코드를 넣어주는 부분을 block으로 지정한다

{% block %}
{% endblock %}

블록의 이름도 정한다 food-container라고 직관적이게 똑같이 정했다

{% block food-container %}
{% endblock food-container %}
-> 이걸 base 템플릿의 index에 들어갈 내용을 지워준 곳에 쓴다 자식 템플릿에서 food-container 블록을 작성하면 딱 이곳에 들어가게 되는것이다
 
<div> July 16, 2020 </div> 자주 변경되는 이 날짜 부분도 블록으로 지정하자 July 16, 2020을 지우고 블록을 추가한다
<div> 
{% block date-block %}
{% endblock date-block %}
</div>
 
부모 템플릿 완성!
->
{% load static %}
<!DOCTYPE html>
<html>
<head>
  <title>코스토랑</title>
  <meta charset="utf-8">
  <link rel="stylesheet" href= {% static 'foods/css/styles.css'%}>
</head>
<body>
  <div> 
      {% block date-block %}
      {% endblock date-block %} 
  </div>
  <hr/>

  <h1>코스토랑</h1>
  <h2>넌 코딩할때가 제일 이뻐</h2>
  
  <div class="food-container">
    {% block food-container %}
    {% endblock food-container %}
  </div>
</body>
</html>

이제 자식 템플릿인 index에서 부모 템플릿인 base를 상속받아 사용하면 된다
index 템플릿으로 가서 부모 템플릿에 있는 내용은 모두 지워준다

    <div class="food">
      <img src={% static "foods/images/chicken.jpg"%} width="300px" height="200px"/>
      <div class="info">
        <h3>코딩에 빠진 닭</h3>
        <P>주머니가 가벼운 당신의 마음까지 생각한 가격!</p>
        <a href="#">메뉴 보기</a>
      </div>
    </div>
    
    <div class="food">
      <img src={% static "foods/images/sushi.jpg"%} width="300px" height="200px"/>
      <div class="info">
        <h3>코코스시</h3>
        <P>주머니가 가벼운 당신의 마음까지 생각한 가격!</p>
        <a href="#">메뉴 보기</a>
      </div>
    </div>
    
    <div class="food">
      <img src={% static "foods/images/burger.jpg"%} width="300px" height="200px"/>
      <div class="info">
        <h3>코데리아</h3>
        <P>주머니가 가벼운 당신의 마음까지 생각한 가격!</p>
        <a href="#">메뉴 보기</a>
      </div>
    </div>
    
    <div class="food">
      <img src={% static "foods/images/bibimbap.jpg"%} width="300px" height="200px"/>
      <div class="info">
        <h3>코가네</h3>
        <P>주머니가 가벼운 당신의 마음까지 생각한 가격!</p>
        <a href="#">메뉴 보기</a>
      </div>
    </div>

    <div class="food">
      <img src={% static "foods/images/banana.jpg"%} width="300px" height="200px"/>
      <div class="info">
        <h3>나에게 뭘 바나나</h3>
        <P>주머니가 가벼운 당신의 마음까지 생각한 가격!</p>
        <a href="#">메뉴 보기</a>
      </div>
    </div>

    <div class="food">
      <img src={% static "foods/images/croquette.jpg"%} width="300px" height="200px"/>
      <div class="info">
        <h3>귀여운 고로케</h3>
        <P>주머니가 가벼운 당신의 마음까지 생각한 가격!</p>
        <a href="#">메뉴 보기</a>
      </div>
    </div>

    <div class="food">
      <img src={% static "foods/images/pumpkin_soup.jpg"%} width="300px" height="200px"/>
      <div class="info">
        <h3>단호박 단호박죽</h3>
        <P>주머니가 가벼운 당신의 마음까지 생각한 가격!</p>
        <a href="#">메뉴 보기</a>
      </div>
    </div>
    
    
이제 이 템플릿이 자식 템플릿으로서 어떤 부모 템플릿을 사용할 것인지 명시해줘야한다
-> 
{% extends './base.html' %}
{% load static %}

주의할 점은 extends 템플릿 태그는 항상 템플릿의 가장 첫줄에 나와야한다
load static 태그를 남겨둔 이유는 자식 템플릿에서도 정적파일에 접근하기 때문이다
이제 부모 태그에서 블록처리했던 부분들을 채워보자

{% extends './base.html' %}
{% load static %}

{% block date-block %}
  <div> July 16, 2020 </div>
{% endblock date-block %}

{% block food-container %}
  <div class="food">
    <img src={% static "foods/images/chicken.jpg"%} width="300px" height="200px"/>
    <div class="info">
      <h3>코딩에 빠진 닭</h3>
      <P>주머니가 가벼운 당신의 마음까지 생각한 가격!</p>
      <a href="#">메뉴 보기</a>
    </div>
  </div>

  <div class="food">
    <img src={% static "foods/images/sushi.jpg"%} width="300px" height="200px"/>
    <div class="info">
      <h3>코코스시</h3>
      <P>주머니가 가벼운 당신의 마음까지 생각한 가격!</p>
      <a href="#">메뉴 보기</a>
    </div>
  </div>

  <div class="food">
    <img src={% static "foods/images/burger.jpg"%} width="300px" height="200px"/>
    <div class="info">
      <h3>코데리아</h3>
      <P>주머니가 가벼운 당신의 마음까지 생각한 가격!</p>
      <a href="#">메뉴 보기</a>
    </div>
  </div>

  <div class="food">
    <img src={% static "foods/images/bibimbap.jpg"%} width="300px" height="200px"/>
    <div class="info">
      <h3>코가네</h3>
      <P>주머니가 가벼운 당신의 마음까지 생각한 가격!</p>
      <a href="#">메뉴 보기</a>
    </div>
  </div>

  <div class="food">
    <img src={% static "foods/images/banana.jpg"%} width="300px" height="200px"/>
    <div class="info">
      <h3>나에게 뭘 바나나</h3>
      <P>주머니가 가벼운 당신의 마음까지 생각한 가격!</p>
      <a href="#">메뉴 보기</a>
    </div>
  </div>

  <div class="food">
    <img src={% static "foods/images/croquette.jpg"%} width="300px" height="200px"/>
    <div class="info">
      <h3>귀여운 고로케</h3>
      <P>주머니가 가벼운 당신의 마음까지 생각한 가격!</p>
      <a href="#">메뉴 보기</a>
    </div>
  </div>

  <div class="food">
    <img src={% static "foods/images/pumpkin_soup.jpg"%} width="300px" height="200px"/>
    <div class="info">
      <h3>단호박 단호박죽</h3>
      <P>주머니가 가벼운 당신의 마음까지 생각한 가격!</p>
      <a href="#">메뉴 보기</a>
    </div>
  </div>
{% endblock food-container %}

블록을 먼저 명시하고 블록 안에 우리가 채울 내용을 넣으면 된다
이렇게 되면 view에서 index 템플릿을 렌더할 때 부모 템플릿인 base 템플릿에서 템플릿을 가져오고 각각의 블록 안에 우리가 자식 템플릿에
넣어준 내용을 넣어서 하나의 페이지를 구성한다 -> 개발서버를 실행하고 잘나오는지 확인해보자

한가지 더 만약 자식 템플릿에서 블락 안에 들어갈 내용을 따로 구현해주지 않는다면?
부모 템플릿에 있는 내용을 그대로 사용하게 된다 
예를 들어 부모 템플릿의 date-block 블락안에 div 태그를 넣고 날짜를 적은 다음 자식 템플릿에서 이를 구현해주지 않으면(아예 자식 템플릿에서 해당 블락 태그를 을 지워버린다) 부모 템플릿의 내용이 그대로 구현된다 
자식 템플릿에 구현을 해주면 자식 템플릿의 내용이 덮어쓰기 된다

-------------------------------------------------------------------------------------------------------------------------------------------------
index.html과 base.html이 같은 폴더 내에 있어서

'base.html'로 적었더니 오류가 뜨네요..

styles.css라는 css파일이 html파일과 같은 폴더에 있을땐 link태그의 href값을 'style.css'로 해도 괜찮던데

부모템플릿은 왜 './base.html'로 해야 하는거죠??


기본적으로 base.html 만 써주게 되면

templates 폴더에서 base.html 파일이 있는지 찾게 됩니당.

하지만 작성한 구조는 앱이름/templates/앱이름이기 때문에 검색이 안되게 되어용

그래서 지금과 같이 상대 경로를 통해 작성해주시거나

settings.py 에서

'DIRS': [ os.path.join(BASE_DIR, 'foods/templates/foods')],

요렇게 작성해주셔야지만 base.html 파일만 써도 읽을 수 있게 됩니당
-----------------------------------------------------------------------------------------------------------------------------------------------

템플릿 수정 없이 계속 변하는 동적 웹페이지 만들기
ex) 방문할 때 마다 방문자 수가 올라간다거나 날짜가 자동으로 바뀌는 등의 동적 웹페이지

일단 빠르개 MVT 구조를 복습하고 오자

URL을 참조해서 뷰를 보고 그 안에서 요청한 기능을 수행하는 함수를 호출 그리고 필요하다면 모델을 이용해서 데이터베이스와 소통하고 가져온 데이터를 알맞게 처리한 다음
템플릿을 통해서 화면을 만들고 응답으로 돌려준다

URL -> View -> 함수 호출 -> Model -> 데이터베이스 -> [View -> Template -> 화면]

위의 MVT 구조에서 지금 뷰에서 데이터를 가공한 다음 템플릿에 보내 화면을 자동으로 만드는 과정을 해보자

costuarant 프로젝트의 foods 앱의 index 템플릿을 보면 

{% block date-block %}
  <div> July 16, 2020 </div>
{% endblock date-block %}

날짜 부분이 정적으로 구현화되어있다 이 부분을 바꾸어보자 
MVT 에서 로직을 담당하는 부분은? View 
views.py 로 가서 오늘의 날짜를 가져오는 로직을 만들자 -> 파이썬에서 날짜와 시간을 다룰 때 사용하는 모듈인 datetime을 이용하자

먼저 import 부터 해주자
from datetime import datetime

이 datetime 모듈로 현재 시간과 날짜를 구하는 방법 -> datetime.today()

views.py 의 index 함수를 보자

def index(request):
    return render(request, 'foods/index.html')

today란 변수를 만들어주자

def index(request):
    today = datetime.today()
    return render(request, 'foods/index.html')
    
시험 삼아 출력도 해볼까?

def index(request):
    today = datetime.today()
    print(today)
    return render(request, 'foods/index.html')

여기서 출력되는 값은 개발서버의 콘솔에만 출력된다

개발서버를 켜고 foods/index로 가보자 날짜는 정적 날짜를 입력한 그대로다 today 변수의 값은 개발서버를 열 때 터미널 콘솔에 출력되었다

코드를 바꿔주자

def index(request):
    today = datetime.today().date() #우리는 시간은 안쓸거니 이렇게 해주자
    print(today)
    return render(request, 'foods/index.html')
    
자 그럼 이 today 변수를 어떻게 템플릿에 넣을까?
뷰에서 템플릿으로 데이터를 넘길 때 이용하는 것이 바로 render 함수의 세번째 parameter다!
그리고 이 때 넘겨주는 데이터는 사전형에 담아서 넘겨줘야한다 (dictionary)

def index(request):
    today = datetime.today().date() 
    context = {'date' : today}
    return render(request, 'foods/index.html', context = context) #세번째 파라미터에 우리가 만든 context 변수를 매칭시킨다
    
이제 index 템플릿으로 가자
뷰에서 넘겨주는 context에 접근해서 데이터를 가져온 후 

{% block date-block %}
  <div> </div>
{% endblock date-block %}

이 안에 넣으면 된다

템플릿 언어중에서 뷰에서 템플릿으로 넘긴 데이터로 변환되는 것은? 템플릿 변수 ( {{ 템플릿 변수 }} )
이 중괄호 안에 context의 key를 넣어주자 이 key로 context의 value인 today에 접근하게된다

{% block date-block %}
  <div>{{date}}</div>
{% endblock date-block %}

다됬다! 개발서버 열고 확인해보자

Tip

Datetime 모듈에 대해 더 궁금하다면 다음의 공식문서를 참고해보세요.
Datetime 모듈 공식문서 바로가기  https://docs.python.org/3/library/datetime.html
----------------------------------------------------------------------------------------------------------------------

파이썬 함수 사용 팁

자, 정신없이 달려왔으니까 잠깐 쉬어 가는 시간으로 파이썬 기초에서 배웠던 함수에 대해서 다시 한번 알아보고 가도록 할게요. 파이썬의 함수에는 크게 네 가지 형태가 있습니다.
함수를 정의하는 네가지 방법
1. 매개변수와 반환 값이 없는 형태

가장 기본 형태는 아래와 같습니다. 매개변수도 없고 반환 값도 없는 형태로 호출할 때는 함수명()을 이용해서 호출합니다.

def 함수명():
    로직 ...

#example
def greetings():
    print("Hello!")

2. 매개변수는 없지만 반환 값은 있는 형태

매개변수는 없지만 반환 값은 있는 형태도 있습니다. 마찬가지로 호출할 때는 함수명()을 이용하면 됩니다.

def 함수명():
    return 반환 값

#example
def get_pi():
    pi = 3.141592
    return pi

3. 매개변수는 있지만 반환 값이 없는 형태

매개변수는 있지만 반환값이 없는 형태도 있을 수 있겠죠. 호출할 때는 전달 인자를 넣어서 함수명(전달 인자) 형태로 호출합니다.

def 함수명(매개변수1, 매개변수2, ...):
    로직 ...

#example
def display(name, age):
    print("Name: ", name, "Age: ", age)

4. 매개변수와 반환 값이 모두 있는 형태

가장 많이 쓰이는 형태로 매개변수와 반환 값이 모두 있는 형태입니다. 호출할 때는 전달 인자를 넣어서 함수명(전달 인자) 형태로 호출합니다.

def 함수명(매개변수1, 매개변수2, ...):
    로직 ...
    return 반환 값

#example
def index_view(request):
    return render(request, "<h1>템플릿 입니다.</h1>")

인자를 전달하는 두가지 방법

함수를 호출할 때 인자를 전달하는 방법에는 크게 두가지가 있습니다. 위치로 인자를 전달하는 위치 전달 인자(Positional Arguments)와 키워드로 인자를 전달하는 키워드 전달 인자(Keyword Arguments)입니다.
위치 전달 인자(Positional Arguments)

위치 전달 인자는 우리가 계속 사용하던 방식으로 함수를 정의할 때 매개변수를 써준 순서대로 즉 매개변수가 정의된 위치에 맞게 인자가 전달되는 방식입니다.

# 함수 정의
def calc(a, b, c):
   result = 100 * a + 10 * b + c
   print(result)
   return result

# 함수 호출
calc(1, 2, 3)

# 결과
123

예를들어, calc 함수를 정의할 때 a, b, c 순서대로 매개변수를 적어 주었으므로 calc(1, 2, 3)로 호출하게 되면 a에는 1이, b에는 2가, c에는 3이 위치에 맞게 들어가게 되는 것이죠. 만약 calc(3, 2, 1)로 호출하게 되면 a부터 순서대로 3, 2, 1이 들어가서 결과는 321이 됩니다.
키워드 전달 인자(Keyword Arguments)

키워드 전달 인자는 인자를 전달할 때 식별자를 앞에 붙여서 명시적으로 전달하는 방식입니다. 이렇게 말이죠.

# 함수 정의 (위와 동일해요)
def calc(a, b, c):
   result = 100 * a + 10 * b + c
   print(result)
   return result

# 함수 호출
calc(a=1, b=2, c=3)

# 결과
123

매개변수에 어떤 값을 전달할지를 명시적으로 지정하면, 매개변수가 원래 정의된 순서와 관계없이 함수를 호출할 수 있습니다

# 함수 호출
calc(c=1, a=2, b=3)

# 결과
231

이렇게 함수 호출 시에 식별자와 함께 전달되는 인자를키워드 전달 인자(Keyword Argument)라고 합니다.
그럼 뭐가 더 좋은 건가요?

둘 중에 뭐가 더 좋다고 말하기는 어렵고 두 가지 방법 모두 사용됩니다. 키워드 전달 인자를 사용하면 전달 인자를 키워드와 함께 쓰기 때문에 코드를 조금 더 직관적으로 작성할 수 있다는 장점이 있지만 코드의 유연성을 떨어뜨립니다.

예를 들어 함수 정의부에서 매개변수의 이름이 다음과 같이 변경된다면

# 함수 재정의
def calc(d, e, f):
   result = 100 * d + 10 * e + f
   print(result)
   return result

위치 전달 인자를 사용한 기존의 코드는 별다른 수정 없이도 기존과 같은 결과를 얻을 수 있지만

# 함수 호출
calc(1, 2, 3)

# 결과
123

키워드 전달 인자를 사용했다면 해당 키워드가 존재하지 않기 때문에 에러가 나게 됩니다.

# 함수 호출
calc(a=1, b=2, c=3)

# 결과
# TypeError: calc() got an unexpected keyword argument 'a'

우리는 기본적으로 위치 전달 인자를 사용하고 키워드 전달 인자는 필요할 경우에 사용하도록 하겠습니다.

매개변수에 대한 추가적인 내용은 파이썬 강의에서 다루도록 하고 지금은 두 가지 방법이 있다는 것을 알고 사용하는 방법을 익혀두는것이 중요합니다.

----------------------------------------------------------------------------------------------------------------------------------------
실습 문제

이런! 코스토랑 메뉴판의 날짜가 과거에 머물러 있네요. 매일 자동으로 웹 페이지의 날짜가 변경 되도록 변경해주세요. view에서 데이터를 가공해서 template으로 넘겨 화면에 표시하면 됩니다. 아래를 참고하면서 각 단계가 무엇을 하는지 생각하며 작성해주세요.

    views.py의 index view를 수정합니다. 아래를 참고하여 dateime 모듈을 이용해 오늘 날짜를 가져와서 today 변수에 담아 주세요.

    from datetime import datetime
    datetime.now().date() #오늘 날짜 가져오기
    str(datetime.now().date()) # 형식 변환하기

    "today"를 Key로 하고 가져온 날짜를 value로 하는 사전형 데이터를 만들어서 context 변수에 담아주세요.

    render 함수의 세 번째 인자로 context 데이터를 템플릿으로 전달해주세요.

    index 템플릿을 열고 날짜가 표시되는 부분을 템플릿 변수를 이용해 변경해주세요.

-----------------------------------------------------------------------------------------------------------------------------------------

* time zone
장고 프로젝트 설정시 settings.py 에 타임존이 UTC로 설정되어있다 -> 웹페이지를 만들고 datetime 모듈을 이용해 오늘 날짜 시간을 동적으로 출력하면 UTC 시간이 나온다
UTC 세팅을 US/Pacific로 바꿔  LA 시간으로 바꾸긴 했는데 전세계에서 접속하는 사람마다 다른 시간을 보게할 수 있을까?

Timzone 문제는 신경을 많이 써야하는 문제입니당.

  

이건 기준을 어떻게 두냐의 문제인 것 같은데, DB 에 저장하는 것은 UTC 도 많이 사용합니다.

이 시간을 보여주는 것만 말씀하신대로 현지 시간대로 맞추면 되는거죵.

  

https://spoqa.github.io/2019/02/15/python-timezone.html

https://devlog.jwgo.kr/2020/10/28/using-timezone-in-django/

https://8percent.github.io/2017-05-31/django-timezone-problem/

  

요 내용들을 참고해보시면 도움이 되실거라 생각해용
-----------------------------------------------------------------------------------------------------------------

장고의 우아한 URL 
장고에서 url을 처리하면 우리가 원하는데로 쉽게 url을 설계할 수 있고 직관적으로 이해할 수 있다 이번 레슨이 끝나면 url을 좀 더 체계적으로 관리할 수 있게된다

이번에는 각각의 음식에 대한 상세 페이지를 만들어보자
먼저 치킨에 해당하는 페이지를 만들어볼까나

foods 앱 안의 urls.py로 가서 치킨에 대한 url을 만들어준 후 views로 가서 chicken 함수를 만들고 간단하게 chicken template을 렌더해서 돌려주게 만들자

urlpatterns = [
    path('index/', views.index)
    path('chicken/', views.chicken)
]
-> urls.py에 chicken 추가

def chicken(request):
    return render(request, 'foods/chicken.html')
-> chicken 함수

이제 chicken 템플릿을 만들어줘야한다 -> templates/foods 디렉토리 안에 만들고 코드를 대충 좀 써준다 -> 개발서버 실행후 foods/chicken 페이지가 잘 나오는지 확인 

다시 돌아와서 index 템플릿으로 가자 그리고 메뉴 보기에 우리가 만들어준 url을 넣자 -> # 대신 /foods/chicken 으로 바꾸자!! 여기서 잠깐!! foods 앞에 /을 절대 빼먹어선 안된다!!! 아니면 아예 ../chicken 으로 경로를 써라

chicken 템플릿에 돌아가기 버튼 추가 -> <a href = '/foods/index'>돌아 가기</a>

자 이제 치킨은 됬고 모든 음식에 대해서 상세 페이지를 만들려면? 
urls.py 에 url을 설정해줘야 된다 근데 음식이 100개면 100개 설정해줘야하는데 이러한 url을 이쁘게 정리하는 방법이 있다
장고에서는 음식처럼 일정한 패턴을 가지고 입력하게 되는 url에 대해 경로 변수 (path variable)을 이용한 Dynamic URL(동적 url)을 지원합니다 그리고 이러한 장고의 url 처리 방식을 장고의 우아(elegant)한 url이라 한다

foods 앱의 urls.py에서 만들었던 chicken url을 지워준다  -> delete  path('chicken/', views.chicken),

그리고 다음과 같은 라인을 입력하라 -> path('menu/<str:food>/', views.food_detail)
<str:food> -> 이 부분이 동적으로 바뀌는 url을 변수를 이용해 처리할 수 있게 해준다 (경로 변수)
menu/<str:food>/ 이 부분을 쉽게 설명하면 url에서 menu 다음에 / 즉 경로 구분 기호를 제외한 모든 url을 문자열로 보고 food애 담아서 food_detail 함수를 호출할 때 인수로 넣어준다
그리고 str 대신 0 또는 양의 정수와 일치하는지 체크하는 int, 하이픈 또는 언더바로 연결된 문자열과 일치하는지 체크하는 slug 등이 있다 

views.py로 가서 chicken 함수를 지워주고 food_detail 함수를 만들자

def food_detail(request):

자 여기서 view 함수는 첫번째 파라미터로 request를 받는다 그런데 food_detail은 앞에서 url에서 넘어온 값의 일부를 <str:food> 여기 food 변수에 담아서 food_detail 뷰를 호출할 때 인수로 넘겨준다
그러니까 food_detail을 정의할 때 넘어올 변수를 받아줄 파라미터를 넣어줘야한다
->
def food_detail(request, food):

그 다음은 우리가 하던데로 렌더하도록 한다
->
def food_detail(request, food):
    return render(request, 'foods/detail.html')
    
자 그러니까 만약 url에서 menu/chicken 으로 넘어오면 chicken이라는 단어가 문자열로 취급되어 food란 변수에 들어가고 이 food는 food_detail 뷰를 호출할 때 인수로 들어간다
그렇게되면 food_detail 뷰가 이 food라는 파라미터로 넘어온 chicken 이라는 문자열을 받게된다 자 이렇게 음식 이름을 받았으니 이 음식을 화면에 표시하려면 뷰에서 템플릿으로 데이터를 넘겨줘야한다 
-> 사전형에 담아 render 함수의 세번째 인수로 넘겨주면 된다 -> context = {'name' = food}
->
def food_detail(request, food):
    context = {'name' = food}
    return render(request, 'foods/detail.html', context = context)

자 이제 남은것은 detail 템플릿을 만드는것

templates 안에 detail.html 을 만든다 여기선 간단하게 h2 태그 안에 음식 이름만 출력해보도록 하자
->
<h2>{{name}}</h2>

개발 서버를 켜고 domain/foods/menu/chicken 해보자 -> chicken 나옴, pasta로 해보자 -> pasta 나옴 헐 파스타는 메뉴에 없는건뎅?

-----------------------------------------------------------------------------------------------------------------------------

Django의 URL 처리

Django의 URL 처리 방식은 직관적이고 자주 변경되지 않는 구조로 되어 있습니다.
URLconf (urls.py)

Django에서 URL을 처리하기 위해서는 URLconf 모듈 즉 urls.py를 작성해야 합니다. 아래는 URLconf의 예시입니다.

# urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('URL', views.view)
]

URL 처리 순서

    처음 요청이 들어오면 Django는 맨 처음 사용할 URLConf 모듈을 찾습니다. 따로 변경하지 않았다면 프로젝트 앱 내 settings.py의 ROOT_URLCONF 설정을 사용합니다.
    ROOT_URLconf로 정의된 URLConf 모듈을 보고 urlpatterns 리스트 안쪽의 django.urls.path() 함수를 순서대로 실행합니다.
    요청과 일치하는 URL 패턴이 있다면 django.urls.path() 함수에 따라 view를 호출하거나, 일치하는 URL 패턴 다음의 URL을 하위 URLconf 모듈로 넘깁니다.

from django.urls import path
from django.urls import include
from . import views

urlpatterns = [
    path('music/', views.player),
    path('video/', include('videoApp.urls')),
    # URL이 '~/video/lecture/django' 라면
    # videoApp의 URLconf에는 'lecture/django'가 넘어갑니다.
]

Path 함수 알아보기

path 함수는 다음과 같이 정의되어 있고 총 4개의 인자를 갖습니다.

django.urls.path

path(route, view, kwargs=None, name=None)

route

URL 문자열을 인수로 받으며 경로 변수(Path Converter)를 사용하여 URL의 일부를 view의 인수로 보낼 수 있습니다.
Path converters

Django에서 기본으로 제공하는 경로 변환기 이하 경로 변수는 5가지가 있습니다.

    str : 경로 구분 기호(/)를 제외한 모든 문자열과 매칭됩니다.
    int : 0 또는 양의 정수와 매칭됩니다.
    slug : 문자, 숫자, 하이픈(-), 밑줄(_)로 구성된 문자열과 매칭됩니다.
    uuid : 범용 고유 식별자(UUID)와 매칭 됩니다. UUID에 관한 내용은 여기서 다루지 않겠습니다.
    다음 문서를 참고하세요. (https://ko.wikipedia.org/wiki/범용고유식별자)
    path : 경로 구분 기호(/)를 포함한 모든 문자열과 매칭 됩니다.

view

함수형 view 또는 클래스 기반 view가 들어갈 수 있고 우리가 위에서 적어준 것처럼 include를 사용해서 다른 URLconf 모듈로 연결할 수도 있습니다.
kwargs

view에 추가 인자를 전달 할 때 사용 합니다.
name

path 함수가 가지는 URL 패턴에 이름을 붙여 주기 위해 사용하는데 URL을 직접 템플릿에 적지 않게 해주고 URL을 직관적으로 참조할 수 있게 해줍니다.

kwargs와 name 전달 인자는 Django가 더 익숙해진 다음에 뒤에서 같이 다뤄 볼 예정입니다.
Django의 URL 구조에 대해 더 알고 싶다면 공식 문서를 참고하세요.
https://docs.djangoproject.com/en/2.2/topics/http/urls/
--------------------------------------------------------------------------------------------------------------------------------
템플릿 뷰 더 연습하기 

URL - 경로 변수 이용
View - 데이터 가공 후 템플릿으로 전달
Template - 템플릿 언어를 이용해서 데이터를 사용

다시 costaurant의 foods 앱으로 가보자 
 path('menu/<str:food>/', views.food_detail) -> 여기서 menu의 뒤에 경로를 구분하는 /가 나오니 않는 모든 url을 문자열로 처리해서 food변수에 담는다
위의 pasta 처럼 아무 글자나 입력해도 같은 템플릿 형식으로 페이지에 나타나게 된다 이 부분을 개선하면서 음식 이름 뿐만 아니라 세부사항까지 나오도록 해보자

views.py 로 가자

def food_detail(request, food):
    context = {'name' : food}
    return render(request, 'foods/detail.html', context = context)

여기서 food에 담겨오는 내용이 우리가 원하는 음식에 대해서만 동작해야한다 -> 조건문 if!
디테일 함수를 다음과 같이 고쳐주자

def food_detail(request, food):
    context = dict() #빈 사전형 생성
    if food == 'chicken':
        context['name'] = '코딩에 빠진 닭'
        context['description'] = '주머니가 가벼운 당신의 마음까지 생각한 가격 !'
        context['price'] = 10000
        context['img_path'] = 'foods/images/chicken.jpg'
    return render(request, 'foods/detail.html', context = context)
    
디테일 템플릿도 다음과 같이 고쳐주자

{% load static %}   #밑에 정적파일인 이미지를 사용하기 때문에 써줘야한다
<h2>{{name}}</h2>
<div>{{description}}</div>
<p>{{price}} 원</p>
<img src={% static {{ima_path}} %}/>  #과연 이게 맞을까?

이제 개발서버 켜고 /foods/menu/chicken 으로 접근해보면 맨 마지막 줄이 템플릿 문법 에러가 나온다
-> 장고에서는 템플릿 태그 안에 템플릿 변수를 중첩해서 사용할 수 없다!

지금과 같이 정적 경로를 세밀하게 컨트롤하고 싶을 때 사용하는 템플릿 태그가 있다
-> {% get_static_prefix %}{{img_path}}   -> static 정적경로를 사용하는 앞부분을 붙이고 우리가 원하는 경로를 템플릿 변수로 넣어준것이다

{% load static %}   #밑에 정적파일인 이미지를 사용하기 때문에 써줘야한다
<h2>{{name}}</h2>
<div>{{description}}</div>
<p>{{price}} 원</p>
<img src={% get_static_prefix %}{{ima_path}}/> 

다음과 같이 고쳐주고 개발서버 켜고 다시 /foods/menu/chicken에 접근 -> 잘만나옴
아직까진 pasta 같이 url을 아무거나 해도 페이지가 다 나오는데 이건 다음에 고쳐보자
---------------------------------------------------------------------------------------------------
