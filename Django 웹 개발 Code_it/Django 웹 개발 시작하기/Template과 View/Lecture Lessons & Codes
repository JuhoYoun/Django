Tmeplate 적용하기

html/css 웹 퍼블리싱 강의에서도 html과 css를 이용해 웹페이지를 만들었는데 django를 사용하면 뭐가 달라지는가?
이전에 만들었던 방식의 웹사이트는 HTML CSS 폰트 그리고 이미지로 이루어져있다 (template 적용하기 lecture example 파일 참조)
만약 여기에 음식 하나를 추가하고 싶다면? index.html (lecture example 프로젝트의 costaurant/foods/templates/foods/index.html)을 열고 아래로 내려가서
food class 태그를 새로 작성하고 음식 사진을 이미지 폴더에 놓고 이미지 경로를 다시 적어줘야한다 음식 설명도 하나하나 바꿔줘야한다 
게다가 이 html 코드에서 날짜 부분은 매일 바꿔줘야되게 디자인되어있다 -> 정적으로 내용이 고정되어 있는것이 불편하다
쟝고를 사용해서 구현하면 각각의 음식에 대한 내용은 데이터베이스에서 가져오고 날짜와 같이 매번 달라지는 부분들이 변경될 때 마다 동적으로 새로운 페이지를 만들 수 있다

직접 해볼까요~

실습파일

templates_03_01 (css, fonts, images, html 파일)

코드잇 실행기에는 foods/templates/foods 디렉토리 안에 css, fonts, images 디렉토리가 미리 생성되어 있습니다.
바로 서버를 실행해서 결과를 확인해보세요.

이 템플릿 파일을 장고 프로젝트에 옮긴다 -> 기존의 templates/foods/index.html 파일은 지워주고 실습파일들을 여기다 풀어준다 -> 이제 개발서버를 켜고 주소창에 domain/foods/index를 처보자
-> template이 잘 render되서 나오는데 css와 image가 적용이 안되있다 -> 다음 강의로

Static Files (정적 파일)
: html 파일을 제외하고 웹 페이지를 rendering 하는 과정에서 필요한 추가적인 파일 예를 들어 CSS나 JavaScript, 이미지, 폰드 등의 파일

장고는 이런 정적파일을 관리하는 디렉토리 구조가 정해져있다 
foods/templates/foods 이런 샌드위치 구조가 기억 나는가? 정적 파일을 넣어주는 디렉토리도 이와 똑같은 구조를 갖는다

foods 앱 디렉토리로 이동 -> 템플릿 파일을 넣어줬던것처럼 정적 파일을 위한 디렉토리를 만든다 -> foods 앱 안에 static이란 디렉토리를 만들어준다 -> static 디렉토리 안에 또 다시 앱이름으로된(foods) 디렉토리를 만든다
-> 이제 이 디렉토리 안에 정적파일을 넣어주면 되는데 한 디렉토리에 모든 정적파일을 넣어줘도 되지만 조금 더 이쁘게 구조화한다면 보통은 CSS JavaScript images fonts 등의 디렉토리를 추가적으로 만든다 (우리는 JavaScript는 지금 없다)
-> 만들어준다! -> 이제 각각의 디렉토리에 맞게 정적 파일을 넣주면 되는데 지금 우리의 정적파일들은 templates 디렉토리 안에 있다 templates 디렉토리 안의 정적파일들 디렉토리 안의 파일들을 새로 만든 정적파일들 디렉토리 안에 넣어준다
-> templates 디렉토리 안의 정적파일 디렉토리드들은 지워준다 (난 그냥 새로운 정적파이 디렉토리 안만들고 정적파일들 디렉토리 자체를 옮겼다) -> 이제 이 옮긴 정적파일들을 사용하도록 템플릿을 수정하면 된다
-> index.html을 연다 -> 맨 위에 {% load static %} 라고 적는다 -> 이건 템플릿 랭귀지 중 템플릿 태그라고 하는데 static에 있는 정적 파일들을 현재 이 템플릿에서 사용한다고 알려준다
-> 정적 파일을 사용한다고 알려줬으니 이제 템플릿에 있는 경로를 정적파일이 있는 위치로 바꿔주면 된다 -> CSS부터 해보자 href가 CSS파일의 경로다 이 부분을 {% static 'foods/css/styles.css'%} 이렇게 바꾼다
-> 이미지는 src가 이미지의 경로다 이 부분을 {% static 'foods/images/chicken.jpg'%} 이렇게 바꾼다 -> 그럼 이제 font는? CSS 파일이 fonts를 어떻게찾는가.... 웹퍼블리싱 수업 들어야하나?

Template과 Static의 폴더 구조
둘 다 샌드위치 구조이다 왜 이렇게 샌드위치 구조로 만들어야할까? -> 사이트가 복잡해지면 점점 앱이 여러개 생긴다 이 때 폴더구조가 샌드위치 구조가 아니면 문제가 발생한다
하나의 프로젝트 디렉토리에 여러개의 앱이 있고 그 앱 안에 templates 디렉토리가 있다 이 때 templates 디렉토리 안에 앱이름으로 된 디렉토리를 추가하지 않고 바로 html파일을 넣으면 어떻게 될까?
하나의 프로젝트에 A와 B라는 두개의 앱이 있고 그 안에 templates 폴더 그리고 templates 폴더 안에 바로 html 파일이 있다고 해보자 
-> 우리가 했던 예제와 같이 url 설정 끝낸 후 브라우저에 domain/A/index 를 열자 -> A 템플릿이 렌더링 되서 나온다 그럼 이번엔 domain/B/index를 열자 -> 근데 이번에도 A 템플릿이 렌더링되서 나온다 왜일까?
-> 프로젝트 앱의 settings.py로 가보자 -> TEMPLATES 로 가자 -> 'APP_DIRS': True, 이부분을 주목 -> 이 라인은 각각의 앱에 templates 디렉토리가 있으니까 템플릿 찾을 때 거기서 찾으라는 의미이다
-> 우리는 A,B 두개의 앱이 있으니까 이 상태로 index.html을 찾으려하면 settings.py의 INSTALLED_APPS에 등록된 순서대로 index 템플릿을 찾게된다 (이 경우 A가 먼저 등록되어있다) 그런데 index.html은 A에도
있고 B에도 있다 이 때 장고는 앱이 등록된 순서대로 templates 디렉토리를 뒤지다 먼저 등록된 A의 templates 디렉토리에서 index.html을 찾는다 -> 이렇게 겹치는 일이 없게 하기 위해 샌드위치 구조로 만든다

이미지와 같은 정적 파일 (static file)도 샌드위치 구조로 구성하는 이유는?
Template과 거의 비슷한데 살짝 다른 점이 있다 -> 우리가 개발할 때는 문제가 없는데 개발한 서비스를 배보할 때 문제가 생긴다
-> 배포 환경에서는 모든 정적파일들을 하나의 디렉토리로 모아서 사용하게 되는데 이 때 같은 이름의 파일이 있으면 충돌이 나게 된다 그런데 이 파일들을 각각의 앱 이름으로 되어있는 디렉토리에 모아주면 하나의 디렉토리에
모았을 때도 문제없이 사용할 수 있다

----------------------------------------------------------------------------------------------------------------------------------------------

Template Language (템플릿 언어) 이해하기
: 장고의 템플릿 언어는 화면을 구성하는 템플릿을 작성할 때 보다 편리하게 작성할 수 있도록 도와주는것이다
쉽게 말해 html문서를 작성할 때 프로그래밍을 하듯 작성할수 있게 해준다
언뜻 모습만 보면 html안에 마치 파이썬이 들어간 거처럼 보이지만 사실 그건 아니고 프로그래밍 구조와 유사한 기능을 제공하는 것이다

템플릿 언어는 크게 4가지 종류가 있다
1. 템플릿 변수 : 템플릿이 렌더될 때 우리가 넘겨준 객체로 대치된다 -> 우리가 지정한 데이터로 변환
2. 템플릿 태그 : 템플릿에 로직을 넣어준다 -> 템플릿 작성에 로직을 사용
3. 템플릿 필터 : 템플릿 변수를 특정한 형식으로 변환할 때 사용
4. 템플릿 주석 : 템플릿 언어의 주석처리를 담당

템플릿 변수
템플릿 변수는 중괄호 두개로 감싼 형태로 사용한다 {{변수명}}
이 템플릿 변수는 템플릿이 렌더될 때 우리가 지정해준 결과로 변환된다 (우리가 지정해준 데이터로 변환)
view에서 템플릿으로 원하는 데이터를 전달하고 탬플릿은 이 템플릿 변수를 이용해서 전달받은 데이터를 사용한다 즉 템플릿 변수는 view에서 템플릿으로 넘겨준 데이터로 해석되어 변환된다 (view에서 넘겨받은 값으로 전환)

템플릿 변수는 점 연산자를 지원한다
{{변수명.속성}}
이 연산자는 템플릿 변수 내부 속성에 접근할 때 사용한다
ex) codeit의 title 에 접근하고 싶으면 codeit.title이 된다

템플릿 필터
템플릿 변수 옆에 파이프 연산자(|)를 넣어 사용한다 -> {{변수명|필터}}
템플릿 변수를 특정한 형식으로 변환하기 위해 사용한다
ex) {{codeit|upper}} 의 경우 codeit 템플릿 변수가 변환되는 텍스트를 모두 대문자로 바꾸어준다

템플릿 태그
{% 태그 %}  -> 이런 형태로 사용된다
몇몇 태그는 시작되는 템플릿 태그와 종료되는 템플릿 태그 형태로 시작과 끝을 명시해서 사용한다 -> {% 태그 %}   {% end태그 %}
템플릿 태그는 템플릿을 작성할 때 로직을 함께 넣어서 템플릿을 편하게 작성할 수 있게 돕는다
예를 들어 for loop ( {% for %}  {% endfor %}  )을 이용해서 반복되는 부분을 간단하게 처리할 수 있고
템플릿 변수와 if else을 사용하여 조건에 따라 템플릿 달라지도록 할 수 있다
->
{% if %}
{% else %}
{% endif %}

그리고 템플릿 태그 block 을 이용해서 
->
{% block %}
{% endblock %}

중복되는 부분을 상속을 이용해 처리하기도 한다 -> 이 부분은 뒤에 자세하게


템플릿 주석
{# 주석 #}
템플릿 언어에서 주석처리를 하기 위함으로 위의 형태이다

------------------------------------------------------------------------------------------------------------------------------------------------------
Template Language 한 걸음 더

템플릿 언어 (Template Language)는 Django의 템플릿에서 사용 할 수 있는 특별한 문법으로 템플릿 변수, 템플릿 필터, 템플릿 태그, 템플릿 코멘트가 있습니다. 이번 노트에서는 템플릿 변수와 필터 그리고 태그에 대해 조금 더 알아볼텐데 아래 내용을 모두 외우려고 하지 말고 '이런식으로 사용하는구나' 정도로만 가볍게 읽어보세요 :)
템플릿 변수 (Template Variable)

{{ variable }}

템플릿 변수는 템플릿이 렌더될 때 해당 변수가 의미하는 값으로 변환됩니다. 뷰(View)에서 가공한 데이터를 템플릿으로 넘겨주면 템플릿에서는 템플릿 변수를 사용해 넘겨받은 데이터에 접근할 수 있습니다.
템플릿 변수의 점(.) 연산자

템플릿 변수는 점(.)을 사용해서 변수 안쪽 속성에 접근할 수 있습니다.

user = {"name" : "우재", "coffee" : True}

예를 들어 위와 같은 user 변수가 있다면, user.name으로 "우재"라는 안쪽 값에 접근 할 수 있다는 거죠. 이와 같은 점(.) 연산자는 다음과 같은 순서로 변수의 안쪽 속성에 접근을 시도합니다.

    변수를 사전형(dict)으로 생각하고 점(.) 연산자로 Key값 조회
    변수를 객체로 생각하고 내부 속성값 조회 또는 함수 호출
    변수를 리스트(list)로 생각하고 점(.) 연산자로 Index 조회

Django에서 템플릿의 점 연산자를 만나면 자동으로 위의 경우대로 순서대로 처리하며 알맞은 값으로 변환되지만 내가 접근 하려는 템플릿 변수가 어떤 자료형인지 알고 점(.)연산자를 사용해야지만 예기치 못한 에러를 방지 할수 있습니다.
템플릿 필터 (Template Filter)

{{ variable|filter }}

템플릿 변수에 파이프(|)를 쓰고 템플릿 필터를 사용하면 템플릿 변수를 특정 형식으로 변환 할 수 있습니다.

{{ variable|filter:args }}

일부 필터는 필터 뒤에 인자를 필요로 합니다. Django는 약 60개의 내장 템플릿 필터를 제공하며 개발자가 직접 필터를 정의해서 사용하는 것도 가능합니다. 아래는 몇 가지 내장 템플릿 필터입니다.
default

참조하는 템플릿 변수가 비어 있거나 부울형 False일 경우 변환되는 값을 지정합니다.

{{ variable|default:"coffee" }} 

변수가 비어 있거나 False면 coffee 라는 텍스트로 대체 됩니다.
capfirst

맨 첫글자를 대문자로 바꿔 줍니다.

{{ variable|capfirst }}

random

반복 가능한 템플릿 변수에 대해 무작위로 하나를 추출해 변환합니다.

{{ variable|random }}

만약 variable이 참조하는 값이 [ "a", "b", "c", "d" ] 인 리스트형이라면 템플릿 변수가 리스트 내의 하나의 원소로 대체 됩니다.
upper & lower

템플릿 변수를 대문자(upper) 또는 소문자 (lower)로 변환합니다.

{{ variable | upper }} , {{ variable | lower }}

ljust & rjust

주어진 길이 내에서 공백을 넣어 왼쪽 정렬(ljust) 또는 오른쪽 정렬(rjust)을 한 문자열로 변환합니다.

{{ variable|ljust:"length" }}, {{ variable|rjust:"length" }}

variable이 "codeit" 일 때 {{ variable|ljust:"10" }} 이라면 "codeit    "이 됩니다. 공백을 표시해서 보면 "codeit_ _ _ _"이런 형태인거죠.마찬가지로 만약 {{ variable|rjust:"10" }} 이라면 "    codeit"이 되겠죠?



이 밖에도 몇 가지 필터가 더 있는데 모두 외울 필요는 당연히 없고 필요할 때 찾아서 사용하면 됩니다. 더 많은 템플릿 필터에 대한 정보는 아래 Django 공식 문서를 참고하세요.
https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#ref-templates-builtins-filters
템플릿 태그 (Template Tag)

{% tag %}

템플릿 태그는 템플릿을 작성할 때 반복문, 조건문 등의 로직을 사용해서 마치 프로그래밍을 하듯 템플릿을 작성할 수 있게 해줍니다. Django가 기본적으로 제공하는 태그가 있지만, 개발자가 직접 태그를 정의해서 사용할 수도 있습니다.

{% tag %} ~ {% endtag %}

태그의 형태는 단독으로 사용하는 템플릿 태그와 여는 태그와 닫는 태그가 필요한 템플릿 태그가 있습니다. 아래는 몇 가지 기본 템플릿 태그입니다.
for

{% for obj in values %} ~ {% endfor %}

반복 가능한 객체를 반복하며 템플릿을 작성 할 수 있습니다. 아래처럼 말이죠.

{% for food in foods %} 
    <li> {{ food.name }} </li>
{% endfor %}

만약 목록을 역순으로 반복하고 싶다면 아래와 같이 사용 할 수 있습니다.

{% for food in foods reversed %} 
    <li> {{ food.name }} </li>
{% endfor %}

반복 가능한 객체가 비어 있거나 존재하지 않을 때는 아래와 같이 사용 할 수 있습니다.
아래는 만약 foods라는 객체가 비어있다면 {% empty %} 구문이 실행됩니다.

{% for food in foods %} 
    <li> {{ food.name }} </li>
{% empty %}
    <li> There is no food. </li>
{% endfor %}

if

{% if value1 %} ~ {% elif value2 %} ~ {% else %} ~ {% endif %}

파이썬에서 사용하던 조건문과 형태가 비슷하죠? 실제로 사용 할 때도 우리가 아는 조건문의 형태로 사용하면 됩니다.

{% if hungry %}
    <p> Let's eat! </p>
{% elif sleepy %}
        <p> You need some coffee. </p>
{% else %}
    <p> Go back to work. </p>
{% endif %}

with

{% with value1=value2 %} ~ {% endwith %}

복잡한 변수가 있을 때 '별명'을 붙이기 위해 사용합니다. with 구문 내에서는 value1을  value2 대신 사용할 수 있습니다.

이 밖에도 몇 가지 템플릿 태그가 더 있는데, 필터와 마찬가지로 필요할 때 찾아서 사용하면 됩니다. 템플릿 태그에 대한 더 많은 정보는 아래 Django 공식 문서를 참고하세요.
https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#ref-templates-builtins-tags
사용자 정의 필터와 태그

사용자 정의 템플릿 필터와 템플릿 태그를 사용하는 방법은 Django의 문법에 익숙해진 후에 별토의 레슨에서 다루도록 하겠습니다. 지금은 기본적인 템플릿 언어에 익숙해지는 것이 중요합니다. 만약 먼저 알고 싶다면 아래의 공식 문서를 참고하세요.
https://docs.djangoproject.com/en/2.2/howto/custom-template-tags/

-----------------------------------------------------------------------------------------------------------------------------------------------------

Can you apply multiple stylesheets to a single page? 
https://discuss.codecademy.com/t/can-you-apply-multiple-stylesheets-to-a-single-page/369792

------------------------------------------------------------------------------------------------------------------------------------------------------

팀플릿 중복 없애기

하나의 웹서비스는 무수히 많은 웹페이지로 이루어져있고 그 때 마다 중복되는 코드를 매번 쓰는 것은 비효율적이다 장고에서는 이런 템플릿의 반복적인 부분들을 템플릿 상속으로 해결할 수 있다
상속이란 파일들의 공통적인 부분들을 모아 부모 파일로 만들어두고 자식파일에서는 공통되는 부분은 부모 파일에서 상속받고 달라지는 부분만 작성한다
장고에서 템플릿 상속은 템플릿 태그인 {% block %} 과 {% extends %}를 사용해서 구현합니다

해보자 
VSCode 켜고 foods 앱의 index 템플릿으로 가자 뼈대가 되는 기본적인 부분을 부모 템플릿으로 만들어보자 
index 템플릿과 같은 디렉토리에 base.html을 만들자 -> index에 있는 모든 내용 복사해서 붙여놓자
base 템플릿 = 부모 템플릿, index 템플릿 = 자식 템플릿





